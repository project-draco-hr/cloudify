{
  if (arg instanceof Closure<?>) {
    final Closure<?> closure=(Closure<?>)arg;
    try {
      List<String> paramsList=new ArrayList<String>();
      for (      Map.Entry<String,Object> entry : params.entrySet()) {
        if (entry.getKey().toString().equals(CloudifyConstants.INVOCATION_PARAMETERS_KEY)) {
          logger.fine("Adding parameter " + entry.getKey() + " having value of "+ entry.getValue().toString());
          paramsList=Arrays.asList(entry.getValue().toString().substring(1,entry.getValue().toString().length() - 1).split(", "));
          logger.info("parameters have been added " + paramsList.toString());
        }
      }
      Object result=closure.call(paramsList);
      return result;
    }
 catch (    final Exception e) {
      logger.log(Level.SEVERE,"A closure entry failed to execute: " + e.getMessage(),e);
      throw new USMException("Failed to execute closure " + e.getMessage(),e);
    }
  }
  final Process proc=launchProcessAsync(arg,workingDir,retries,redirectErrorStream,params);
  final BufferedReader reader=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  String line=null;
  StringBuilder sb=new StringBuilder();
  final String newline=System.getProperty("line.separator");
  logger.info("Command Output:");
  try {
    do {
      if (line != null) {
        sb.append(line).append(newline);
        logger.info(line);
      }
      line=reader.readLine();
    }
 while (line != null);
  }
 catch (  final IOException ioe) {
    throw new USMException("Failed to execute command: " + commandLine,ioe);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      final IOException e) {
      }
    }
  }
  try {
    final int exitValue=proc.waitFor();
    logger.info("Command exited with value: " + exitValue);
    if (exitValue != 0) {
      logger.severe("Event lifecycle external process exited with abnormal status code: " + exitValue);
      Pattern pattern=Pattern.compile(EXCEPTION_CAUGHT_REGEX,Pattern.MULTILINE);
      Matcher matcher=pattern.matcher(sb.toString());
      int beginIndex=0;
      int endIndex=0;
      if (matcher.find()) {
        beginIndex=matcher.start(0);
        endIndex=matcher.end(0);
      }
      logger.log(Level.SEVERE,"Event lifecycle external process failed: " + sb.toString());
      throw new USMException("Event lifecycle external process exited with abnormal status code: " + exitValue + " "+ sb.toString().substring(beginIndex,endIndex));
    }
  }
 catch (  final InterruptedException e) {
    logger.warning("Interrupted while waiting for process to exit");
  }
  try {
    Thread.sleep(POST_SYNC_PROCESS_SLEEP_INTERVAL);
  }
 catch (  final InterruptedException e) {
  }
  return sb.toString();
}
