{
  final String serverName=this.serverNamePrefix + System.currentTimeMillis();
  final String json="{\"server\":{ \"name\":\"" + serverName + "\",\"imageId\":"+ serverTemplate.getImageId()+ ",\"flavorId\":"+ serverTemplate.getHardwareId()+ "}}";
  String serverBootResponse=null;
  try {
    serverBootResponse=service.path(this.pathPrefix + "servers").header("Content-Type","application/json").header("X-Auth-Token",token).accept(MediaType.APPLICATION_XML).post(String.class,json);
  }
 catch (  final UniformInterfaceException e) {
    final String responseEntity=e.getResponse().getEntity(String.class);
    throw new OpenstackException(e + " Response entity: " + responseEntity);
  }
  try {
    final DocumentBuilder documentBuilder=createDocumentBuilder();
    final Document doc=documentBuilder.parse(new InputSource(new StringReader(serverBootResponse)));
    final String status=xpath.evaluate("/server/@status",doc);
    if (!status.startsWith("BUILD")) {
      throw new IllegalStateException("Expected server status of BUILD(*), got: " + status);
    }
    final String serverId=xpath.evaluate("/server/@id",doc);
    final String rootPassword=xpath.evaluate("/server/@adminPass",doc);
    MachineDetails md=new MachineDetails();
    md.setMachineId(serverId);
    md.setRemoteUsername("root");
    md.setRemotePassword(rootPassword);
    return md;
  }
 catch (  XPathExpressionException e) {
    throw new OpenstackException("Failed to parse XML Response from server. Response was: " + serverBootResponse + ", Error was: "+ e.getMessage(),e);
  }
catch (  SAXException e) {
    throw new OpenstackException("Failed to parse XML Response from server. Response was: " + serverBootResponse + ", Error was: "+ e.getMessage(),e);
  }
catch (  IOException e) {
    throw new OpenstackException("Failed to send request to server. Response was: " + serverBootResponse + ", Error was: "+ e.getMessage(),e);
  }
}
