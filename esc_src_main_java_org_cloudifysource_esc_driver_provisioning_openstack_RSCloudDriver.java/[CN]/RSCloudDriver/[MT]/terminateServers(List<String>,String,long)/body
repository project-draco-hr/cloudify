{
  for (  final String serverId : serverIds) {
    try {
      service.path(this.pathPrefix + "servers/" + serverId).header("X-Auth-Token",token).accept(MediaType.APPLICATION_XML).delete();
    }
 catch (    final UniformInterfaceException e) {
      final String responseEntity=e.getResponse().getEntity(String.class).toString();
      throw new IllegalArgumentException(e + " Response entity: " + responseEntity);
    }
  }
  int successCounter=0;
  for (  final String serverId : serverIds) {
    while (System.currentTimeMillis() < endTime) {
      try {
        this.getNode(serverId,token);
      }
 catch (      final UniformInterfaceException e) {
        if (e.getResponse().getStatus() == HTTP_NOT_FOUND) {
          ++successCounter;
          break;
        }
        throw e;
      }
      Thread.sleep(SERVER_POLLING_INTERVAL_MILLIS);
    }
  }
  if (successCounter == serverIds.size()) {
    return;
  }
  throw new TimeoutException("Nodes " + serverIds + " did not shut down in the required time");
}
