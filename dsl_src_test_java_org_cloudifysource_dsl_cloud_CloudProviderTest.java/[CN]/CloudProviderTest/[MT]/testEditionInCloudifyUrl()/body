{
  final CloudProvider fixture=new CloudProvider();
  CloudProviderValidator fixtureValidator=new CloudProviderValidator();
  fixtureValidator.setDSLEntity(fixture);
  fixtureValidator.validateCloudifyUrl(new DSLValidationContext());
  fixture.setMachineNamePrefix("");
  fixture.setReservedMemoryCapacityPerMachineInMB(1);
  fixture.setProvider("");
  fixture.setManagementOnlyFiles(new ArrayList());
  fixture.setNumberOfManagementMachines(1);
  fixture.setManagementGroup("");
  fixture.setCloudifyOverridesUrl("");
  fixture.setSshLoggingLevel("");
  final String result=fixture.getCloudifyUrl();
  assertTrue("Default cloudify url should point to the cloudifysource repo",result.startsWith("http://repository.cloudifysource.org"));
  String cloudifyEdition=PlatformVersion.getEdition();
  assertTrue("Can not recognize cloudify edition.",cloudifyEdition.equals(PlatformVersion.EDITION_XAP_PREMIUM) || cloudifyEdition.equals(PlatformVersion.EDITION_CLOUDIFY));
  assertTrue("cloudify url not containing any of the known editions",result.contains("/gigaspaces-xap-premium-") || result.contains("/gigaspaces-cloudify-"));
  assertTrue("cloudify url not containing valid product key",result.contains("com/gigaspaces/xap") || result.contains("org/cloudifysource"));
  assertTrue("Cloudify url was not formatted properly",!result.contains("%s"));
  validateUrlFormat(result);
}
