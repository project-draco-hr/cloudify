{
  if (mds == null || mds.length == 0) {
    throw new IllegalArgumentException("mds must have at least one element");
  }
  final String[] result=new String[mds.length];
  final ScriptLanguages scriptLanguage=template.getScriptLanguage();
  final Cloud cloud=this.installationDetailsBuilder.getCloud();
  final String lookupLocatorsString=createLocatorsString(mds,cloud);
  for (int i=0; i < mds.length; i++) {
    final MachineDetails md=mds[i];
    final InstallationDetailsBuilder currentBuilder=installationDetailsBuilder.clone();
    currentBuilder.setMachineDetails(md);
    currentBuilder.setLookupLocators(lookupLocatorsString);
    final InstallationDetails installationDetails=currentBuilder.build();
    createdDetails.add(installationDetails);
    final Map<String,String> externalEnvVars=installationDetails.getExtraRemoteEnvironmentVariables();
    final EnvironmentFileBuilder fileBuilder=new EnvironmentFileBuilder(scriptLanguage,externalEnvVars);
    final boolean notFirstManagementMachine=(i != 0);
    installationDetails.setNoWebServices(notFirstManagementMachine);
    installationDetails.setNoManagementSpace(notFirstManagementMachine);
    fileBuilder.loadEnvironmentFileFromDetails(installationDetails);
    fileBuilder.build();
    final String fileContents=fileBuilder.toString();
    result[i]=fileContents;
  }
  return result;
}
