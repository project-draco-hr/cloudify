{
  final Method[] methods=obj.getClass().getDeclaredMethods();
  for (  final Method method : methods) {
    if (method.getAnnotation(DSLValidation.class) != null) {
      final boolean accessible=method.isAccessible();
      try {
        @SuppressWarnings("unchecked") final Map<Object,Object> currentVars=this.getBinding().getVariables();
        DSLValidationContext validationContext=new DSLValidationContext();
        validationContext.setFilePath((String)currentVars.get(DSLUtils.DSL_FILE_PATH_PROPERTY_NAME));
        method.setAccessible(true);
        method.invoke(obj,validationContext);
      }
 catch (      final InvocationTargetException e) {
        throw new DSLValidationException(e.getTargetException().getMessage(),e.getTargetException());
      }
catch (      final Exception e) {
        throw new DSLValidationException("Failed to execute DSL validation: " + e.getMessage(),e);
      }
 finally {
        method.setAccessible(accessible);
      }
    }
  }
}
