{
  if (!isProperyExistsInBean(object,name)) {
    throw new IllegalArgumentException("Could not find property: " + name + " on Object: "+ object);
  }
  if (this.usedProperties == null) {
    throw new IllegalArgumentException("used properties can not be null. Property: " + name + ", Value: "+ value.toString()+ ", Active object: "+ this.activeObject);
  }
  if (this.usedProperties.contains(name)) {
    if (!isDuplicatePropertyAllowed(value)) {
      throw new IllegalArgumentException("Property duplication was found: Property " + name + " is define"+ "d more than once.");
    }
  }
  this.usedProperties.add(name);
  Object convertedValue=null;
  try {
    convertedValue=convertValueToExecutableDSLEntryIfNeeded(getDSLFile().getParentFile(),object,name,value);
    if (logger.isLoggable(Level.FINEST)) {
      logger.finest("BeanUtils.setProperty(object=" + object + ",name="+ name+ ",value="+ convertedValue+ ",value.getClass()="+ convertedValue.getClass());
    }
    if (!PropertyUtils.isWriteable(object,name)) {
      throw new IllegalArgumentException("Field " + name + " in object of type: "+ object.getClass().getName()+ " is not writable");
    }
    final Object currentValue=PropertyUtils.getProperty(object,name);
    if (currentValue != null && currentValue instanceof Map<?,?> && convertedValue != null && convertedValue instanceof Map<?,?>) {
      final Map<Object,Object> currentMap=(Map<Object,Object>)currentValue;
      currentMap.putAll((Map<Object,Object>)convertedValue);
    }
 else     if (PropertyUtils.getPropertyType(object,name).isEnum() && value instanceof String) {
      final Class enumClass=PropertyUtils.getPropertyType(object,name);
      final Enum enumValue=Enum.valueOf(enumClass,(String)value);
      BeanUtils.setProperty(object,name,enumValue);
    }
 else {
      BeanUtils.setProperty(object,name,convertedValue);
    }
  }
 catch (  final DSLValidationException e) {
    throw new DSLValidationRuntimeException(e);
  }
catch (  final Exception e) {
    throw new IllegalArgumentException("Failed to set property " + name + " of Object "+ object+ " to value: "+ value+ ". Error was: "+ e.getMessage(),e);
  }
  checkForApplicationServiceBlockNameParameter(name,value);
}
