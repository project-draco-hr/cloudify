{
  if (!isProperyExistsInBean(object,name)) {
    throw new IllegalArgumentException("Could not find property: " + name + " on Object: "+ object);
  }
  if (this.usedProperties == null) {
    throw new IllegalArgumentException("used properties can not be null. Property: " + name + ", Value: "+ value.toString()+ ", Active object: "+ this.activeObject);
  }
  if (this.usedProperties.contains(name)) {
    if (!isDuplicatePropertyAllowed(value)) {
      throw new IllegalArgumentException("Property duplication was found: Property " + name + " is defined more than once.");
    }
  }
  this.usedProperties.add(name);
  try {
    PropertyDescriptor descriptor=PropertyUtils.getPropertyDescriptor(object,name);
    Class<?> propertyType=descriptor.getPropertyType();
    if (propertyType.equals(ExecutableDSLEntry.class)) {
      final File workDirectory=getDSLFile().getParentFile();
      final ExecutableDSLEntry executableEntry=ExecutableDSLEntryFactory.createEntry(value,name,workDirectory);
      BeanUtils.setProperty(object,name,executableEntry);
    }
 else     if (propertyType.equals(ExecutableEntriesMap.class)) {
      final File workDirectory=getDSLFile().getParentFile();
      final ExecutableEntriesMap entriesMap=ExecutableDSLEntryFactory.createEntriesMap(value,name,workDirectory);
      BeanUtils.setProperty(object,name,entriesMap);
    }
 else {
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest("BeanUtils.setProperty(object=" + object + ",name="+ name+ ",value="+ value+ ",value.getClass()="+ value.getClass());
      }
      BeanUtils.setProperty(object,name,value);
    }
  }
 catch (  final DSLValidationException e) {
    throw new DSLValidationRuntimeException(e);
  }
catch (  final Exception e) {
    throw new IllegalArgumentException("Failed   to set property " + name + " of Object "+ object+ " to value: "+ value,e);
  }
  checkForApplicationServiceBlockNameParameter(name,value);
}
