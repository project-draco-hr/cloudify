{
  Object localArg=arg;
  if (name.equals(EXTEND_PROPERTY_NAME)) {
    if (propertyCounter > 1) {
      throw new DSLException(EXTEND_PROPERTY_NAME + " must be first inside the service block");
    }
    if (arg != null && arg.getClass().isArray()) {
      final Object[] arr=(Object[])arg;
      if (arr.length != 1) {
        throw new DSLException(EXTEND_PROPERTY_NAME + " property must be a single string");
      }
      localArg=((Object[])arg)[0];
    }
    if (!(localArg instanceof String)) {
      throw new DSLException(EXTEND_PROPERTY_NAME + " property must be a string");
    }
    if (!(this.activeObject instanceof Service)) {
      throw new DSLException(EXTEND_PROPERTY_NAME + " property can only be used on a service");
    }
    final String extendServicePath=(String)localArg;
    try {
      File extendedServiceAbsPath=new File(extendServicePath);
      RecipePathResolver resolver=new RecipePathResolver();
      final String dslFilePath=(String)getProperty(ServiceReader.DSL_FILE_PATH_PROPERTY_NAME);
      if (dslFilePath == null) {
        throw new IllegalStateException("No dsl file path present in binding context");
      }
      final File activeServiceDirectory=new File(dslFilePath).getParentFile();
      resolver.setCurrentDirectory(activeServiceDirectory);
      if (resolver.resolveService(extendedServiceAbsPath)) {
        extendedServiceAbsPath=resolver.getResolved();
      }
 else {
        throw new DSLException("could not find extended service in paths " + StringUtils.join(resolver.getPathsLooked().toArray(),", "));
      }
      if (logger.isLoggable(Level.FINER)) {
        logger.finer("reading extended service file [" + extendedServiceAbsPath + "]");
      }
      final Service baseService=readServiceToExtend(extendedServiceAbsPath);
      BeanUtils.copyProperties(this.activeObject,baseService);
      final Service activeService=(Service)activeObject;
      activeService.getExtendedServicesPaths().addFirst(extendedServiceAbsPath.getAbsolutePath());
      return true;
    }
 catch (    final IllegalAccessException e) {
      throw new DSLException("Failed to parse extended service: " + extendServicePath,e);
    }
catch (    final InvocationTargetException e) {
      throw new DSLException("Failed to parse extended service: " + extendServicePath,e);
    }
  }
  return false;
}
