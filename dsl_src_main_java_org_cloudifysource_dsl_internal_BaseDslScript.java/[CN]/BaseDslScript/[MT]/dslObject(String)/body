{
  final DSLObjectInitializerData data=getDSLInitializers().get(name);
  if (data == null) {
    return null;
  }
  if (isDuplicateProcessingUnit(name)) {
    throw new DSLException("There may only be one type of processing unit defined. Found more than one: " + "[" + name + ", "+ this.processingUnitType+ "]");
  }
  if (this.activeObject == null) {
    if (!data.isAllowRootNode()) {
      throw new DSLException("Elements of  type " + name + " may not be used as the root node of a DSL");
    }
  }
 else {
    if (data.isAllowInternalNode()) {
      final String parentElement=data.getParentElement();
      if (parentElement != null && !parentElement.isEmpty()) {
        final DSLObjectInitializerData parentType=getDSLInitializers().get(parentElement);
        if (parentType == null) {
          throw new IllegalStateException("The DSL type " + name + " has a declared parent type of "+ parentElement+ " which is not a known type. This should not happen.");
        }
        if (!parentType.getClazz().isAssignableFrom(this.activeObject.getClass())) {
          throw new DSLException("The type: " + name + " may only be nested under elements of type "+ parentType.getName());
        }
      }
    }
 else {
      throw new DSLException("Elements of type: " + name + " may not be placed in internal nodes");
    }
  }
  try {
    if (this.activeObject != null && !(this.activeObject instanceof Application) && isProperyExistsInBean(this.activeObject,name)) {
      final Object existingPropertyValue=PropertyUtils.getProperty(this.activeObject,name);
      if (existingPropertyValue != null) {
        return BeanUtils.cloneBean(existingPropertyValue);
      }
    }
    return data.clazz.newInstance();
  }
 catch (  final InstantiationException e) {
    throw new DSLException("Failed to create new element of type " + data.getName() + " with class: "+ data.clazz,e);
  }
catch (  final IllegalAccessException e) {
    throw new DSLException("Failed to create new element of type " + data.getName() + " with class: "+ data.clazz,e);
  }
catch (  final InvocationTargetException e) {
    throw new DSLException("Failed to copy existing element of type " + data.getName() + " with class: "+ data.clazz,e);
  }
catch (  final NoSuchMethodException e) {
    throw new DSLException("Failed to copy existing element of type " + data.getName() + " with class: "+ data.clazz,e);
  }
}
