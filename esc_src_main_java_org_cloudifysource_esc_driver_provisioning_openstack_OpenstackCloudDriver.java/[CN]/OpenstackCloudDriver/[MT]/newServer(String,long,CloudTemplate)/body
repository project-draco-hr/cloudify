{
  final String serverId=createServer(token,serverTemplate);
  try {
    final MachineDetails md=new MachineDetails();
    waitForServerToReachStatus(md,endTime,serverId,token,"ACTIVE");
    final String allocateIp=(String)serverTemplate.getOptions().get(OPENSTACK_ALLOCATE_FLOATING_IP);
    if (allocateIp == null || Boolean.parseBoolean(allocateIp)) {
      final String floatingIp=allocateFloatingIP(token);
      addFloatingIP(String.valueOf(serverId),floatingIp,token);
      md.setPublicAddress(floatingIp);
    }
    md.setMachineId(serverId);
    md.setAgentRunning(false);
    md.setCloudifyInstalled(false);
    md.setInstallationDirectory(cloud.getProvider().getRemoteDirectory());
    md.setRemoteUsername("root");
    return md;
  }
 catch (  final Exception e) {
    logger.log(Level.WARNING,"server: " + serverId + " failed to start up correctly. "+ "Shutting it down. Error was: "+ e.getMessage(),e);
    try {
      terminateServer(serverId,token,endTime);
    }
 catch (    final Exception e2) {
      logger.log(Level.WARNING,"Error while shutting down failed machine: " + serverId + ". Error was: "+ e.getMessage()+ ".It may be leaking.",e);
    }
    throw e;
  }
}
