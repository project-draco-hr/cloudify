{
  final String response=service.path(this.pathPrefix + "servers/" + nodeId).header("X-Auth-Token",token).accept(MediaType.APPLICATION_XML).get(String.class);
  final Node node=new Node();
  try {
    final Document xmlDoc=this.documentBuilder.parse(new InputSource(new StringReader(response)));
    node.setId(xpath.evaluate("/server/@id",xmlDoc));
    node.setStatus(xpath.evaluate("/server/@status",xmlDoc));
    node.setName(xpath.evaluate("/server/@name",xmlDoc));
    final NodeList addresses=(NodeList)xpath.evaluate("/server/addresses/network/ip/@addr",xmlDoc,XPathConstants.NODESET);
    if (node.getStatus().equalsIgnoreCase(MACHINE_STATUS_ACTIVE)) {
      if (addresses.getLength() != 2) {
        throw new IllegalStateException("Expected 2 addresses, private and public, got " + addresses.getLength() + " addresses");
      }
      node.setPrivateIp(addresses.item(0).getTextContent());
      node.setPublicIp(addresses.item(1).getTextContent());
    }
  }
 catch (  XPathExpressionException e) {
    throw new OpenstackException("Failed to parse XML Response from server. Response was: " + response + ", Error was: "+ e.getMessage(),e);
  }
catch (  SAXException e) {
    throw new OpenstackException("Failed to parse XML Response from server. Response was: " + response + ", Error was: "+ e.getMessage(),e);
  }
catch (  IOException e) {
    throw new OpenstackException("Failed to send request to server. Response was: " + response + ", Error was: "+ e.getMessage(),e);
  }
  return node;
}
