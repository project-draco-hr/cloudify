{
  final List<Future<MachineDetails>> list=new ArrayList<Future<MachineDetails>>(numOfManagementMachines);
  for (int i=0; i < numOfManagementMachines; ++i) {
    final Future<MachineDetails> task=executor.submit(new Callable<MachineDetails>(){
      @Override public MachineDetails call() throws Exception {
        final MachineDetails md=newServer(token,endTime,template);
        return md;
      }
    }
);
    list.add(task);
  }
  Exception firstException=null;
  final List<MachineDetails> machines=new ArrayList<MachineDetails>(numOfManagementMachines);
  for (  final Future<MachineDetails> future : list) {
    try {
      machines.add(future.get());
    }
 catch (    final Exception e) {
      if (firstException == null) {
        firstException=e;
      }
    }
  }
  if (firstException == null) {
    return machines.toArray(new MachineDetails[machines.size()]);
  }
  logger.warning("Provisioning of management machines failed, the following node will be shut down: " + machines);
  for (  final MachineDetails machineDetails : machines) {
    try {
      this.terminateServer(machineDetails.getMachineId(),token,endTime);
    }
 catch (    final Exception e) {
      logger.log(Level.SEVERE,"While shutting down machine after provisioning of management machines failed, " + "shutdown of node: " + machineDetails.getMachineId() + " failed. This machine may be leaking. Error was: "+ e.getMessage(),e);
    }
  }
  throw new CloudProvisioningException("Failed to launch management machines: " + firstException.getMessage(),firstException);
}
