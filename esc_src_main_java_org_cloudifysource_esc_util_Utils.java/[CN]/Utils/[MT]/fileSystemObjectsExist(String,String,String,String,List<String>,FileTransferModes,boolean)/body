{
  boolean objectsExist;
  if (allMustExist) {
    objectsExist=true;
  }
 else {
    objectsExist=false;
  }
  if (!fileTransferMode.equals(FileTransferModes.SCP)) {
    throw new IOException("File resolving is currently not supported for this file transfer protocol (" + fileTransferMode + ")");
  }
  final FileSystemOptions opts=new FileSystemOptions();
  SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(opts,"no");
  SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(opts,false);
  if (keyFile != null && !keyFile.isEmpty()) {
    final File temp=new File(keyFile);
    if (!temp.isFile()) {
      throw new FileNotFoundException("Could not find key file: " + temp);
    }
    SftpFileSystemConfigBuilder.getInstance().setIdentities(opts,new File[]{temp});
  }
  SftpFileSystemConfigBuilder.getInstance().setTimeout(opts,SFTP_DISCONNECT_DETECTION_TIMEOUT_MILLIS);
  final FileSystemManager mng=VFS.getManager();
  String scpTargetBase, scpTarget;
  if (password != null && !password.isEmpty()) {
    scpTargetBase="sftp://" + username + ':'+ password+ '@'+ host;
  }
 else {
    scpTargetBase="sftp://" + username + '@'+ host;
  }
  FileObject remoteDir=null;
  try {
    for (    final String fileSystemObject : fileSystemObjects) {
      scpTarget=scpTargetBase + fileSystemObject;
      remoteDir=mng.resolveFile(scpTarget,opts);
      if (remoteDir.exists()) {
        if (!allMustExist) {
          objectsExist=true;
          break;
        }
      }
 else {
        if (allMustExist) {
          objectsExist=false;
          break;
        }
      }
    }
  }
  finally {
    if (remoteDir != null) {
      mng.closeFileSystem(remoteDir.getFileSystem());
    }
  }
  return objectsExist;
}
