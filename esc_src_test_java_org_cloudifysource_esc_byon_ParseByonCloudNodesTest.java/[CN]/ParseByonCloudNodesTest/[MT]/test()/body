{
  try {
    String testClasses=this.getClass().getProtectionDomain().getCodeSource().getLocation().toString().substring(5);
    String packageName=this.getClass().getPackage().getName().replace(".","/");
    final File cloudFile=new File(testClasses + packageName + "/testbyon-cloud.groovy");
    System.out.println("Trying to read cloud file " + cloudFile.getAbsolutePath());
    final Cloud cloud=ServiceReader.readCloud(cloudFile);
    System.out.println("Creating BYON deployer");
    final ByonDeployer deployer=new ByonDeployer();
    List<Map<String,String>> nodesList=null;
    final Map<String,CloudTemplate> templatesMap=cloud.getTemplates();
    for (    final String templateName : templatesMap.keySet()) {
      final Map<String,Object> customSettings=cloud.getTemplates().get(templateName).getCustom();
      Assert.assertNotNull("Custom settings not found for template " + templateName,customSettings);
      if (customSettings != null) {
        nodesList=(List<Map<String,String>>)customSettings.get(CLOUD_NODES_LIST);
      }
      Assert.assertNotNull("NodesList not found for template " + templateName,nodesList);
      if (nodesList == null) {
        System.out.println("Failed to create cloud deployer, invalid configuration, nodesList is null");
        throw new CloudProvisioningException("Failed to create BYON cloud deployer, invalid configuration");
      }
      deployer.addNodesList(templateName,nodesList);
    }
    Set<CustomNode> allNodes=deployer.getAllNodesByTemplateName("SMALL_LINUX");
    Set<CustomNode> expectedNodes=new HashSet<CustomNode>();
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test01","0.0.0.1","tgrid1","tgrid1","byon-test01"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test02","0.0.0.2",null,null,"byon-test02"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test11","192.168.9.59",null,null,"byon-test11"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test12","192.168.9.60",null,null,"byon-test12"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test13","0.0.0.5",null,null,"byon-test13"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test21","0.0.0.6",null,null,"byon-test21"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test22","0.0.0.7",null,null,"byon-test22"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test23","0.0.0.8",null,null,"byon-test23"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test31","0.0.0.9",null,null,"byon-test31"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test32","0.0.0.10",null,null,"byon-test32"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test33","0.0.0.11",null,null,"byon-test33"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test41","0.0.0.12",null,null,"byon-test41"));
    expectedNodes.add(new CustomNodeImpl(PROVIDER,"byon-test42","0.0.0.13",null,null,"byon-test42"));
    System.out.println(Arrays.toString(allNodes.toArray()));
    Assert.assertTrue("Wrong output",allNodes.size() == expectedNodes.size() && expectedNodes.containsAll(allNodes) && allNodes.containsAll(expectedNodes));
  }
 catch (  final Exception e) {
    System.out.println("Failed to create cloud deployer, exception thrown: " + e.getMessage());
    e.printStackTrace();
    throw new IllegalStateException("Failed to create cloud deployer",e);
  }
}
