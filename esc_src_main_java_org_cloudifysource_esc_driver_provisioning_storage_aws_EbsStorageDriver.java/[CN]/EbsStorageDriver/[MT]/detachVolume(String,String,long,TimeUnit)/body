{
  final long end=System.currentTimeMillis() + timeUnit.toMillis(duration);
  NodeMetadata nodeMetadata=getNodeMetadata(ip);
  Set<VolumeDetails> listVolumes=listVolumes(ip,duration,timeUnit);
  for (  VolumeDetails volumeDetails : listVolumes) {
    if (volumeDetails.getId().equals(volumeId)) {
      try {
        logger.fine("Detaching volume with id " + volumeId + " from machine with id "+ nodeMetadata.getId());
        this.ebsClient.detachVolumeInRegion(this.region,volumeId,true,DetachVolumeOptions.Builder.fromInstance(nodeMetadata.getProviderId()));
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,"Failed detaching node with id " + volumeId + " Reason: "+ e.getMessage(),e);
        throw new StorageProvisioningException("Failed detaching node with id " + volumeId + " Reason: "+ e.getMessage(),e);
      }
      waitForVolumeToReachStatus(Status.AVAILABLE,end,volumeId);
      return;
    }
  }
  logger.warning("Volume with ID " + volumeId + " does not exist.");
  throw new IllegalStateException("Volume with ID " + volumeId + " does not exist in elastic block store.");
}
