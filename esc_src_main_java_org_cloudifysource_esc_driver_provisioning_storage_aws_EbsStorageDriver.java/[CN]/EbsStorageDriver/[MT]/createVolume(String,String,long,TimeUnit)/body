{
  StorageTemplate storageTemplate=cloud.getCloudStorage().getTemplates().get(templateName);
  final long end=System.currentTimeMillis() + timeUnit.toMillis(duration);
  int size=storageTemplate.getSize();
  if (size < MIN_VOLUME_SIZE || size > MAX_VOLUME_SIZE) {
    throw new StorageProvisioningException("Volume size must be set to a value between " + MIN_VOLUME_SIZE + " and "+ MAX_VOLUME_SIZE);
  }
  Volume volume=null;
  try {
    logger.fine("Creating new volume in availability zone " + availabilityZone + " of size "+ size+ " with prefix "+ cloud.getCloudStorage().getTemplates().get(templateName).getNamePrefix());
    volume=this.ebsClient.createVolumeInAvailabilityZone(availabilityZone,size);
    String volumeId=volume.getId();
    logger.fine("Waiting for volume to become available.");
    waitForVolumeToReachStatus(Status.AVAILABLE,end,volumeId);
    logger.fine("Naming created volume with id " + volumeId);
    TagApi tagApi=getTagsApi();
    Map<String,String> tagsMap=createTagsMap(templateName);
    tagApi.applyToResources(tagsMap,Arrays.asList(volumeId));
    logger.fine("Volume created successfully. volume id is: " + volumeId);
  }
 catch (  final Exception e) {
    if (volume != null) {
      handleExceptionAfterVolumeCreated(volume.getId());
    }
    if (e instanceof TimeoutException) {
      throw (TimeoutException)e;
    }
 else {
      throw new StorageProvisioningException("Failed creating volume of size " + size + " in availability zone. "+ availabilityZone+ "Reason: "+ e.getMessage(),e);
    }
  }
  return createVolumeDetails(volume);
}
