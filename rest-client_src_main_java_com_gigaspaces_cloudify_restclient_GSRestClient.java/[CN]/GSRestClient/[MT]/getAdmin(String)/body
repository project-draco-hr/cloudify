{
  final String url=getFullUrl(ADMIN_REFLECTION_URL + relativeUrl);
  logger.finer("performing http get to url: " + url);
  final HttpGet httpMethod=new HttpGet(url);
  InputStream instream=null;
  try {
    final HttpResponse response=httpClient.execute(httpMethod);
    if (response.getStatusLine().getStatusCode() != HTTP_STATUS_OK) {
      logger.log(Level.FINE,httpMethod.getURI() + " response code " + response.getStatusLine().getStatusCode());
      throw new RestException(response.getStatusLine().toString());
    }
    final HttpEntity entity=response.getEntity();
    if (entity == null) {
      final ErrorStatusException e=new ErrorStatusException("comm_error");
      logger.log(Level.FINE,httpMethod.getURI() + " response entity is null",e);
      throw e;
    }
    instream=entity.getContent();
    final String responseBody=StringUtils.getStringFromStream(instream);
    logger.finer(httpMethod.getURI() + " http get response: " + responseBody);
    final Map<String,Object> responseMap=GSRestClient.jsonToMap(responseBody);
    return responseMap;
  }
 catch (  final ClientProtocolException e) {
    logger.log(Level.FINE,httpMethod.getURI() + " Rest api error",e);
    throw new ErrorStatusException("comm_error",e,e.getMessage());
  }
catch (  final IOException e) {
    logger.log(Level.FINE,httpMethod.getURI() + " Rest api error",e);
    throw new ErrorStatusException("comm_error",e,e.getMessage());
  }
 finally {
    if (instream != null) {
      try {
        instream.close();
      }
 catch (      final IOException e) {
      }
    }
    httpMethod.abort();
  }
}
