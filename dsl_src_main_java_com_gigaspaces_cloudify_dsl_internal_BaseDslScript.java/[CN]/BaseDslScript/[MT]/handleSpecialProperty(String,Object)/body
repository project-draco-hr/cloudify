{
  if (name.equals(EXTEND_PROPERTY_NAME)) {
    if (propertyCounter > 1)     throw new DSLException(EXTEND_PROPERTY_NAME + " must be first inside the service block");
    if (arg != null && arg.getClass().isArray()) {
      Object[] arr=(Object[])arg;
      if (arr.length != 1)       throw new DSLException(EXTEND_PROPERTY_NAME + " property must be a single string");
      arg=((Object[])arg)[0];
    }
    if (!(arg instanceof String))     throw new DSLException(EXTEND_PROPERTY_NAME + " property must be a string");
    if (!(this.activeObject instanceof Service))     throw new DSLException(EXTEND_PROPERTY_NAME + " property can only be used on a service");
    String extendServicePath=(String)arg;
    try {
      File extendedServiceAbsPath=new File(extendServicePath);
      if (!extendedServiceAbsPath.isAbsolute() && !extendedServiceAbsPath.exists()) {
        if (logger.isLoggable(Level.FINER))         logger.finer("locating extended file, using relative path [" + extendServicePath + "]");
        String dslFilePath=(String)getProperty(ServiceReader.DSL_FILE_PATH_PROPERTY_NAME);
        if (dslFilePath == null)         throw new IllegalStateException("No dsl file path present in binding context");
        String activeServiceDirectory=new File(dslFilePath).getParent();
        extendedServiceAbsPath=new File(activeServiceDirectory + "/" + extendServicePath);
      }
 else       if (logger.isLoggable(Level.FINER))       logger.finer("locating extended file, using absolute path [" + extendServicePath + "]");
      if (logger.isLoggable(Level.FINER))       logger.finer("reading extended service file [" + extendedServiceAbsPath + "]");
      Service baseService=ServiceReader.readService(extendedServiceAbsPath);
      BeanUtils.copyProperties(this.activeObject,baseService);
      Service activeService=(Service)activeObject;
      activeService.getExtendedServicesPaths().addFirst(extendServicePath);
      return true;
    }
 catch (    PackagingException e) {
      throw new DSLException("Failed to parse extended service: " + extendServicePath,e);
    }
catch (    IllegalAccessException e) {
      throw new DSLException("Failed to parse extended service: " + extendServicePath,e);
    }
catch (    InvocationTargetException e) {
      throw new DSLException("Failed to parse extended service: " + extendServicePath,e);
    }
  }
  return false;
}
