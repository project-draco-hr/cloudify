{
  SshServer sshd=new SshServer();
  if (SecurityUtils.isBouncyCastleRegistered()) {
    sshd.setKeyExchangeFactories(Arrays.<NamedFactory<KeyExchange>>asList(new DHG14.Factory(),new DHG1.Factory()));
    sshd.setRandomFactory(new SingletonRandomFactory(new BouncyCastleRandom.Factory()));
  }
 else {
    sshd.setKeyExchangeFactories(Arrays.<NamedFactory<KeyExchange>>asList(new DHG1.Factory()));
    sshd.setRandomFactory(new SingletonRandomFactory(new JceRandom.Factory()));
  }
  setUpDefaultCiphers(sshd);
  sshd.setCompressionFactories(Arrays.<NamedFactory<Compression>>asList(new CompressionNone.Factory()));
  sshd.setMacFactories(Arrays.<NamedFactory<Mac>>asList(new HMACMD5.Factory(),new HMACSHA1.Factory(),new HMACMD596.Factory(),new HMACSHA196.Factory()));
  sshd.setChannelFactories(Arrays.<NamedFactory<Channel>>asList(new ChannelSession.Factory(),new ChannelDirectTcpip.Factory()));
  sshd.setSignatureFactories(Arrays.<NamedFactory<Signature>>asList(new SignatureDSA.Factory(),new SignatureRSA.Factory()));
  sshd.setFileSystemFactory(new NativeFileSystemFactory());
  ForwardingAcceptorFactory faf=new DefaultForwardingAcceptorFactory();
  sshd.setTcpipForwardNioSocketAcceptorFactory(faf);
  sshd.setX11ForwardNioSocketAcceptorFactory(faf);
  return sshd;
}
