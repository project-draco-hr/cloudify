{
  if (StringUtils.isBlank(SPRING_SECURITY_PROFILE) || SPRING_SECURITY_PROFILE.equalsIgnoreCase(CloudifyConstants.SPRING_PROFILE_NON_SECURE)) {
    return true;
  }
  if (logger.isLoggable(Level.FINE)) {
    logger.fine("Starting \"hasPermission\" for user: " + authDetails.getUsername());
    if (authDetails.getRoles() == null) {
      logger.fine("with roles: null,");
    }
 else {
      logger.fine("with roles: " + collectionToDelimitedString(authDetails.getRoles(),","));
    }
    if (authDetails.getAuthGroups() == null) {
      logger.fine("and with authGroups: null");
    }
 else {
      logger.fine("and with authGroups: " + collectionToDelimitedString(authDetails.getAuthGroups(),","));
    }
    logger.fine("requested permission: " + permission.toString());
    logger.fine("on target authGroups: " + targetDomainObject.toString());
  }
  boolean permissionGranted=false;
  String permissionName, targetAuthGroups;
  if (permission != null && !(permission instanceof String)) {
    throw new AuthorizationServiceException("Failed to verify permissions, invalid permission object type: " + permission.getClass().getName());
  }
  permissionName=(String)permission;
  if (StringUtils.isBlank(permissionName)) {
    throw new AuthorizationServiceException("Failed to verify permissions, missing permission name");
  }
  if (!permissionName.equalsIgnoreCase(PERMISSION_TO_VIEW) && !permissionName.equalsIgnoreCase(PERMISSION_TO_DEPLOY)) {
    throw new AuthorizationServiceException("Unsupported permission name: " + permissionName + ". valid permission names are: "+ PERMISSION_TO_VIEW+ ", "+ PERMISSION_TO_DEPLOY);
  }
  if (targetDomainObject != null && !(targetDomainObject instanceof String)) {
    throw new AuthorizationServiceException("Failed to verify permissions, invalid authorization groups object" + " type: " + targetDomainObject.getClass().getName());
  }
  if (targetDomainObject == null) {
    targetAuthGroups="";
  }
 else {
    targetAuthGroups=((String)targetDomainObject).trim();
  }
  if (hasRequiredRoles(authDetails,permissionName) && hasAuthGroupAccess(authDetails,targetAuthGroups,permissionName)) {
    permissionGranted=true;
  }
  return permissionGranted;
}
