{
  boolean permissionGranted=false;
  String permissionName, authGroupsString;
  Collection<String> requestedAuthGroups, userAuthGroups;
  if (authentication == null || authentication instanceof AnonymousAuthenticationToken) {
    throw new AccessDeniedException("Anonymous user is not supported");
  }
  if (permission != null && !(permission instanceof String)) {
    throw new AuthorizationServiceException("Failed to verify permissions, invalid permission object type: " + permission.getClass().getName());
  }
  permissionName=(String)permission;
  if (StringUtils.isBlank(permissionName)) {
    throw new AuthorizationServiceException("Failed to verify permissions, missing permission name");
  }
  if (!permissionName.equalsIgnoreCase(PERMISSION_TO_VIEW) && !permissionName.equalsIgnoreCase(PERMISSION_TO_DEPLOY)) {
    throw new AuthorizationServiceException("Unsupported permission name: " + permissionName + ". valid permission names are: "+ PERMISSION_TO_VIEW+ ", "+ PERMISSION_TO_DEPLOY);
  }
  if (targetDomainObject != null && !(targetDomainObject instanceof String)) {
    throw new AuthorizationServiceException("Failed to verify permissions, invalid authorization groups object" + " type: " + targetDomainObject.getClass().getName());
  }
  if (targetDomainObject == null) {
    targetDomainObject="";
  }
  authGroupsString=((String)targetDomainObject).trim();
  requestedAuthGroups=splitAndTrim(authGroupsString,AUTH_GROUPS_DELIMITER);
  userAuthGroups=getUserAuthGroups();
  boolean relevantRoleFound=false;
  if (permissionName.equalsIgnoreCase(PERMISSION_TO_VIEW)) {
    for (    String userAuthGroup : userAuthGroups) {
      if (ROLE_CLOUDADMIN.equalsIgnoreCase(userAuthGroup) || ROLE_APPMANAGER.equalsIgnoreCase(userAuthGroup) || ROLE_VIEWER.equalsIgnoreCase(userAuthGroup)) {
        relevantRoleFound=true;
        break;
      }
    }
  }
 else   if (permissionName.equalsIgnoreCase(PERMISSION_TO_DEPLOY)) {
    for (    String userAuthGroup : userAuthGroups) {
      if (ROLE_CLOUDADMIN.equalsIgnoreCase(userAuthGroup) || ROLE_APPMANAGER.equalsIgnoreCase(userAuthGroup)) {
        relevantRoleFound=true;
        break;
      }
    }
  }
  if (relevantRoleFound) {
    if (permissionName.equalsIgnoreCase(PERMISSION_TO_VIEW)) {
      if (hasPermissionToView(requestedAuthGroups)) {
        permissionGranted=true;
        logger.log(Level.INFO,"View permission granted for user " + authentication.getName());
      }
 else {
        logger.log(Level.INFO,"Insufficient permissions. User " + authentication.getName() + " is only "+ "permitted to view groups: "+ Arrays.toString(userAuthGroups.toArray(new String[0])));
      }
    }
 else     if (permissionName.equalsIgnoreCase(PERMISSION_TO_DEPLOY)) {
      if (hasPermissionToDeploy(requestedAuthGroups)) {
        permissionGranted=true;
        logger.log(Level.INFO,"Deploy permission granted for user " + authentication.getName());
      }
 else {
        logger.log(Level.INFO,"Insufficient permissions. User " + authentication.getName() + " is only "+ "permitted to deploy for groups: "+ Arrays.toString(userAuthGroups.toArray(new String[0])));
      }
    }
  }
 else {
    logger.log(Level.INFO,"User " + authentication.getName() + "is missing the required roles, access is "+ "denied.");
  }
  return permissionGranted;
}
