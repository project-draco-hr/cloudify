{
  final Object obj=createDslObject(name);
  if (obj != null) {
    if (this.activeObject != null) {
      final Collection<Method> methods=this.activeMethods.values();
      for (      final Method method : methods) {
        if (method.getName().startsWith("set") && (method.getParameterTypes().length == 1) && (method.getParameterTypes()[0].equals(obj.getClass()))) {
          try {
            method.invoke(this.activeObject,obj);
          }
 catch (          final Exception e) {
            logger.log(Level.SEVERE,"Failed to set " + name,e);
            throw new IllegalArgumentException("Failed to set " + name,e);
          }
          break;
        }
      }
    }
    swapActiveObject((Closure<Object>)arg,obj);
    return new DSLEntryResult(true,obj);
  }
  final String methodName="set" + name.substring(0,1).toUpperCase() + name.substring(1);
  if (this.activeMethods == null) {
    return new DSLEntryResult(false,null);
  }
  final Method m=this.activeMethods.get(methodName);
  if (m == null) {
    return new DSLEntryResult(false,null);
  }
  try {
    m.invoke(this.activeObject,arg);
  }
 catch (  final Exception e) {
    logger.log(Level.SEVERE,"Failed to invoke method " + methodName + ": "+ e.getMessage(),e);
    throw new IllegalStateException("Failed to invoke method " + methodName + " on object "+ this.activeObject,e);
  }
  return new DSLEntryResult(true,this.activeObject);
}
