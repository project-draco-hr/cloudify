{
  try {
    final ProvisioningDriverClassBuilder builder=new ProvisioningDriverClassBuilder();
    final Object computeProvisioningInstance=builder.build(providerDirectory.getAbsolutePath(),cloud.getConfiguration().getClassName());
    provisioning=ComputeDriverProvisioningAdapter.create(computeProvisioningInstance);
  }
 catch (  final ClassNotFoundException e) {
    throw new CLIException("Failed to load provisioning class for cloud: " + cloud.getName() + ". Class not found: "+ cloud.getConfiguration().getClassName(),e);
  }
catch (  final Exception e) {
    throw new CLIException("Failed to load provisioning class for cloud: " + cloud.getName(),e);
  }
  provisioning.setProvisioningDriverClassContext(new DefaultProvisioningDriverClassContext());
  provisioning.addListener(new CliProvisioningDriverListener());
  final String serviceName=null;
  final ValidationContext validationContext=new ValidationContextImpl();
  try {
    if (performValidation) {
      new BootstrapUrlValidator(cloud).validateCloudifyUrls(validationContext);
    }
    final ComputeDriverConfiguration configuration=new ComputeDriverConfiguration();
    configuration.setAdmin(null);
    configuration.setCloud(cloud);
    configuration.setCloudTemplate(cloud.getConfiguration().getManagementMachineTemplate());
    configuration.setManagement(true);
    configuration.setServiceName(serviceName);
    provisioning.setConfig(configuration);
    if (performValidation) {
      validationContext.validationEvent(ValidationMessageType.TOP_LEVEL_VALIDATION_MESSAGE,ShellUtils.getFormattedMessage(CloudifyErrorMessages.EVENT_VALIDATE_CLOUD_CONFIG.getName()));
      try {
        provisioning.validateCloudConfiguration(validationContext);
      }
 catch (      final UnsupportedOperationException e) {
      }
      validationContext.validationEvent(ValidationMessageType.TOP_LEVEL_VALIDATION_MESSAGE,ShellUtils.getFormattedMessage(CloudifyErrorMessages.EVENT_CLOUD_CONFIG_VALIDATED.getName()));
    }
  }
 catch (  final CloudProvisioningException e) {
    throw new CLIException(e.getMessage(),e);
  }
}
