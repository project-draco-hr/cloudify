{
  final long end=System.currentTimeMillis() + timeoutUnit.toMillis(timeout);
  createProvisioningDriver(performValidation);
  final MachineDetails[] servers=getOrCreateManagementServers(timeout,timeoutUnit,keystorePassword,securityProfile);
  try {
    if (logger.isLoggable(Level.FINE)) {
      for (      final MachineDetails server : servers) {
        logServerDetails(server);
      }
    }
    validateServers(servers);
    if (servers[0].isAgentRunning()) {
      logger.fine("Management servers are already running Cloudify agent - skipping default bootstrapping");
    }
 else {
      startManagememntProcesses(servers,securityProfile,keystorePassword,end);
    }
    if (!isNoWebServices()) {
      final Integer restPort=getRestPort(cloud.getConfiguration().getComponents().getRest().getPort(),ShellUtils.isSecureConnection(securityProfile));
      final Integer webuiPort=getWebuiPort(cloud.getConfiguration().getComponents().getWebui().getPort(),ShellUtils.isSecureConnection(securityProfile));
      waitForManagementWebServices(ShellUtils.isSecureConnection(securityProfile),username,password,restPort,webuiPort,end,servers);
    }
  }
 catch (  final IOException e) {
    stopManagementMachines();
    throw new CLIException("Cloudify bootstrap on provider " + this.cloud.getProvider().getProvider() + " failed. Reason: "+ e.getMessage(),e);
  }
catch (  final URISyntaxException e) {
    stopManagementMachines();
    throw new CLIException("Bootstrap-cloud failed. Reason: " + e.getMessage(),e);
  }
catch (  final TimeoutException e) {
    stopManagementMachines();
    throw new CLIException("Cloudify bootstrap on provider " + this.cloud.getProvider().getProvider() + " timed-out. "+ "Please try to run again using the ???timeout option.",e);
  }
catch (  final CLIException e) {
    stopManagementMachines();
    throw e;
  }
catch (  final InstallerException e) {
    stopManagementMachines();
    throw e;
  }
catch (  final InterruptedException e) {
    stopManagementMachines();
    throw e;
  }
}
