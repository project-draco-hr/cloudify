{
  final long end=System.currentTimeMillis() + timeoutUnit.toMillis(timeout);
  createProvisioningDriver();
  try {
    MachineDetails[] servers;
    try {
      servers=provisioning.startManagementMachines(timeout,timeoutUnit);
    }
 catch (    final CloudProvisioningException e) {
      throw new InstallerException("Failed to start managememnt servers. Reason: " + e.getMessage(),e);
    }
    if (servers.length == 0) {
      throw new IllegalArgumentException("Received zero management servers from provisioning implementation");
    }
    if (logger.isLoggable(Level.INFO)) {
      for (      final MachineDetails server : servers) {
        logServerDetails(server);
      }
    }
    if (servers[0].isAgentRunning()) {
      throw new IllegalStateException("Cloud bootstrapper found existing management machines with the same name. " + "Please shut them down before continuing");
    }
 else {
      startManagememntProcesses(servers,end);
    }
    for (    final MachineDetails server : servers) {
      String ipAddress=null;
      if (cloud.getConfiguration().isBootstrapManagementOnPublicIp()) {
        ipAddress=server.getPublicAddress();
      }
 else {
        ipAddress=server.getPrivateAddress();
      }
      final URL restAdminUrl=new URI("http",null,ipAddress,REST_GATEWAY_PORT,null,null,null).toURL();
      final URL webUIUrl=new URI("http",null,ipAddress,WEBUI_PORT,null,null,null).toURL();
      waitForConnection(restAdminUrl,Utils.millisUntil(end),TimeUnit.MILLISECONDS);
      logger.info("Rest service is available at: " + restAdminUrl + '.');
      logger.info("Webui service is available at: " + webUIUrl + '.');
    }
  }
 catch (  final IOException e) {
    throw new CLIException("Cloudify bootstrap on provider " + this.cloud.getProvider().getProvider() + " failed. Reason: "+ e.getMessage(),e);
  }
catch (  final URISyntaxException e) {
    throw new CLIException("Bootstrap-cloud failed. Reason: " + e.getMessage(),e);
  }
catch (  final TimeoutException e) {
    throw new CLIException("Cloudify bootstrap on provider " + this.cloud.getProvider().getProvider() + " timed-out. "+ "Please try to run again using the ???timeout option.",e);
  }
}
