{
  final ExecutorService executors=Executors.newFixedThreadPool(numOfManagementMachines);
  final BootstrapLogsFilters bootstrapLogs=new BootstrapLogsFilters(verbose);
  try {
    bootstrapLogs.applyLogFilters();
    final List<Future<Exception>> futures=new ArrayList<Future<Exception>>();
    for (    final InstallationDetails detail : installations) {
      final Future<Exception> future=executors.submit(new Callable<Exception>(){
        @Override public Exception call(){
          try {
            installer.installOnMachineWithIP(detail,CalcUtils.millisUntil(endTime),TimeUnit.MILLISECONDS);
          }
 catch (          final TimeoutException e) {
            logger.log(Level.INFO,"Failed accessing management VM " + detail.getPublicIp() + " Reason: "+ e.getMessage(),e);
            return e;
          }
catch (          final InterruptedException e) {
            logger.log(Level.INFO,"Failed accessing management VM " + detail.getPublicIp() + " Reason: "+ e.getMessage(),e);
            return e;
          }
catch (          final InstallerException e) {
            logger.log(Level.INFO,"Failed accessing management VM " + detail.getPublicIp() + " Reason: "+ e.getMessage(),e);
            return e;
          }
          return null;
        }
      }
);
      futures.add(future);
    }
    for (    final Future<Exception> future : futures) {
      try {
        final Exception e=future.get(CalcUtils.millisUntil(endTime),TimeUnit.MILLISECONDS);
        if (e != null) {
          if (e instanceof TimeoutException) {
            throw (TimeoutException)e;
          }
          if (e instanceof InterruptedException) {
            throw (InterruptedException)e;
          }
          if (e instanceof InstallerException) {
            throw (InstallerException)e;
          }
          throw new InstallerException("Failed creating machines.",e);
        }
      }
 catch (      final ExecutionException e) {
        throw new InstallerException("Failed creating machines.",e);
      }
    }
  }
  finally {
    executors.shutdown();
    bootstrapLogs.restoreLogFilters();
  }
}
