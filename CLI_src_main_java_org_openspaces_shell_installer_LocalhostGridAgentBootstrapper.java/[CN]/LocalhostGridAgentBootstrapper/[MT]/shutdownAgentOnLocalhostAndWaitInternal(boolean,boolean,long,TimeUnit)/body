{
  long end=System.currentTimeMillis() + timeunit.toMillis(timeout);
  ConnectionLogsFilter connectionLogs=new ConnectionLogsFilter();
  connectionLogs.supressConnectionErrors();
  adminFacade.disconnect();
  final Admin admin=createAdmin();
  GridServiceAgent agent=null;
  try {
    setLookupDefaults(admin);
    try {
      agent=waitForExistingAgent(admin,WAIT_EXISTING_AGENT_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    }
 catch (    TimeoutException e) {
    }
    if (agent == null) {
      logger.info("Agent not running on local machine");
    }
 else {
      if (!allowContainers) {
        for (        ProcessingUnit pu : admin.getProcessingUnits()) {
          for (          ProcessingUnitInstance instance : pu) {
            if (agent.equals(instance.getGridServiceContainer().getGridServiceAgent())) {
              throw new CLIException("Cannot shutdown agent since " + pu.getName() + " service is still running on this machine. Use -force flag.");
            }
          }
        }
      }
      if (!allowManagement) {
        String message="Cannot shutdown agent since management processes running on this machine. Use the shutdown-management command instead.";
        for (        GridServiceManager gsm : admin.getGridServiceManagers()) {
          if (agent.equals(gsm.getGridServiceAgent())) {
            throw new CLIException(message);
          }
        }
        for (        ElasticServiceManager esm : admin.getElasticServiceManagers()) {
          if (agent.equals(esm.getGridServiceAgent())) {
            throw new CLIException(message);
          }
        }
        for (        LookupService lus : admin.getLookupServices()) {
          if (agent.equals(lus.getGridServiceAgent())) {
            throw new CLIException(message);
          }
        }
      }
      agent.shutdown();
      waitForAgentShutdown(agent,ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE,end),TimeUnit.MILLISECONDS);
    }
  }
  finally {
    admin.close();
    if (agent != null) {
      Thread.sleep(WAIT_AFTER_ADMIN_CLOSED_MILLIS);
    }
    connectionLogs.restoreConnectionErrors();
  }
}
