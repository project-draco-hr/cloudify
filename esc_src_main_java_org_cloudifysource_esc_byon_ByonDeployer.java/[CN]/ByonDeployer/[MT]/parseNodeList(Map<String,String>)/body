{
  final List<CustomNode> cloudNodes=new ArrayList<CustomNode>();
  boolean useIdAsTemplate=false;
  boolean useIdAsPrefix=false;
  int index=1;
  String currnentId;
  final String nodeId=nodeMap.get(CLOUD_NODE_ID).trim();
  final String hostsList=nodeMap.get(CLOUD_NODE_HOST_LIST).trim();
  final String[] hosts=hostsList.split(",");
  if (hosts.length > 1) {
    if (isIdTemplate(nodeId)) {
      useIdAsTemplate=true;
    }
 else {
      useIdAsPrefix=true;
    }
  }
  for (  String host : hosts) {
    host=host.trim();
    if (useIdAsTemplate) {
      currnentId=MessageFormat.format(nodeId,index);
    }
 else     if (useIdAsPrefix) {
      currnentId=nodeId + index;
    }
 else {
      currnentId=nodeId;
    }
    String ip="";
    String hostName="";
    if (IPUtils.validateIPAddress(host)) {
      ip=host;
      try {
        hostName=IPUtils.resolveIpToHostName(host);
      }
 catch (      UnknownHostException e) {
        logger.warning("Could not resolve ip to host name : " + host + " . this machine is not reachable");
      }
    }
 else {
      try {
        ip=IPUtils.resolveHostNameToIp(host);
      }
 catch (      UnknownHostException e) {
        logger.warning("Could not resolve host name to ip : " + host + " . this machine is not reachable");
      }
      hostName=host;
    }
    cloudNodes.add(new CustomNodeImpl(PROVIDER_ID,currnentId,ip,hostName,nodeMap.get(CLOUD_NODE_USERNAME),nodeMap.get(CLOUD_NODE_CREDENTIAL),nodeMap.get(CLOUD_NODE_KEY_FILE),currnentId));
    index++;
  }
  return cloudNodes;
}
