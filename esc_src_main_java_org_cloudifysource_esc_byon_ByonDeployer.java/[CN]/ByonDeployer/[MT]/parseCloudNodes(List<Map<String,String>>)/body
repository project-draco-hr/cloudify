{
  logger.info("Parsing cloud nodes from configuration file");
  final List<CustomNode> cloudNodes=new ArrayList<CustomNode>();
  for (  final Map<String,String> nodeMap : nodesMapList) {
    String nodeId=nodeMap.get(CLOUD_NODE_ID);
    String hostList=nodeMap.get(CLOUD_NODE_HOST_LIST);
    String hostRange=nodeMap.get(CLOUD_NODE_HOST_RANGE);
    if (StringUtils.isBlank(nodeId)) {
      throw new CloudProvisioningException(EMPTY_HOSTS_ERR_MESSAGE);
    }
    if (StringUtils.isNotBlank(hostList)) {
      if (isIPList(hostList.trim())) {
        cloudNodes.addAll(parseNodeList(nodeMap));
      }
 else {
        cloudNodes.add(parseOneNode(nodeMap));
      }
    }
 else     if (StringUtils.isNotBlank(hostRange)) {
      if (isIPRange(hostRange.trim())) {
        cloudNodes.addAll(parseNodeRange(nodeMap));
      }
 else       if (isIPCIDR(hostRange.trim())) {
        cloudNodes.addAll(parseNodeCIDR(nodeMap));
      }
 else {
        throw new CloudProvisioningException(INVALID_HOSTS_ERR_MESSAGE + ": " + hostList);
      }
    }
 else {
      throw new CloudProvisioningException(INVALID_HOSTS_ERR_MESSAGE);
    }
  }
  logger.info("Parsed cloud nodes = " + StringUtils.join(cloudNodes,","));
  return cloudNodes;
}
