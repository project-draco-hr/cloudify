{
  final String fullCommand=(details.getScriptLanguage() == ScriptLanguages.LINUX_SHELL ? "chmod +x " + scriptPath + ";"+ scriptPath : ("cmd.exe /c " + EnvironmentFileBuilder.normalizeCygwinPath(scriptPath)).replace("\\","\\\\"));
  try {
    logger.fine("Executing command '" + fullCommand + "' on target host "+ targetHost);
    Utils.executeSSHCommand(targetHost,fullCommand,details.getUsername(),details.getPassword(),details.getKeyFile(),endTimeMillis - System.currentTimeMillis(),TimeUnit.MILLISECONDS);
  }
 catch (  final BuildException e) {
    logger.log(Level.FINE,"The SSH execution failed with error: " + e.getMessage() + ". The command that failed to execute is : "+ fullCommand,e);
    if (e instanceof BuildTimeoutException) {
      final TimeoutException ex=new TimeoutException("SSH execution failed: " + e.getMessage());
      ex.initCause(e);
      throw ex;
    }
 else     if (e instanceof ExitStatusException) {
      final ExitStatusException ex=(ExitStatusException)e;
      final int ec=ex.getStatus();
      if (ec == 0 || ec == CUSTOM_ERR_CODE) {
        throw new InstallerException("SSH execution failed with exit code: " + ec,e);
      }
 else {
        throw new InstallerException("SSH execution failed with exit code: " + ec + ", message: "+ BootstrapScriptErrors.getMessageByErrorCode(ec),e);
      }
    }
 else {
      throw new InstallerException("SSH execution failed.",e);
    }
  }
}
