{
  long currentTimeInMillis=System.currentTimeMillis();
  long lockTimeout=endTime - currentTimeInMillis - ESTIMATED_TIME_TO_START_VM;
  if (lockTimeout < 0) {
    throw new MicrosoftAzureException("Aborted request to provision virtual machine. " + "The timeout is less then the estimated time to provision the machine");
  }
  logger.fine(getThreadIdentity() + "Waiting for pending request lock for lock " + pendingRequest.hashCode());
  boolean lockAcquired=pendingRequest.tryLock(lockTimeout,TimeUnit.MILLISECONDS);
  String serviceName=null;
  Deployment deployment;
  if (lockAcquired) {
    logger.fine(getThreadIdentity() + "Lock acquired : " + pendingRequest.hashCode());
    logger.fine(getThreadIdentity() + "Executing a request to provision a new virtual machine");
    try {
      serviceName=createCloudService(deplyomentDesc.getAffinityGroup(),endTime);
      deplyomentDesc.setHostedServiceName(serviceName);
      deplyomentDesc.setDeploymentName(serviceName);
      deployment=requestBodyBuilder.buildDeployment(deplyomentDesc);
      String xmlRequest=MicrosoftAzureModelUtils.marshall(deployment,false);
      logger.fine(getThreadIdentity() + "Launching virtual machine : " + deplyomentDesc.getRoleName());
      ClientResponse response=doPost("/services/hostedservices/" + serviceName + "/deployments",xmlRequest);
      String requestId=extractRequestId(response);
      waitForRequestToFinish(requestId,endTime);
      logger.fine(getThreadIdentity() + "About to release lock " + pendingRequest.hashCode());
      pendingRequest.unlock();
    }
 catch (    final Exception e) {
      logger.fine(getThreadIdentity() + "A failure occured : about to release lock " + pendingRequest.hashCode());
      if (serviceName != null) {
        try {
          deleteCloudService(serviceName,endTime);
        }
 catch (        final Exception e1) {
          logger.warning("Failed deleting cloud service " + serviceName + " : "+ e1.getMessage());
          logger.finest(ExceptionUtils.getFullStackTrace(e1));
        }
      }
      pendingRequest.unlock();
      if (e instanceof MicrosoftAzureException) {
        throw (MicrosoftAzureException)e;
      }
      if (e instanceof TimeoutException) {
        throw (TimeoutException)e;
      }
      if (e instanceof InterruptedException) {
        throw (InterruptedException)e;
      }
      throw new MicrosoftAzureException(e);
    }
  }
 else {
    throw new TimeoutException("Failed to acquire lock for deleteDeployment request after + " + lockTimeout + " milliseconds");
  }
  Deployment deploymentResponse=null;
  try {
    deploymentResponse=waitForDeploymentStatus("Running",serviceName,deployment.getDeploymentSlot(),endTime);
    deploymentResponse=waitForRoleInstanceStatus("ReadyRole",serviceName,deployment.getDeploymentSlot(),endTime);
  }
 catch (  final Exception e) {
    logger.fine("Error while waiting for VM status : " + e.getMessage());
    deleteVirtualMachineByDeploymentName(serviceName,deployment.getName(),endTime);
    if (e instanceof MicrosoftAzureException) {
      throw (MicrosoftAzureException)e;
    }
    if (e instanceof TimeoutException) {
      throw (TimeoutException)e;
    }
    if (e instanceof InterruptedException) {
      throw (InterruptedException)e;
    }
    throw new MicrosoftAzureException(e);
  }
  RoleDetails roleAddressDetails=new RoleDetails();
  roleAddressDetails.setId(deploymentResponse.getPrivateId());
  roleAddressDetails.setPrivateIp(deploymentResponse.getRoleInstanceList().getRoleInstances().get(0).getIpAddress());
  ConfigurationSets configurationSets=deploymentResponse.getRoleList().getRoles().get(0).getConfigurationSets();
  String publicIp=null;
  for (  ConfigurationSet configurationSet : configurationSets) {
    if (configurationSet instanceof NetworkConfigurationSet) {
      NetworkConfigurationSet networkConfigurationSet=(NetworkConfigurationSet)configurationSet;
      publicIp=networkConfigurationSet.getInputEndpoints().getInputEndpoints().get(0).getvIp();
    }
  }
  roleAddressDetails.setPublicIp(publicIp);
  return roleAddressDetails;
}
