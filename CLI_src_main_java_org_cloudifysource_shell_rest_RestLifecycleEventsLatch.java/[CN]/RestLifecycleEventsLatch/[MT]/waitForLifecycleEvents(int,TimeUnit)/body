{
  createConditionLatch(timeout,TimeUnit.MINUTES).waitFor(new Predicate(){
    @SuppressWarnings("unchecked") @Override public boolean isDone() throws CLIException, InterruptedException {
      url="/service/lifecycleEventContainerID/" + pollingID + "/cursor/"+ cursor;
      try {
        lifecycleEventLogs=(Map<String,Object>)client.get(url);
      }
 catch (      final ErrorStatusException e) {
        throw new CLIException("Deployment failed. Reason: " + e.getMessage(),e);
      }
      List<String> events=(List<String>)lifecycleEventLogs.get(CloudifyConstants.LIFECYCLE_LOGS);
      cursor=(Integer)lifecycleEventLogs.get(CloudifyConstants.CURSOR_POS);
      isDone=(Boolean)lifecycleEventLogs.get(CloudifyConstants.IS_TASK_DONE);
      remoteTaskLeaseExpiration=Long.valueOf((String)lifecycleEventLogs.get(CloudifyConstants.SERVER_POLLING_TASK_EXPIRATION_MILLI)) + System.currentTimeMillis();
      if (System.currentTimeMillis() > remoteTaskLeaseExpiration) {
        throw new CLIException("Events polling task has expired on remote server side");
      }
      if (events == null) {
        displayer.printNoChange();
      }
 else {
        displayer.printEvents(events);
      }
      if (isDone) {
        displayer.eraseCurrentLine();
        return true;
      }
      return false;
    }
  }
);
}
