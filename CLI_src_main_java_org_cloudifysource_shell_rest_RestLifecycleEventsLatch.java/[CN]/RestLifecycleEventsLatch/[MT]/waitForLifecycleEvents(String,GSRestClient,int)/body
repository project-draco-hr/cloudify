{
  createConditionLatch(timeoutInMinutes,TimeUnit.MINUTES).waitFor(new Predicate(){
    private int cursor=0;
    private boolean isDone=false;
    private boolean timedOutOnServer=false;
    private String url;
    private Map<String,Object> lifecycleEventLogs=null;
    @Override public boolean isDone() throws CLIException, InterruptedException {
      url="/service/lifecycleEventContainerID/" + serviceLifecycleEventContainerID + "/cursor/"+ cursor;
      try {
        lifecycleEventLogs=(Map<String,Object>)client.get(url);
      }
 catch (      final ErrorStatusException e) {
        throw new CLIStatusException(e,e.getReasonCode(),e.getArgs());
      }
      List<String> events=(List<String>)lifecycleEventLogs.get(CloudifyConstants.LIFECYCLE_LOGS);
      cursor=(Integer)lifecycleEventLogs.get(CloudifyConstants.CURSOR_POS);
      isDone=(Boolean)lifecycleEventLogs.get(CloudifyConstants.IS_TASK_DONE);
      timedOutOnServer=(Boolean)lifecycleEventLogs.get(CloudifyConstants.POLLING_TIMEOUT_EXCEPTION);
      if (events == null) {
        displayer.printNoChange();
      }
 else {
        displayer.printEvents(events);
      }
      if (isDone) {
        if (timedOutOnServer) {
          return false;
        }
        displayer.eraseCurrentLine();
      }
      return isDone;
    }
  }
);
}
