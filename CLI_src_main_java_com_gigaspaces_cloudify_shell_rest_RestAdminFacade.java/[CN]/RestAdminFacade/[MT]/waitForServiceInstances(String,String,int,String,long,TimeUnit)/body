{
  long end=System.currentTimeMillis() + timeunit.toMillis(timeout);
  int serviceShutDownEventsCount=0;
  String pollingURL="processingUnits/Names/" + ServiceUtils.getAbsolutePUName(applicationName,serviceName);
  waitForServicePU(applicationName,serviceName,pollingURL,timeoutErrorMessage,timeout,timeunit);
  logger.info(MessageFormat.format(messages.getString("deploying_service"),serviceName));
  Integer currentNumberOfInstances=0;
  while (System.currentTimeMillis() < end) {
    Map<String,Object> map=client.getAdminData(pollingURL);
    currentNumberOfInstances=(Integer)map.get("Instances-Size");
    if ("partitioned-sync2backup".equals(map.get("ClusterSchema"))) {
      plannedNumberOfInstances=Integer.valueOf((String)map.get("TotalNumberOfInstances"));
    }
    serviceShutDownEventsCount=handleEventLogs(serviceName,applicationName,plannedNumberOfInstances,serviceShutDownEventsCount);
    if (currentNumberOfInstances == 0) {
      logger.info(MessageFormat.format(messages.getString("deploying_service_updates"),plannedNumberOfInstances,currentNumberOfInstances));
    }
 else     if (plannedNumberOfInstances < currentNumberOfInstances) {
      throw new CLIException(MessageFormat.format(messages.getString("number_of_instances_exceeded_planned"),plannedNumberOfInstances,currentNumberOfInstances));
    }
 else     if (currentNumberOfInstances > 0) {
      if (isUSMService(applicationName,serviceName)) {
        int usmServicesStateRunningInstances=getNumberOfUSMServicesWithRunningState(serviceName,applicationName,currentNumberOfInstances);
        serviceShutDownEventsCount=handleEventLogs(serviceName,applicationName,plannedNumberOfInstances,serviceShutDownEventsCount);
        logger.info(MessageFormat.format(messages.getString("deploying_service_updates"),plannedNumberOfInstances,usmServicesStateRunningInstances));
        if (usmServicesStateRunningInstances == plannedNumberOfInstances) {
          return true;
        }
      }
 else {
        logger.info(MessageFormat.format(messages.getString("deploying_service_updates"),plannedNumberOfInstances,currentNumberOfInstances));
        if (plannedNumberOfInstances == currentNumberOfInstances) {
          return true;
        }
      }
    }
    Thread.sleep(POLLING_INTERVAL);
  }
  throw new TimeoutException(timeoutErrorMessage);
}
