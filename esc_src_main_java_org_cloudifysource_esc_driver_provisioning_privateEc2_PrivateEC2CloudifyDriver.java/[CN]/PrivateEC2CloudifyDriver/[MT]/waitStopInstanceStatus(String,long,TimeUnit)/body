{
  long endTime=System.currentTimeMillis() + unit.toMillis(duration);
  while (System.currentTimeMillis() < endTime) {
    DescribeInstancesRequest describeRequest=new DescribeInstancesRequest();
    describeRequest.withInstanceIds(instanceId);
    DescribeInstancesResult describeInstances=ec2.describeInstances(describeRequest);
    for (    Reservation resa : describeInstances.getReservations()) {
      for (      Instance instance : resa.getInstances()) {
        InstanceStateType state=InstanceStateType.valueOf(instance.getState().getCode());
        if (logger.isLoggable(Level.FINEST)) {
          logger.finest("instance= " + instance.getInstanceId() + " state="+ state);
        }
switch (state) {
case PENDING:
case RUNNING:
case STOPPING:
case SHUTTING_DOWN:
          try {
            if (logger.isLoggable(Level.FINEST)) {
              logger.finest("sleeping...");
            }
            Thread.sleep(WAIT_STATUS_SLEEP_TIME);
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
        break;
case STOPPED:
case TERMINATED:
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest("instance (id=" + instanceId + ") was shutdown");
      }
    return;
default :
  throw new CloudProvisioningException("Failed to stop server - Cloud reported node in " + state.getName() + " state.");
}
}
}
}
throw new TimeoutException("Stopping instace timed out (id=" + instanceId + ")");
}
