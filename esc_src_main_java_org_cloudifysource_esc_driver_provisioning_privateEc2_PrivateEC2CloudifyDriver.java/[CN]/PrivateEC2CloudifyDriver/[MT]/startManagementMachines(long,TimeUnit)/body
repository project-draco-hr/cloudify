{
  if (duration < 0) {
    throw new TimeoutException("Starting a new machine timed out");
  }
  final long endTime=System.currentTimeMillis() + unit.toMillis(duration);
  logger.fine("DefaultCloudProvisioning: startMachine - management == " + management);
  try {
    final File cloudDirectory=new ProvisioningContextAccess().getManagementProvisioiningContext().getCloudFile().getParentFile();
    this.cloud.getCustom().put("###CLOUD_DIRECTORY###",cloudDirectory);
    this.privateEc2Template=this.getManagerPrivateEc2Template(cloudDirectory,this.managerCfnTemplateFileName);
  }
 catch (  PrivateEc2ParserException e) {
    throw new CloudProvisioningException("Failed to read management template: " + e.getMessage(),e);
  }
catch (  IOException e) {
    throw new CloudProvisioningException("Failed to read management template: " + e.getMessage(),e);
  }
  final String managementMachinePrefix=this.cloud.getProvider().getManagementGroup();
  if (org.apache.commons.lang.StringUtils.isBlank(managementMachinePrefix)) {
    throw new CloudProvisioningException("The management group name is missing - can't locate existing servers!");
  }
  final MachineDetails[] existingManagementServers=this.getManagementServersMachineDetails();
  if (existingManagementServers.length > 0) {
    final String serverDescriptions=this.createExistingServersDescription(managementMachinePrefix,existingManagementServers);
    throw new CloudProvisioningException("Found existing servers matching group " + managementMachinePrefix + ": "+ serverDescriptions);
  }
  final int numberOfManagementMachines=this.cloud.getProvider().getNumberOfManagementMachines();
  MachineDetails[] createdMachines;
  try {
    createdMachines=this.doStartManagementMachines(numberOfManagementMachines,endTime,unit);
  }
 catch (  final PrivateEc2ParserException e) {
    throw new CloudProvisioningException(e);
  }
  return createdMachines;
}
