{
  final ExecutorService executors=Executors.newFixedThreadPool(numberOfManagementMachines);
  @SuppressWarnings("unchecked") final Future<MachineDetails>[] futures=(Future<MachineDetails>[])new Future<?>[numberOfManagementMachines];
  try {
    final PrivateEc2Template template=this.privateEc2Template;
    final String managementGroup=this.cloud.getProvider().getManagementGroup();
    final ProvisioningContextImpl ctx=(ProvisioningContextImpl)new ProvisioningContextAccess().getManagementProvisioiningContext();
    logger.info("ctx_threadlocal=" + ctx);
    for (int i=0; i < numberOfManagementMachines; i++) {
      final int index=i + 1;
      futures[i]=executors.submit(new Callable<MachineDetails>(){
        @Override public MachineDetails call() throws Exception {
          return createServer(template,managementGroup + index,ctx,true,endTime,unit);
        }
      }
);
    }
    int numberOfErrors=0;
    Exception firstCreationException=null;
    final MachineDetails[] createdManagementMachines=new MachineDetails[numberOfManagementMachines];
    for (int i=0; i < createdManagementMachines.length; i++) {
      try {
        createdManagementMachines[i]=futures[i].get(endTime - System.currentTimeMillis(),TimeUnit.MILLISECONDS);
      }
 catch (      final InterruptedException e) {
        ++numberOfErrors;
        logger.log(Level.SEVERE,"Failed to start a management machine",e);
        if (firstCreationException == null) {
          firstCreationException=e;
        }
      }
catch (      final ExecutionException e) {
        ++numberOfErrors;
        logger.log(Level.SEVERE,"Failed to start a management machine",e);
        if (firstCreationException == null) {
          firstCreationException=e;
        }
      }
    }
    if (numberOfErrors > 0) {
      this.handleProvisioningFailure(numberOfManagementMachines,numberOfErrors,firstCreationException,createdManagementMachines);
    }
    return createdManagementMachines;
  }
  finally {
    if (executors != null) {
      executors.shutdownNow();
    }
  }
}
