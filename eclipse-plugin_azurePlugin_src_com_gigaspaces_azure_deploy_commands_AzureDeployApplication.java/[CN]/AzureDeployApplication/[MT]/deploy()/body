{
  if (!azureDeploymentSlotName.equals(AzureSlot.Production.getSlot()) && !azureDeploymentSlotName.equals(AzureSlot.Staging.getSlot())) {
    throw new AzureDeploymentException("azure-deployment-slot must be either " + AzureSlot.Production.getSlot() + " or "+ AzureSlot.Staging.getSlot());
  }
  Properties properties=AzureUtils.getAzureProperties();
  String storageAccount=AzureUtils.getProperty(properties,"storageAccount");
  String storageAccessKey=AzureUtils.getProperty(properties,"storageAccessKey");
  String storageBlobContainerName=AzureUtils.getProperty(properties,"storageBlobContainerName");
  String subscriptionId=AzureUtils.getProperty(properties,"subscriptionId");
  String certificateThumbprint=AzureUtils.getProperty(properties,"certificateThumbprint");
  File rdpCertFile=AzureUtils.getFileProperty(properties,"rdpCertFile");
  File rdpPfxFile=AzureUtils.getFileProperty(properties,"rdpPfxFile");
  AzureHostedService azureHostedService=new AzureHostedService(AzureUtils.getAzureConfigEXE(),AzureUtils.getEncUtilEXE(),subscriptionId,certificateThumbprint,verbose);
  List<String> azureHostedServices=Arrays.asList(azureHostedService.listHostedServices());
  if (azureHostedServices.contains(azureHostedServiceName)) {
    logger.log(Level.INFO,"Found azure hosted service " + azureHostedServiceName);
  }
 else {
    logger.log(Level.INFO,"Creating azure hosted service " + azureHostedServiceName);
    azureHostedService.createHostedService(azureHostedServiceName,azureHostedServiceName,azureHostedServiceLocation,azureHostedServiceDescription);
  }
  Collection<String> certificateThumbprints=Arrays.asList(azureHostedService.listCertificateThumbprints(azureHostedServiceName));
  String rdpCertificateThumbprint=azureHostedService.getCertificateThumbprint(rdpCertFile);
  if (certificateThumbprints.contains(rdpCertificateThumbprint)) {
    logger.log(Level.INFO,"Found RDP certificate " + rdpCertificateThumbprint);
  }
 else {
    logger.log(Level.INFO,"Uploading Remote Desktop certificate");
    azureHostedService.addCertificate(azureHostedServiceName,rdpPfxFile,azureRemoteDesktopPfxFilePassword);
  }
  logger.log(Level.INFO,"updating " + cscfgFile.getName() + " with certificate thumbprint "+ rdpCertificateThumbprint);
  AzureDeploymentConfigurationFile cscfg=new AzureDeploymentConfigurationFile(cscfgFile);
  cscfg.setRdpCertificateThumbprint(rdpCertificateThumbprint);
  cscfg.flush();
  logger.log(Level.INFO,"Creating azure deployment " + azureDeploymentName);
  AzureDeploymentWrapper azureDeploymentWrapper=new AzureDeploymentWrapper();
  azureDeploymentWrapper.setVerbose(verbose);
  azureDeploymentWrapper.setAzureHostedServiceName(azureHostedServiceName);
  azureDeploymentWrapper.setAzureDeploymentSlotName(azureDeploymentSlotName);
  azureDeploymentWrapper.setCertificateThumbprint(certificateThumbprint);
  azureDeploymentWrapper.setSubscriptionId(subscriptionId);
  azureDeploymentWrapper.setStorageAccount(storageAccount);
  azureDeploymentWrapper.setStorageAccessKey(storageAccessKey);
  azureDeploymentWrapper.setStorageBlobContainerName(storageBlobContainerName);
  azureDeploymentWrapper.createDeployment(azureDeploymentName,cscfgFile,cspkgFile);
}
