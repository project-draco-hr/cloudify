{
  String responseBody;
  try {
    final HttpResponse response=httpClient.execute(httpMethod);
    final int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != HTTP_STATUS_OK) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,httpMethod.getURI() + MSG_RESPONSE_CODE + statusCode);
      }
      responseBody=getResponseBody(response,httpMethod);
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,httpMethod.getURI() + " response body " + responseBody);
      }
      try {
        final Map<String,Object> errorMap=GSRestClient.jsonToMap(responseBody);
        throw new ErrorStatusException("Remote_rest_gateway_exception",errorMap.get(ERROR));
      }
 catch (      final IOException e) {
        if (statusCode == NOT_FOUND_404_ERROR_CODE) {
          throw new ErrorStatusException(e,"URL_not_found",httpMethod.getURI());
        }
        throw new ErrorStatusException(e,"CLI_unable_to_parse_to_JSON",responseBody);
      }
    }
    responseBody=getResponseBody(response,httpMethod);
    final Map<String,Object> responseMap=GSRestClient.jsonToMap(responseBody);
    final String status=(String)responseMap.get(STATUS_KEY);
    if (ERROR.equals(status)) {
      final String reason=(String)responseMap.get(ERROR);
      @SuppressWarnings("unchecked") final List<String> reasonsArgs=(List<String>)responseMap.get(ERROR_ARGS);
      final ErrorStatusException e=new ErrorStatusException(reason,reasonsArgs != null ? reasonsArgs.toArray() : null);
      logger.log(Level.FINE,reason,e);
      throw e;
    }
    return responseMap.get(RESPONSE_KEY);
  }
 catch (  final ClientProtocolException e) {
    logger.log(Level.FINE,httpMethod.getURI() + MSG_REST_API_ERR,e);
    throw new ErrorStatusException(e,REASON_CODE_COMM_ERR,httpMethod.getURI(),MSG_REST_API_ERR);
  }
catch (  final IOException e) {
    logger.log(Level.FINE,httpMethod.getURI() + MSG_REST_API_ERR,e);
    throw new ErrorStatusException(e,REASON_CODE_COMM_ERR,httpMethod.getURI(),MSG_REST_API_ERR);
  }
 finally {
    httpMethod.abort();
  }
}
