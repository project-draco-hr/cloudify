{
  InputStream instream=null;
  try {
    final HttpResponse response=httpClient.execute(httpMethod);
    if (response.getStatusLine().getStatusCode() != HTTP_STATUS_OK) {
      String message=httpMethod.getURI() + " response (code " + response.getStatusLine().getStatusCode()+ ") "+ response.getStatusLine().toString();
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,message);
      }
      throw new RestException(message);
    }
    final HttpEntity entity=response.getEntity();
    if (entity == null) {
      final ErrorStatusException e=new ErrorStatusException(REASON_CODE_COMM_ERR);
      logger.log(Level.FINE,httpMethod.getURI() + MSG_RESPONSE_ENTITY_NULL,e);
      throw e;
    }
    instream=entity.getContent();
    final String responseBody=StringUtils.getStringFromStream(instream);
    logger.finer(httpMethod.getURI() + MSG_HTTP_GET_RESPONSE + responseBody);
    final Map<String,Object> responseMap=GSRestClient.jsonToMap(responseBody);
    return responseMap;
  }
 catch (  final ClientProtocolException e) {
    logger.log(Level.FINE,httpMethod.getURI() + MSG_REST_API_ERR,e);
    throw new ErrorStatusException(REASON_CODE_COMM_ERR,e,e.getMessage());
  }
catch (  final IOException e) {
    logger.log(Level.FINE,httpMethod.getURI() + MSG_REST_API_ERR,e);
    throw new ErrorStatusException(REASON_CODE_COMM_ERR,e,e.getMessage());
  }
 finally {
    if (instream != null) {
      try {
        instream.close();
      }
 catch (      final IOException e) {
      }
    }
    httpMethod.abort();
  }
}
