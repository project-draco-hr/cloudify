{
  String responseBody;
  try {
    final HttpResponse response=httpClient.execute(httpMethod);
    final int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != CloudifyConstants.HTTP_STATUS_CODE_OK) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,httpMethod.getURI() + MSG_RESPONSE_CODE + statusCode);
      }
      responseBody=getResponseBody(response,httpMethod);
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,httpMethod.getURI() + " response body " + responseBody);
      }
      if (statusCode == CloudifyConstants.HTTP_STATUS_NOT_FOUND) {
        throw new ErrorStatusException("URL_not_found",httpMethod.getURI());
      }
 else       if (statusCode == CloudifyConstants.HTTP_STATUS_ACCESS_DENIED) {
        throw new ErrorStatusException(CloudifyErrorMessages.NO_PERMISSION_ACCESS_DENIED.getName(),httpMethod.getURI());
      }
 else       if (statusCode == CloudifyConstants.HTTP_STATUS_BAD_CREDENTIALS) {
        throw new ErrorStatusException(CloudifyErrorMessages.BAD_CREDENTIALS.getName(),httpMethod.getURI());
      }
      final Map<String,Object> errorMap=GSRestClient.jsonToMap(responseBody);
      final String status=(String)errorMap.get(STATUS_KEY);
      if (ERROR.equals(status)) {
        final String reason=(String)errorMap.get(ERROR);
        @SuppressWarnings("unchecked") final List<Object> reasonsArgs=(List<Object>)errorMap.get(ERROR_ARGS);
        final ErrorStatusException e=new ErrorStatusException(reason,reasonsArgs != null ? reasonsArgs.toArray() : null);
        if (errorMap.containsKey(VERBOSE)) {
          e.setVerboseData((String)errorMap.get(VERBOSE));
        }
        logger.log(Level.FINE,reason,e);
        throw e;
      }
    }
    responseBody=getResponseBody(response,httpMethod);
    final Map<String,Object> responseMap=GSRestClient.jsonToMap(responseBody);
    return responseJsonKey != null ? responseMap.get(RESPONSE_KEY) : responseMap;
  }
 catch (  final ClientProtocolException e) {
    logger.log(Level.FINE,httpMethod.getURI() + MSG_REST_API_ERR,e);
    throw new ErrorStatusException(e,REASON_CODE_COMM_ERR,httpMethod.getURI(),MSG_REST_API_ERR);
  }
catch (  final IOException e) {
    logger.log(Level.FINE,httpMethod.getURI() + MSG_REST_API_ERR,e);
    throw new ErrorStatusException(e,REASON_CODE_COMM_ERR,httpMethod.getURI(),MSG_REST_API_ERR);
  }
 finally {
    httpMethod.abort();
  }
}
