{
  List<Map<String,String>> servicesLifecycleEventDetailes;
  while (System.currentTimeMillis() < this.endTime) {
    servicesLifecycleEventDetailes=new ArrayList<Map<String,String>>();
    Iterator<Map.Entry<String,Integer>> entryIterator=serviceNames.entrySet().iterator();
    while (entryIterator.hasNext()) {
      Map.Entry<String,Integer> entry=entryIterator.next();
      String serviceName=entry.getKey();
      final String absolutePuName=ServiceUtils.getAbsolutePUName(this.applicationName,serviceName);
      final Zone zone=admin.getZones().getByName(absolutePuName);
      if (zone == null) {
        logger.finer("Zone " + absolutePuName + " does not exist");
        continue;
      }
      int plannedNumberOfInstances=getPlannedNumberOfInstances(serviceName);
      final String regex=MessageFormat.format(USM_EVENT_LOGGER_NAME,absolutePuName);
      final LogEntryMatcher matcher=regex(regex);
      int numberOfServiceInstances=0;
      for (      final GridServiceContainer container : zone.getGridServiceContainers()) {
        final LogEntries logEntries=container.logEntries(matcher);
        for (        final LogEntry logEntry : logEntries) {
          if (logEntry.isLog()) {
            final Date fiveMinutesAgoGscTime=new Date(new Date().getTime() + container.getOperatingSystem().getTimeDelta() - FIVE_MINUTES_MILLISECONDS);
            if (fiveMinutesAgoGscTime.before(new Date(logEntry.getTimestamp()))) {
              final Map<String,String> serviceEventsMap=getServiceDetailes(logEntry,container,absolutePuName);
              servicesLifecycleEventDetailes.add(serviceEventsMap);
            }
          }
        }
        this.lifecycleEventsContainer.addLifecycleEvents(servicesLifecycleEventDetailes);
        numberOfServiceInstances=getNumberOfServiceInstances(absolutePuName);
        if (numberOfServiceInstances == 0) {
          this.lifecycleEventsContainer.addInstanceCountEvent("Deploying " + serviceName + " with "+ plannedNumberOfInstances+ " planned instances.");
        }
 else {
          this.lifecycleEventsContainer.addInstanceCountEvent("[" + ServiceUtils.getApplicationServiceName(absolutePuName,this.applicationName) + "] "+ "Deployed "+ numberOfServiceInstances+ " of "+ plannedNumberOfInstances);
        }
      }
      if (plannedNumberOfInstances == numberOfServiceInstances) {
        if (!isServiceInstall) {
          this.lifecycleEventsContainer.addInstanceCountEvent("Service \"" + serviceName + "\" successfully installed ("+ numberOfServiceInstances+ " Instances)");
        }
        entryIterator.remove();
      }
      if (serviceNames.isEmpty()) {
        return;
      }
    }
    Thread.sleep(pollingInterval);
  }
  throw new TimeoutException();
}
