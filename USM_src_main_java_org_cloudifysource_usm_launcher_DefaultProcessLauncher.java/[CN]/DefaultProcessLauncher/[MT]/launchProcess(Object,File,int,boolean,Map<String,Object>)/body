{
  List<String> paramsList=getParamsListFromMap(params);
  if (arg instanceof Closure<?>) {
    final Closure<?> closure=(Closure<?>)arg;
    try {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Closure Parameters: " + paramsList.toString());
      }
      if (closure.getMaximumNumberOfParameters() != paramsList.size()) {
        USMException e=new USMException("Invalid number of parameters." + " Expecting " + closure.getMaximumNumberOfParameters() + " parameters, got "+ paramsList.size()+ ": "+ paramsList.toString());
        logger.log(Level.SEVERE,e.getMessage());
        throw e;
      }
      Object result=closure.call(paramsList.toArray());
      return result;
    }
 catch (    final Exception e) {
      logger.log(Level.SEVERE,"A closure entry failed to execute: " + e.getMessage(),e);
      throw new USMException("Failed to execute closure " + e.getMessage(),e);
    }
  }
  final Process proc=launchProcessAsync(arg,workingDir,retries,redirectErrorStream,paramsList);
  final BufferedReader reader=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  String line=null;
  StringBuilder sb=new StringBuilder();
  final String newline=System.getProperty("line.separator");
  logger.info("Command Output:");
  try {
    do {
      if (line != null) {
        sb.append(line).append(newline);
        logger.info(line);
      }
      line=reader.readLine();
    }
 while (line != null);
  }
 catch (  final IOException ioe) {
    throw new USMException("Failed to execute command: " + commandLine,ioe);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      final IOException e) {
      }
    }
  }
  try {
    final int exitValue=proc.waitFor();
    logger.info("Command exited with value: " + exitValue);
    if (exitValue != 0) {
      logger.severe("Event lifecycle external process exited with abnormal status code: " + exitValue);
      String result=sb.toString();
      String exceptionReason=GroovyExceptionHandler.getExceptionString(result);
      logger.log(Level.SEVERE,"Event lifecycle external process failed: " + result);
      throw new USMException("Event lifecycle external process exited with abnormal status code: " + exitValue + " "+ exceptionReason);
    }
  }
 catch (  final InterruptedException e) {
    logger.warning("Interrupted while waiting for process to exit");
  }
  try {
    Thread.sleep(POST_SYNC_PROCESS_SLEEP_INTERVAL);
  }
 catch (  final InterruptedException e) {
  }
  return sb.toString();
}
