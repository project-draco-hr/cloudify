{
  if (this.groovyCommandLinePrefixParams != null) {
    return;
  }
  final String home=Environment.getHomeDirectory();
  final File homeDir=new File(home);
  final String groovyPath=createGroovyPath(homeDir);
  final StringBuilder sb=new StringBuilder();
  final List<File> jars=getJarFilesForGroovyClasspath(homeDir,workingDir);
  if (jars != null) {
    for (    final File jar : jars) {
      sb.append(jar.getAbsolutePath()).append(File.pathSeparator);
    }
  }
  final ArrayList<String> groovyCommandParams=new ArrayList<String>();
  groovyCommandParams.add(groovyPath);
  final List<String> envVarsList=new ArrayList<String>();
  envVarsList.add("LOOKUP_LOCATORS_PROP");
  envVarsList.add("LOOKUP_GROUPS_PROP");
  envVarsList.add("RMI_OPTIONS");
  groovyCommandParams.addAll(convertEnvVarsToSysPropsList(envVarsList));
  boolean isLocalCloud=LOCALCLOUD.equalsIgnoreCase(System.getenv(CloudifyConstants.GIGASPACES_CLOUD_MACHINE_ID));
  if (isLocalCloud) {
    groovyCommandParams.add("-D" + CloudifyConstants.MULTICAST_ENABLED_PROPERTY + "=false");
  }
 else {
    String extJavaOptionsValue=System.getenv("EXT_JAVA_OPTIONS");
    if (!StringUtils.isBlank(extJavaOptionsValue)) {
      String[] options=extJavaOptionsValue.split(" ");
      for (      String option : options) {
        groovyCommandParams.add(option);
      }
    }
  }
  groovyCommandParams.add("-D" + CloudifyConstants.LRMI_BIND_PORT_CONTEXT_PROPERTY + "="+ CloudifyConstants.LRMI_BIND_PORT_RANGE);
  if (ServiceUtils.isWindows()) {
    modifyWindowsCommandLine(groovyCommandParams,workingDir);
  }
  String classPathEnv=System.getenv("CLASSPATH");
  if (classPathEnv == null) {
    classPathEnv="";
  }
  classPathEnv=classPathEnv + File.pathSeparator + sb.toString();
  logger.info("Setting ClassPath environment variable for child processes to: " + classPathEnv);
  this.groovyEnvironmentClassPath=classPathEnv;
  logger.info("Setting groovyCommandParams to: " + groovyCommandParams);
  this.groovyCommandLinePrefixParams=groovyCommandParams;
}
