{
  List<List<String>> commands=new ArrayList<List<String>>();
  String applicationAbsolutePath=applicationFile.getAbsolutePath().replaceAll(Pattern.quote("\\"),"/");
  List<String> boostrapApplicationCommand=Arrays.asList("azure:bootstrap-app","--verbose","-timeout",String.valueOf(TIMEOUT_IN_MINUTES),"-progress",String.valueOf(POLLING_INTERVAL_IN_MINUTES),"-azure-svc",AZURE_HOSTED_SERVICE,"-azure-pwd",RDP_PFX_FILE_PASSWORD,"-azure-location","'" + AZURE_REGION + "'",applicationAbsolutePath);
  commands.add(boostrapApplicationCommand);
  runCliCommands(cliExecutablePath,commands,isDebugMode);
  commands.clear();
  String deploymentUrl=deployment.getUrl();
  final URL restAdminMachinesUrl=getMachinesUrl(deploymentUrl);
  log("Getting number of running machines");
  repetativeAssert("Number of machines",new RepetativeConditionProvider(){
    @Override public boolean getCondition(){
      try {
        int numberOfMachines=getNumberOfMachines(restAdminMachinesUrl);
        logger.info("Actual numberOfMachines=" + numberOfMachines + ". Expected numberOfMachins="+ EXPECTED_NUMBER_OF_MACHINES);
        return EXPECTED_NUMBER_OF_MACHINES == numberOfMachines;
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,"Exception while calculating numberOfMachines",e);
        return false;
      }
    }
  }
);
  List<String> connectCommand=Arrays.asList("azure:connect-app","--verbose","-timeout 5","-azure-svc",AZURE_HOSTED_SERVICE);
  List<String> installApplicationCommand=Arrays.asList("install-application","--verbose",applicationAbsolutePath);
  commands.add(connectCommand);
  commands.add(installApplicationCommand);
  runCliCommands(cliExecutablePath,commands,isDebugMode);
  commands.clear();
  final URI travelApplicationUrl=getTravelApplicationUrl(deploymentUrl).toURI();
  RepetativeConditionProvider applicationInstalledCondition=new RepetativeConditionProvider(){
    @Override public boolean getCondition(){
      try {
        URL url=travelApplicationUrl.toURL();
        return isUrlAvailable(url);
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,"Exception while checking if " + travelApplicationUrl.toString() + " is available",e);
        return false;
      }
    }
  }
;
  repetativeAssert("Failed waiting for travel application: " + travelApplicationUrl.toString(),applicationInstalledCondition);
  List<String> setInstancesScaleOutCommand=Arrays.asList("azure:set-instances","--verbose","-azure-svc",AZURE_HOSTED_SERVICE,TOMCAT_SERVICE,NUMBER_OF_INSTANCES_FOR_TOMCAT_SERVICE);
  commands.add(connectCommand);
  commands.add(setInstancesScaleOutCommand);
  runCliCommands(cliExecutablePath,commands,isDebugMode);
  commands.clear();
  repetativeAssert("Failed waiting for scale out",new RepetativeConditionProvider(){
    @Override public boolean getCondition(){
      try {
        int numberOfMachines=getNumberOfMachines(restAdminMachinesUrl);
        logger.info("Actual numberOfMachines=" + numberOfMachines + ". Expected numberOfMachins="+ (EXPECTED_NUMBER_OF_MACHINES + 1));
        return numberOfMachines == EXPECTED_NUMBER_OF_MACHINES + 1;
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,"Exception while calculating numberOfMachines",e);
        return false;
      }
    }
  }
);
  List<String> uninstallApplicationCommand=Arrays.asList("uninstall-application","--verbose","-timeout",String.valueOf(TIMEOUT_IN_MINUTES),APPLICATION_NAME);
  commands.add(connectCommand);
  commands.add(uninstallApplicationCommand);
  runCliCommands(cliExecutablePath,commands,isDebugMode);
  commands.clear();
  Assert.assertFalse("Petclinic application should not be running",isUrlAvailable(travelApplicationUrl.toURL()));
  List<String> setInstancesScaleInCommand=Arrays.asList("azure:set-instances","--verbose","-azure-svc",AZURE_HOSTED_SERVICE,TOMCAT_SERVICE,INITIAL_NUMBER_OF_INSTANCES_FOR_TOMCAT_SERVICE);
  commands.add(connectCommand);
  commands.add(setInstancesScaleInCommand);
  runCliCommands(cliExecutablePath,commands,isDebugMode);
  commands.clear();
  repetativeAssert("Failed waiting for scale in",new RepetativeConditionProvider(){
    @Override public boolean getCondition(){
      try {
        int numberOfMachines=getNumberOfMachines(restAdminMachinesUrl);
        logger.info("Actual numberOfMachines=" + numberOfMachines + ". Expected numberOfMachins="+ EXPECTED_NUMBER_OF_MACHINES);
        return EXPECTED_NUMBER_OF_MACHINES == numberOfMachines;
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,"Exception while calculating numberOfMachines",e);
        return false;
      }
    }
  }
);
  commands.add(connectCommand);
  commands.add(installApplicationCommand);
  runCliCommands(cliExecutablePath,commands,isDebugMode);
  commands.clear();
  repetativeAssert("Failed waiting for petclinic application",applicationInstalledCondition);
}
