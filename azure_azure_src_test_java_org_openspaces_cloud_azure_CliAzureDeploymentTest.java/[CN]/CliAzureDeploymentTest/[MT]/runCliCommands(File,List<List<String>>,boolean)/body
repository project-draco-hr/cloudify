{
  if (!cliExecutablePath.isFile()) {
    throw new IllegalArgumentException(cliExecutablePath + " is not a file");
  }
  File workingDirectory=cliExecutablePath.getAbsoluteFile().getParentFile();
  if (!workingDirectory.isDirectory()) {
    throw new IllegalArgumentException(workingDirectory + " is not a directory");
  }
  int argsCount=0;
  for (  List<String> command : commands) {
    argsCount+=command.size();
  }
  String[] cmd=new String[argsCount + 4];
  int i=0;
  cmd[i]="cmd";
  i++;
  cmd[i]="/c";
  i++;
  cmd[i]="call";
  i++;
  cmd[i]=cliExecutablePath.getAbsolutePath();
  i++;
  for (  List<String> command : commands) {
    if (command.size() > 0) {
      for (      String arg : command) {
        cmd[i]=arg;
        i+=1;
      }
      cmd[i - 1]+=";";
    }
  }
  final ProcessBuilder pb=new ProcessBuilder(cmd);
  pb.directory(workingDirectory);
  pb.redirectErrorStream(true);
  String extCloudifyJavaOptions="";
  if (isDebug) {
    extCloudifyJavaOptions+="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9000 -Xnoagent -Djava.compiler=NONE";
  }
  pb.environment().put("EXT_CLOUDIFY_JAVA_OPTIONS",extCloudifyJavaOptions);
  final StringBuilder sb=new StringBuilder();
  logger.info("running: " + cliExecutablePath + " "+ Arrays.toString(cmd));
  Process p=pb.start();
  BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));
  String line=reader.readLine();
  while (line != null) {
    sb.append(line).append("\n");
    line=reader.readLine();
    logger.info(line);
  }
  final String readResult=sb.toString();
  final int exitValue=p.waitFor();
  logger.info("Exit value = " + exitValue);
  if (exitValue != 0) {
    Assert.fail("Cli ended with error code: " + exitValue);
  }
  return readResult;
}
