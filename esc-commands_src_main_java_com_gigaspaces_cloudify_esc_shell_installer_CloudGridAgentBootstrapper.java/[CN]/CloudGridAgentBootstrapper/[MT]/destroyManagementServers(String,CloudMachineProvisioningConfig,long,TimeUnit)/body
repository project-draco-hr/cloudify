{
  JCloudsDeployer deployer=null;
  try {
    long end=System.currentTimeMillis() + timeoutUnit.toMillis(timeout);
    deployer=getJCloudsDeployer(config);
    NodeMetadata server=null;
    logger.info("Checking if a management server named " + machineTag + " is actually running");
    Set<? extends NodeMetadata> servers=deployer.getServers(machineTag);
    Set<? extends NodeMetadata> activeServers=Sets.filter(servers,new Predicate<NodeMetadata>(){
      public boolean apply(      NodeMetadata input){
        return input.getState() != NodeState.TERMINATED;
      }
    }
);
    if (activeServers.isEmpty()) {
      logger.info("Could not found a server named " + machineTag);
      return;
    }
    server=activeServers.iterator().next();
    String ipAddress=config.isConnectedToPrivateIp() ? server.getPrivateAddresses().iterator().next() : server.getPublicAddresses().iterator().next();
    URL restAdminUrl=new URI("http",null,ipAddress,REST_GATEWAY_PORT,null,null,null).toURL();
    adminFacade.disconnect();
    try {
      adminFacade.connect(null,null,restAdminUrl.toString());
    }
 catch (    CLIException e) {
      throw e;
    }
    if (!force) {
      for (      String application : adminFacade.getApplicationsList()) {
        if (!application.equals(MANAGEMENT_APPLICATION)) {
          adminFacade.uninstallApplication(application);
        }
      }
      waitForUninstallApplications(Utils.millisUntil(end),TimeUnit.MILLISECONDS);
    }
    logger.info("Terminating cloud machines");
    List<String> machines=adminFacade.getMachines();
    deployer.shutdownMachinesWithIPs(Sets.newHashSet(machines));
  }
 catch (  IOException e) {
    throw new CLIException(e);
  }
catch (  URISyntaxException e) {
    throw new CLIException(e);
  }
 finally {
    if (deployer != null) {
      deployer.destroy();
    }
  }
}
