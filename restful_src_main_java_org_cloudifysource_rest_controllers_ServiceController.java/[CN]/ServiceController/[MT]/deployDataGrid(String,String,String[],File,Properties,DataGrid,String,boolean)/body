{
  final int containerMemoryInMB=dataGridConfig.getSla().getMemoryCapacityPerContainer();
  final int maxMemoryInMB=dataGridConfig.getSla().getMaxMemoryCapacity();
  final int reservedMemoryCapacityPerMachineInMB=256;
  logger.finer("received request to install datagrid");
  final ElasticSpaceDeployment deployment=new ElasticSpaceDeployment(serviceName).memoryCapacityPerContainer(containerMemoryInMB,MemoryUnit.MEGABYTES).maxMemoryCapacity(maxMemoryInMB,MemoryUnit.MEGABYTES).addContextProperty(CloudifyConstants.CONTEXT_PROPERTY_APPLICATION_NAME,applicationName).highlyAvailable(dataGridConfig.getSla().getHighlyAvailable()).singleMachineDeployment();
  setContextProperties(deployment,contextProperties);
  if (cloud == null) {
    if (isLocalCloud()) {
      setPublicMachineProvisioning(deployment,agentZones,reservedMemoryCapacityPerMachineInMB);
      deployment.scale(new ManualCapacityScaleConfigurer().memoryCapacity(dataGridConfig.getSla().getMemoryCapacity(),MemoryUnit.MEGABYTES).create());
    }
 else {
      setSharedMachineProvisioning(deployment,agentZones,reservedMemoryCapacityPerMachineInMB);
      deployment.scale(ElasticScaleConfigFactory.createEagerScaleConfig());
    }
  }
 else {
    final CloudTemplate template=getComputeTemplate(cloud,templateName);
    validateAndPrepareStatefulSla(serviceName,dataGridConfig.getSla(),cloud,template);
    final long cloudExternalProcessMemoryInMB=calculateExternalProcessMemory(cloud,template);
    final CloudifyMachineProvisioningConfig config=new CloudifyMachineProvisioningConfig(cloud,template,templateName,this.managementTemplate.getRemoteDirectory());
    final String locators=extractLocators(admin);
    config.setLocator(locators);
    setDedicatedMachineProvisioning(deployment,config);
    deployment.memoryCapacityPerContainer((int)cloudExternalProcessMemoryInMB,MemoryUnit.MEGABYTES);
    deployment.scale(ElasticScaleConfigFactory.createManualCapacityScaleConfig((int)cloudExternalProcessMemoryInMB,locationAware));
  }
  deployAndWait(serviceName,deployment);
}
