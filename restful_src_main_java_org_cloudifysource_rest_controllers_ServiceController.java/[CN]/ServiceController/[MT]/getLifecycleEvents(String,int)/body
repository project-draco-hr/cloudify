{
  final Map<String,Object> resultsMap=new HashMap<String,Object>();
  if (!this.lifecyclePollingThreadContainer.containsKey(UUID.fromString(lifecycleEventContainerID))) {
    throw new RestErrorException("Lifecycle events container with UUID: " + lifecycleEventContainerID + " does not exist or expired.");
  }
  final RestPollingRunnable restPollingRunnable=this.lifecyclePollingThreadContainer.get(UUID.fromString(lifecycleEventContainerID));
  final LifecycleEventsContainer container=restPollingRunnable.getLifecycleEventsContainer();
  final boolean done=restPollingRunnable.isDone();
  if (!done) {
    extendThreadTimeout(restPollingRunnable,DEFAULT_TIME_EXTENTION_POLLING_TASK);
  }
 else {
    final Throwable t=restPollingRunnable.getExecutionException();
    if (t != null) {
      logger.log(Level.INFO,"Lifecycle events polling ended unexpectedly.",t);
      throw new RestErrorException(t.getMessage());
    }
 else {
      logger.log(Level.FINE,"Lifecycle events polling ended successfully.");
    }
  }
  resultsMap.put(CloudifyConstants.IS_TASK_DONE,done);
  final List<String> lifecycleEvents=container.getLifecycleEvents(cursor);
  if (lifecycleEvents != null) {
    final int newCursorPos=cursor + lifecycleEvents.size();
    resultsMap.put(CloudifyConstants.CURSOR_POS,newCursorPos);
    resultsMap.put(CloudifyConstants.LIFECYCLE_LOGS,lifecycleEvents);
  }
 else {
    resultsMap.put(CloudifyConstants.CURSOR_POS,cursor);
  }
  final long timeBeforeTaskTerminationMillis=restPollingRunnable.getEndTime() - System.currentTimeMillis();
  resultsMap.put(CloudifyConstants.SERVER_POLLING_TASK_EXPIRATION_MILLI,Long.toString(timeBeforeTaskTerminationMillis));
  return successStatus(resultsMap);
}
