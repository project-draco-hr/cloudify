{
  final File jarFile=getJarFileFromDir(new File(puConfig.getBinaries()),extractedServiceFolder,serviceName);
  final int containerMemoryInMB=puConfig.getSla().getMemoryCapacityPerContainer();
  final int reservedMemoryCapacityPerMachineInMB=256;
  final ElasticStatelessProcessingUnitDeployment deployment=new ElasticStatelessProcessingUnitDeployment(jarFile).memoryCapacityPerContainer(containerMemoryInMB,MemoryUnit.MEGABYTES).addContextProperty(CloudifyConstants.CONTEXT_PROPERTY_APPLICATION_NAME,applicationName).name(serviceName);
  setContextProperties(deployment,contextProperties);
  if (cloud == null) {
    setSharedMachineProvisioning(deployment,zone,reservedMemoryCapacityPerMachineInMB);
    verifyEsmExistsInCluster();
    if (useLocalCloud) {
      deployment.scale(new ManualCapacityScaleConfigurer().memoryCapacity(containerMemoryInMB * numberOfInstances,MemoryUnit.MEGABYTES).create());
    }
 else {
      deployment.scale(ElasticScaleConfigFactory.createEagerScaleConfig());
    }
  }
 else {
    final CloudTemplate template=getComputeTemplate(cloud,templateName);
    validateAndPrepareStatelessSla(puConfig.getSla(),cloud,template);
    final long cloudExternalProcessMemoryInMB=calculateExternalProcessMemory(cloud,template);
    final CloudifyMachineProvisioningConfig config=new CloudifyMachineProvisioningConfig(cloud,template,cloudFileContents,templateName);
    final String locators=extractLocators(admin);
    config.setLocator(locators);
    setDedicatedMachineProvisioning(deployment,config);
    deployment.memoryCapacityPerContainer((int)cloudExternalProcessMemoryInMB,MemoryUnit.MEGABYTES);
    deployment.scale(new ManualCapacityScaleConfigurer().memoryCapacity(containerMemoryInMB * numberOfInstances,MemoryUnit.MEGABYTES).atMostOneContainerPerMachine().create());
  }
  deployAndWait(serviceName,deployment);
  jarFile.delete();
}
