{
  final String absolutePuName=ServiceUtils.getAbsolutePUName(applicationName,serviceName);
  final ProcessingUnit processingUnit=admin.getProcessingUnits().waitFor(absolutePuName,PU_DISCOVERY_TIMEOUT_SEC,TimeUnit.SECONDS);
  if (processingUnit == null) {
    return unavailableServiceError(absolutePuName);
  }
  if (permissionEvaluator != null) {
    String puAuthGroups=processingUnit.getBeanLevelProperties().getContextProperties().getProperty(CloudifyConstants.CONTEXT_PROPERTY_AUTH_GROUPS);
    Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
    CloudifyAuthorizationDetails authDetails=new CloudifyAuthorizationDetails(authentication);
    permissionEvaluator.verifyPermission(authDetails,puAuthGroups,"deploy");
  }
  final FutureTask<Boolean> undeployTask=new FutureTask<Boolean>(new Callable<Boolean>(){
    public Boolean call() throws Exception {
      return processingUnit.undeployAndWait(timeoutInMinutes,TimeUnit.MINUTES);
    }
  }
);
  serviceUndeployExecutor.execute(undeployTask);
  final UUID lifecycleEventContainerID=startPollingForServiceUninstallLifecycleEvents(applicationName,serviceName,timeoutInMinutes,undeployTask);
  final Map<String,Object> returnMap=new HashMap<String,Object>();
  returnMap.put(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID,lifecycleEventContainerID);
  return successStatus(returnMap);
}
