{
  this.lifecycleEventsCleaner.scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      if (lifecyclePollingThreadContainer != null) {
        final Iterator<Entry<UUID,RestPollingRunnable>> it=lifecyclePollingThreadContainer.entrySet().iterator();
        while (it.hasNext()) {
          final Map.Entry<UUID,RestPollingRunnable> entry=it.next();
          final RestPollingRunnable restPollingRunnable=entry.getValue();
          if (restPollingRunnable.isDone()) {
            logger.log(Level.INFO,"Polling Task with UUID " + entry.getKey().toString() + " has expired");
            it.remove();
          }
        }
      }
    }
  }
,0,LIFECYCLE_EVENT_CLEANUP_INTERVAL_SEC,TimeUnit.MINUTES);
}
