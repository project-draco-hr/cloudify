{
  boolean locationAware=false;
  if (service != null) {
    locationAware=service.isLocationAware();
  }
  final int externalProcessMemoryInMB=512;
  final int containerMemoryInMB=128;
  final int reservedMemoryCapacityPerMachineInMB=256;
  contextProperties.put(CloudifyConstants.CONTEXT_PROPERTY_ASYNC_INSTALL,"true");
  final ElasticStatelessProcessingUnitDeployment deployment=new ElasticStatelessProcessingUnitDeployment(serviceFile).memoryCapacityPerContainer(externalProcessMemoryInMB,MemoryUnit.MEGABYTES).addCommandLineArgument("-Xmx" + containerMemoryInMB + "m").addCommandLineArgument("-Xms" + containerMemoryInMB + "m").addContextProperty(CloudifyConstants.CONTEXT_PROPERTY_APPLICATION_NAME,applicationName).name(serviceName).sharedMachineProvisioning(SHARED_ISOLATION_ID,new DiscoveredMachineProvisioningConfigurer().addGridServiceAgentZone(zone).reservedMemoryCapacityPerMachine(reservedMemoryCapacityPerMachineInMB,MemoryUnit.MEGABYTES).create());
  if (cloud == null) {
    if (!isLocalCloud()) {
      deployment.scale(ElasticScaleConfigFactory.createEagerScaleConfig());
    }
 else {
      if (service == null || service.getScalingRules() == null) {
        int totalMemoryInMB=calculateTotalMemoryInMB(serviceName,service,externalProcessMemoryInMB);
        final ManualCapacityScaleConfig scaleConfig=new ManualCapacityScaleConfigurer().memoryCapacity(totalMemoryInMB,MemoryUnit.MEGABYTES).create();
        deployment.scale(scaleConfig);
      }
 else {
        final AutomaticCapacityScaleConfig scaleConfig=ElasticScaleConfigFactory.createAutomaticCapacityScaleConfig(serviceName,service,externalProcessMemoryInMB);
        deployment.scale(scaleConfig);
      }
    }
  }
 else {
    final CloudTemplate template=getComputeTemplate(cloud,templateName);
    final long cloudExternalProcessMemoryInMB=calculateExternalProcessMemory(cloud,template);
    final CloudifyMachineProvisioningConfig config=new CloudifyMachineProvisioningConfig(cloud,template,cloudFileContents,templateName);
    final String[] zones=new String[]{serviceName};
    config.setGridServiceAgentZones(zones);
    if (serviceCloudConfigurationContents != null) {
      config.setServiceCloudConfiguration(serviceCloudConfigurationContents);
    }
    final String locators=extractLocators(admin);
    config.setLocator(locators);
    setDedicatedMachineProvisioning(deployment,config);
    deployment.memoryCapacityPerContainer((int)cloudExternalProcessMemoryInMB,MemoryUnit.MEGABYTES);
    if (service == null || service.getScalingRules() == null) {
      int totalMemoryInMB=calculateTotalMemoryInMB(serviceName,service,(int)cloudExternalProcessMemoryInMB);
      final ManualCapacityScaleConfig scaleConfig=ElasticScaleConfigFactory.createManualCapacityScaleConfig(totalMemoryInMB,locationAware);
      scaleConfig.setAtMostOneContainerPerMachine(true);
      deployment.scale(scaleConfig);
    }
 else {
      final AutomaticCapacityScaleConfig scaleConfig=ElasticScaleConfigFactory.createAutomaticCapacityScaleConfig(serviceName,service,(int)cloudExternalProcessMemoryInMB);
      scaleConfig.setAtMostOneContainerPerMachine(true);
      deployment.scale(scaleConfig);
    }
  }
  setContextProperties(deployment,contextProperties);
  verifyEsmExistsInCluster();
  deployAndWait(serviceName,deployment);
}
