{
  if (cloudOverrides != null) {
    if (cloudOverrides.length() >= TEN_K) {
      throw new RestErrorException(CloudifyErrorMessages.CLOUD_OVERRIDES_TO_LONG.getName());
    }
  }
  String templateName;
  if (originalTemplateName == null) {
    templateName=this.defaultTemplateName;
  }
 else {
    templateName=originalTemplateName;
  }
  if (templateName != null) {
    propsFile.setProperty(CloudifyConstants.CONTEXT_PROPERTY_TEMPLATE,templateName);
  }
  Service service=null;
  File projectDir=null;
  if (srcFile.getName().endsWith(".zip")) {
    projectDir=ServiceReader.extractProjectFile(srcFile);
    final File workingProjectDir=new File(projectDir,"ext");
    final String serviceFileName=propsFile.getProperty(CloudifyConstants.CONTEXT_PROPERTY_SERVICE_FILE_NAME);
    DSLServiceCompilationResult result;
    if (serviceFileName != null) {
      result=ServiceReader.getServiceFromFile(new File(workingProjectDir,serviceFileName),workingProjectDir);
    }
 else {
      result=ServiceReader.getServiceFromDirectory(workingProjectDir);
    }
    service=result.getService();
  }
  validateTemplate(templateName);
  String[] agentZones;
  if (isLocalCloud()) {
    agentZones=new String[]{zone,LOCALCLOUD_ZONE};
  }
 else {
    agentZones=new String[]{zone};
  }
  if (service == null) {
    doDeploy(applicationName,serviceName,authGroups,templateName,agentZones,srcFile,propsFile,selfHealing,cloudOverrides);
  }
 else   if (service.getLifecycle() != null) {
    doDeploy(applicationName,serviceName,authGroups,templateName,agentZones,srcFile,propsFile,service,serviceCloudConfigurationContents,selfHealing,cloudOverrides);
  }
 else   if (service.getDataGrid() != null) {
    deployDataGrid(applicationName,serviceName,authGroups,agentZones,srcFile,propsFile,service.getDataGrid(),templateName,service.isLocationAware(),cloudOverrides);
  }
 else   if (service.getStatelessProcessingUnit() != null) {
    deployStatelessProcessingUnitAndWait(applicationName,serviceName,authGroups,agentZones,new File(projectDir,"ext"),propsFile,service.getStatelessProcessingUnit(),templateName,service.getNumInstances(),service.isLocationAware(),cloudOverrides);
  }
 else   if (service.getMirrorProcessingUnit() != null) {
    deployStatelessProcessingUnitAndWait(applicationName,serviceName,authGroups,agentZones,new File(projectDir,"ext"),propsFile,service.getMirrorProcessingUnit(),templateName,service.getNumInstances(),service.isLocationAware(),cloudOverrides);
  }
 else   if (service.getStatefulProcessingUnit() != null) {
    deployStatefulProcessingUnit(applicationName,serviceName,authGroups,agentZones,new File(projectDir,"ext"),propsFile,service.getStatefulProcessingUnit(),templateName,service.isLocationAware(),cloudOverrides);
  }
 else {
    throw new IllegalStateException("Unsupported service type");
  }
  if (projectDir != null) {
    try {
      FileUtils.deleteDirectory(projectDir);
    }
 catch (    final IOException e) {
      logger.log(Level.WARNING,"Failed to delete project files: " + e.getMessage(),e);
    }
  }
  srcFile.delete();
  String lifecycleEventContainerID="";
  if (!isApplicationInstall) {
    logger.log(Level.INFO,"Starting to poll for installation lifecycle events.");
    if (service == null) {
      lifecycleEventContainerID=startPollingForLifecycleEvents(ServiceUtils.getApplicationServiceName(serviceName,applicationName),applicationName,1,true,timeout,timeUnit).toString();
    }
 else {
      lifecycleEventContainerID=startPollingForLifecycleEvents(service.getName(),applicationName,service.getNumInstances(),true,timeout,timeUnit).toString();
    }
  }
  return lifecycleEventContainerID;
}
