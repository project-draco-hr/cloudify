{
  LifecycleEventsContainer lifecycleEventsContainer=new LifecycleEventsContainer();
  UUID lifecycleEventsContainerUUID=UUID.randomUUID();
  lifecycleEventsContainer.setUUID(lifecycleEventsContainerUUID);
  this.lifecyclePollingContainer.put(lifecycleEventsContainerUUID,lifecycleEventsContainer);
  lifecycleEventsContainer.setEventsSet(this.eventsSet);
  RestPollingRunnable restPollingRunnable=new RestPollingRunnable(application.getName(),timeout,timeUnit);
  for (  Service service : application.getServices()) {
    restPollingRunnable.addService(service.getName(),service.getNumInstances());
  }
  restPollingRunnable.setIsServiceInstall(false);
  restPollingRunnable.setLifecycleEventsContainer(lifecycleEventsContainer);
  restPollingRunnable.setAdmin(admin);
  restPollingRunnable.setEndTime(timeout,TimeUnit.MINUTES);
  ScheduledFuture<?> scheduleWithFixedDelay=scheduledExecutor.scheduleWithFixedDelay(restPollingRunnable,0,LIFECYCLE_EVENT_POLLING_INTERVAL,TimeUnit.SECONDS);
  lifecycleEventsContainer.setFutureTask(scheduleWithFixedDelay);
  logger.log(Level.INFO,"polling container UUID is " + lifecycleEventsContainerUUID.toString());
  return lifecycleEventsContainerUUID;
}
