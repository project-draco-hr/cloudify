{
  RestPollingRunnable restPollingRunnable;
  final LifecycleEventsContainer lifecycleEventsContainer=new LifecycleEventsContainer();
  final UUID lifecycleEventsContainerID=UUID.randomUUID();
  lifecycleEventsContainer.setEventsSet(this.eventsSet);
  restPollingRunnable=new RestPollingRunnable(applicationName,timeoutInMinutes,TimeUnit.MINUTES);
  for (  final ProcessingUnit processingUnit : uninstallOrder) {
    final String processingUnitName=processingUnit.getName();
    final String serviceName=ServiceUtils.getApplicationServiceName(processingUnitName,applicationName);
    restPollingRunnable.addService(serviceName,0);
  }
  restPollingRunnable.setIsServiceInstall(false);
  restPollingRunnable.setAdmin(admin);
  restPollingRunnable.setLifecycleEventsContainer(lifecycleEventsContainer);
  restPollingRunnable.setIsUninstall(true);
  restPollingRunnable.setEndTime(timeoutInMinutes,TimeUnit.MINUTES);
  this.lifecyclePollingThreadContainer.put(lifecycleEventsContainerID,restPollingRunnable);
  final ScheduledFuture<?> scheduleWithFixedDelay=scheduledExecutor.scheduleWithFixedDelay(restPollingRunnable,0,LIFECYCLE_EVENT_POLLING_INTERVAL_SEC,TimeUnit.SECONDS);
  restPollingRunnable.setFutureTask(scheduleWithFixedDelay);
  logger.log(Level.INFO,"polling container UUID is " + lifecycleEventsContainerID.toString());
  return lifecycleEventsContainerID;
}
