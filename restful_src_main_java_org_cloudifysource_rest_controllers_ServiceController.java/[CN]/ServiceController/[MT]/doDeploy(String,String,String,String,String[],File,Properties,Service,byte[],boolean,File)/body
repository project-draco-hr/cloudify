{
  boolean locationAware=false;
  boolean dedicated=true;
  if (service != null) {
    locationAware=service.isLocationAware();
    dedicated=IsolationUtils.isDedicated(service);
  }
  final int externalProcessMemoryInMB=512;
  final int containerMemoryInMB=128;
  final int reservedMemoryCapacityPerMachineInMB=256;
  contextProperties.setProperty(CloudifyConstants.CONTEXT_PROPERTY_ASYNC_INSTALL,"true");
  if (!selfHealing) {
    contextProperties.setProperty(CloudifyConstants.CONTEXT_PROPERTY_DISABLE_SELF_HEALING,"false");
  }
  final ElasticStatelessProcessingUnitDeployment deployment=new ElasticStatelessProcessingUnitDeployment(serviceFile).memoryCapacityPerContainer(externalProcessMemoryInMB,MemoryUnit.MEGABYTES).addCommandLineArgument("-Xmx" + containerMemoryInMB + "m").addCommandLineArgument("-Xms" + containerMemoryInMB + "m").addContextProperty(CloudifyConstants.CONTEXT_PROPERTY_APPLICATION_NAME,applicationName).addContextProperty(CloudifyConstants.CONTEXT_PROPERTY_AUTH_GROUPS,authGroups).name(serviceName);
  if (cloud == null) {
    if (!isLocalCloud()) {
      setSharedMachineProvisioning(deployment,agentZones,reservedMemoryCapacityPerMachineInMB);
      deployment.scale(ElasticScaleConfigFactory.createEagerScaleConfig());
    }
 else {
      setPublicMachineProvisioning(deployment,agentZones,reservedMemoryCapacityPerMachineInMB);
      if (service == null || service.getScalingRules() == null) {
        final int totalMemoryInMB=calculateTotalMemoryInMB(serviceName,service,externalProcessMemoryInMB);
        final ManualCapacityScaleConfig scaleConfig=new ManualCapacityScaleConfigurer().memoryCapacity(totalMemoryInMB,MemoryUnit.MEGABYTES).create();
        deployment.scale(scaleConfig);
      }
 else {
        final AutomaticCapacityScaleConfig scaleConfig=ElasticScaleConfigFactory.createAutomaticCapacityScaleConfig(serviceName,service,externalProcessMemoryInMB,false,false);
        deployment.scale(scaleConfig);
      }
    }
  }
 else {
    final CloudTemplate template=getComputeTemplate(cloud,templateName);
    long cloudExternalProcessMemoryInMB=0;
    if (dedicated) {
      cloudExternalProcessMemoryInMB=calculateExternalProcessMemory(cloud,template);
    }
 else {
      cloudExternalProcessMemoryInMB=IsolationUtils.getInstanceMemoryMB(service);
    }
    logger.info("Creating cloud machine provisioning config. Template remote directory is: " + template.getRemoteDirectory());
    final CloudifyMachineProvisioningConfig config=new CloudifyMachineProvisioningConfig(cloud,template,templateName,this.managementTemplate.getRemoteDirectory());
    if (cloudOverrides != null) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Recieved request for installation of " + serviceName + " with cloud overrides parameters [ "+ FileUtils.readFileToString(cloudOverrides)+ "]");
      }
      config.setCloudOverridesPerService(cloudOverrides);
    }
 else {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("No cloud overrides parameters were requested for the installation of " + serviceName);
      }
    }
    if (serviceCloudConfigurationContents != null) {
      config.setServiceCloudConfiguration(serviceCloudConfigurationContents);
    }
    final String locators=extractLocators(admin);
    config.setLocator(locators);
    config.setDedicatedManagementMachines(true);
    if (!dedicated) {
      if (IsolationUtils.isGlobal(service)) {
        logger.info("public mode is on. will use public machine provisioning for " + serviceName + " deployment.");
        setPublicMachineProvisioning(deployment,config);
      }
 else       if (IsolationUtils.isAppShared(service)) {
        logger.info("app shared mode is on. will use shared machine provisioning for " + serviceName + " deployment. isolation id = "+ applicationName);
        setSharedMachineProvisioning(deployment,config,applicationName);
      }
 else       if (IsolationUtils.isTenantShared(service)) {
        if (authGroups == null) {
          throw new IllegalStateException("authGroups cannot be null when using tenant shared isolation");
        }
        logger.info("tenant shared mode is on. will use shared machine provisioning for " + serviceName + " deployment. isolation id = "+ authGroups);
        setSharedMachineProvisioning(deployment,config,authGroups);
      }
    }
 else {
      setDedicatedMachineProvisioning(deployment,config);
    }
    deployment.memoryCapacityPerContainer((int)cloudExternalProcessMemoryInMB,MemoryUnit.MEGABYTES);
    if (service == null || service.getScalingRules() == null) {
      final int totalMemoryInMB=calculateTotalMemoryInMB(serviceName,service,(int)cloudExternalProcessMemoryInMB);
      final double totalCpuCores=calculateTotalCpuCores(service);
      final ManualCapacityScaleConfig scaleConfig=ElasticScaleConfigFactory.createManualCapacityScaleConfig(totalMemoryInMB,totalCpuCores,locationAware,dedicated);
      deployment.scale(scaleConfig);
    }
 else {
      final AutomaticCapacityScaleConfig scaleConfig=ElasticScaleConfigFactory.createAutomaticCapacityScaleConfig(serviceName,service,(int)cloudExternalProcessMemoryInMB,locationAware,dedicated);
      deployment.scale(scaleConfig);
    }
  }
  setContextProperties(deployment,contextProperties);
  verifyEsmExistsInCluster();
  deployAndWait(serviceName,deployment);
}
