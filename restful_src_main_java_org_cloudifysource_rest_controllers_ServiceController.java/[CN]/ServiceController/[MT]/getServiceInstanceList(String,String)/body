{
  final String absolutePuName=ServiceUtils.getAbsolutePUName(applicationName,serviceName);
  if (logger.isLoggable(Level.FINER)) {
    logger.finer("received request to list instances for service " + absolutePuName + " of application "+ applicationName);
  }
  final ProcessingUnit pu=admin.getProcessingUnits().waitFor(absolutePuName,PU_DISCOVERY_TIMEOUT_SEC,TimeUnit.SECONDS);
  if (pu == null) {
    logger.severe("Could not find service " + absolutePuName);
    return unavailableServiceError(absolutePuName);
  }
  if (permissionEvaluator != null) {
    final String puAuthGroups=pu.getBeanLevelProperties().getContextProperties().getProperty(CloudifyConstants.CONTEXT_PROPERTY_AUTH_GROUPS);
    final Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
    final CloudifyAuthorizationDetails authDetails=new CloudifyAuthorizationDetails(authentication);
    permissionEvaluator.verifyPermission(authDetails,puAuthGroups,"view");
  }
  final Map<Integer,String> instanceMap=new HashMap<Integer,String>();
  final ProcessingUnitInstance[] instances=pu.getInstances();
  for (  final ProcessingUnitInstance instance : instances) {
    final String publicIp=instance.getVirtualMachine().getDetails().getEnvironmentVariables().get(CloudifyConstants.GIGASPACES_AGENT_ENV_PUBLIC_IP);
    final String host=instance.getVirtualMachine().getMachine().getHostName();
    String description=host;
    if (publicIp != null) {
      description+="/" + publicIp;
    }
    instanceMap.put(instance.getInstanceId(),description);
  }
  return successStatus(instanceMap);
}
