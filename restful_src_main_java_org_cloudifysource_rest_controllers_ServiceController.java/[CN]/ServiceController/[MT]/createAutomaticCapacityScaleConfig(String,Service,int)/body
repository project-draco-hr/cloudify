{
  ScalingRuleDetails scalingRule=service.getScalingRules();
  if (service.getMinAllowedInstances() <= 0) {
    throw new DSLException("Minimum number of instances (" + service.getMinAllowedInstances() + ") must be 1 or higher.");
  }
  if (service.getMinAllowedInstances() > service.getMaxAllowedInstances()) {
    throw new DSLException("maximum number of instances (" + service.getMaxAllowedInstances() + ") must be equal or greater than the minimum number of instances ("+ service.getMinAllowedInstances()+ ")");
  }
  if (service.getMinAllowedInstances() > service.getNumInstances()) {
    throw new DSLException("number of instances (" + service.getNumInstances() + ") must be equal or greater than the minimum number of instances ("+ service.getMinAllowedInstances()+ ")");
  }
  if (service.getNumInstances() > service.getMaxAllowedInstances()) {
    throw new DSLException("number of instances (" + service.getNumInstances() + ") must be equal or less than the maximum number of instances ("+ service.getMaxAllowedInstances()+ ")");
  }
  Map<String,ServiceStatisticsDetails> serviceStatisticsByName=new HashMap<String,ServiceStatisticsDetails>();
  for (  AbstractStatisticsDetails calculatedStatistics : service.getServiceStatistics()) {
    if (calculatedStatistics instanceof ServiceStatisticsDetails) {
      serviceStatisticsByName.put(calculatedStatistics.getName(),(ServiceStatisticsDetails)calculatedStatistics);
    }
  }
  if (serviceStatisticsByName.isEmpty()) {
    throw new DSLException("calculatedStatistics must define at least one serviceStatistics entry");
  }
  String serviceStatisticsName=scalingRule.getStatistics();
  if (serviceStatisticsName == null) {
    throw new DSLException("scalingRule must specify statistics (serviceStatistics name)");
  }
  ServiceStatisticsDetails serviceStatistics=serviceStatisticsByName.get(serviceStatisticsName);
  if (serviceStatistics == null) {
    throw new DSLException("scalingRule must specify a valid statistics (serviceStatistics name). " + serviceStatisticsName + " is not recognized. Possible values are: "+ serviceStatisticsByName.keySet());
  }
  ProcessingUnitStatisticsId statisticsId=new ProcessingUnitStatisticsId();
  statisticsId.setMonitor(CloudifyConstants.USM_MONITORS_SERVICE_ID);
  statisticsId.setMetric(serviceStatistics.getMetric());
  statisticsId.setInstancesStatistics(serviceStatistics.getInstancesStatistics().createInstancesStatistics());
  if (serviceStatistics.getMovingTimeRangeInSeconds() <= service.getSamplingPeriodInSeconds()) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine("Deploying service " + serviceName + " with auto scaling that monitors the last sample of "+ serviceStatistics.getMetric());
    }
    statisticsId.setTimeWindowStatistics(new LastSampleTimeWindowStatisticsConfig());
  }
 else {
    statisticsId.setTimeWindowStatistics(serviceStatistics.getTimeStatistics().createTimeWindowStatistics(serviceStatistics.getMovingTimeRangeInSeconds(),TimeUnit.SECONDS));
  }
  AutomaticCapacityScaleRuleConfig rule=new AutomaticCapacityScaleRuleConfig();
  rule.setStatistics(statisticsId);
  if (scalingRule.getLowThreshold() == null) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(serviceName + " scalingRule for " + serviceStatisticsName+ " lowThreshold is undefined");
    }
  }
 else {
    Comparable<?> threshold=scalingRule.getLowThreshold().getValue();
    if (threshold == null) {
      throw new DSLException(serviceName + " scalingRule for " + serviceStatisticsName+ " lowThreshold value is missing");
    }
    int instancesDecrease=scalingRule.getLowThreshold().getInstancesDecrease();
    if (instancesDecrease < 0) {
      throw new DSLException(serviceName + " scalingRule for " + serviceStatisticsName+ " lowThreshold instancesDecrease cannot be a negative number ("+ instancesDecrease+ ")");
    }
    if (instancesDecrease == 0) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(serviceName + " scalingRule for " + serviceStatisticsName+ " lowThreshold instancesDecrease is 0");
      }
    }
 else {
      rule.setLowThreshold(threshold);
      rule.setLowThresholdBreachedDecrease(new CapacityRequirementsConfigurer().memoryCapacity(instancesDecrease * externalProcessMemoryInMB,MemoryUnit.MEGABYTES).create());
    }
  }
  if (scalingRule.getHighThreshold() == null) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(serviceName + " scalingRule for " + serviceStatisticsName+ " highThreshold is undefined");
    }
  }
 else {
    Comparable<?> threshold=scalingRule.getHighThreshold().getValue();
    if (threshold == null) {
      throw new DSLException(serviceName + " scalingRule for " + serviceStatisticsName+ " highThreshold value is missing");
    }
    int instancesIncrease=scalingRule.getHighThreshold().getInstancesIncrease();
    if (instancesIncrease < 0) {
      throw new DSLException(serviceName + " scalingRule for " + serviceStatisticsName+ " highThreshold instancesIncrease cannot be a negative number ("+ instancesIncrease+ ")");
    }
    if (instancesIncrease == 0) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(serviceName + " scalingRule for " + serviceStatisticsName+ " highThreshold instancesIncrease is 0");
      }
    }
 else {
      rule.setHighThreshold(threshold);
      rule.setHighThresholdBreachedIncrease(new CapacityRequirementsConfigurer().memoryCapacity(instancesIncrease * externalProcessMemoryInMB,MemoryUnit.MEGABYTES).create());
    }
  }
  CapacityRequirementsConfig minCapacity=new CapacityRequirementsConfigurer().memoryCapacity((service.getMinAllowedInstances() * externalProcessMemoryInMB),MemoryUnit.MEGABYTES).create();
  CapacityRequirementsConfig initialCapacity=new CapacityRequirementsConfigurer().memoryCapacity((service.getNumInstances() * externalProcessMemoryInMB),MemoryUnit.MEGABYTES).create();
  CapacityRequirementsConfig maxCapacity=new CapacityRequirementsConfigurer().memoryCapacity((service.getMaxAllowedInstances() * externalProcessMemoryInMB),MemoryUnit.MEGABYTES).create();
  AutomaticCapacityScaleConfig scaleConfig=new AutomaticCapacityScaleConfigurer().minCapacity(minCapacity).initialCapacity(initialCapacity).maxCapacity(maxCapacity).statisticsPollingInterval(service.getSamplingPeriodInSeconds(),TimeUnit.SECONDS).cooldownAfterScaleOut(service.getScaleOutCooldownInSeconds(),TimeUnit.SECONDS).cooldownAfterScaleIn(service.getScaleInCooldownInSeconds(),TimeUnit.SECONDS).addRule(rule).create();
  return scaleConfig;
}
