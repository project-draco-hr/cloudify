{
  ScalingRulesDetails autoScaling=service.getScalingRules();
  if (service.getMinAllowedInstances() <= 0) {
    throw new DSLException("Minimum number of instances (" + service.getMinAllowedInstances() + ") must be 1 or higher.");
  }
  if (service.getMinAllowedInstances() > service.getMaxAllowedInstances()) {
    throw new DSLException("maximum number of instances (" + service.getMaxAllowedInstances() + ") must be equal or greater than the minimum number of instances ("+ service.getMinAllowedInstances()+ ")");
  }
  if (service.getMinAllowedInstances() > service.getNumInstances()) {
    throw new DSLException("number of instances (" + service.getNumInstances() + ") must be equal or greater than the minimum number of instances ("+ service.getMinAllowedInstances()+ ")");
  }
  if (service.getNumInstances() > service.getMaxAllowedInstances()) {
    throw new DSLException("number of instances (" + service.getNumInstances() + ") must be equal or less than the maximum number of instances ("+ service.getMaxAllowedInstances()+ ")");
  }
  ProcessingUnitStatisticsId statisticsId=new ProcessingUnitStatisticsId();
  statisticsId.setMonitor(CloudifyConstants.USM_MONITORS_SERVICE_ID);
  statisticsId.setMetric(autoScaling.getMetric());
  statisticsId.setInstancesStatistics(autoScaling.getInstancesStatistics().createInstancesStatistics());
  if (autoScaling.getMovingTimeRangeInSeconds() <= autoScaling.getSamplingPeriodInSeconds()) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine("Deploying service " + serviceName + " with auto scaling that monitors the last sample of "+ autoScaling.getMetric());
    }
    statisticsId.setTimeWindowStatistics(new LastSampleTimeWindowStatisticsConfig());
  }
 else {
    statisticsId.setTimeWindowStatistics(autoScaling.getTimeStatistics().createTimeWindowStatistics(autoScaling.getMovingTimeRangeInSeconds(),TimeUnit.SECONDS));
  }
  CapacityRequirementsConfig highThresholdIncreaseCapacity=new CapacityRequirementsConfigurer().memoryCapacity(autoScaling.getHighThreshold().getInstancesIncrease() * externalProcessMemoryInMB,MemoryUnit.MEGABYTES).create();
  CapacityRequirementsConfig lowThresholdDecreaseCapacity=new CapacityRequirementsConfigurer().memoryCapacity(autoScaling.getLowThreshold().getInstancesDecrease() * externalProcessMemoryInMB,MemoryUnit.MEGABYTES).create();
  AutomaticCapacityScaleRuleConfig rule=new AutomaticCapacityScaleRuleConfigurer().lowThreshold(autoScaling.getLowThreshold().getValue()).lowThresholdBreachedDecrease(lowThresholdDecreaseCapacity).highThreshold(autoScaling.getHighThreshold().getValue()).highThresholdBreachedIncrease(highThresholdIncreaseCapacity).statistics(statisticsId).create();
  CapacityRequirementsConfig minCapacity=new CapacityRequirementsConfigurer().memoryCapacity((service.getMinAllowedInstances() * externalProcessMemoryInMB),MemoryUnit.MEGABYTES).create();
  CapacityRequirementsConfig initialCapacity=new CapacityRequirementsConfigurer().memoryCapacity((service.getNumInstances() * externalProcessMemoryInMB),MemoryUnit.MEGABYTES).create();
  CapacityRequirementsConfig maxCapacity=new CapacityRequirementsConfigurer().memoryCapacity((service.getMaxAllowedInstances() * externalProcessMemoryInMB),MemoryUnit.MEGABYTES).create();
  AutomaticCapacityScaleConfig scaleConfig=new AutomaticCapacityScaleConfigurer().minCapacity(minCapacity).initialCapacity(initialCapacity).maxCapacity(maxCapacity).statisticsPollingInterval(autoScaling.getSamplingPeriodInSeconds(),TimeUnit.SECONDS).cooldownAfterScaleOut(service.getScaleOutCooldownInSeconds(),TimeUnit.SECONDS).cooldownAfterScaleIn(service.getScaleInCooldownInSeconds(),TimeUnit.SECONDS).addRule(rule).create();
  return scaleConfig;
}
