{
  final Application app=this.admin.getApplications().waitFor(applicationName,10,TimeUnit.SECONDS);
  if (app == null) {
    logger.log(Level.INFO,"Cannot uninstall application " + applicationName + " since it has not been discovered yet.");
    return RestUtils.errorStatus(ResponseConstants.FAILED_TO_LOCATE_APP,applicationName);
  }
  final ProcessingUnit[] pus=app.getProcessingUnits().getProcessingUnits();
  final StringBuilder sb=new StringBuilder();
  final List<ProcessingUnit> uninstallOrder=createUninstallOrder(pus,applicationName);
  FutureTask<Boolean> undeployTask=null;
  logger.log(Level.INFO,"Starting to poll for uninstall lifecycle events.");
  if (uninstallOrder.size() > 0) {
    undeployTask=new FutureTask<Boolean>(new Runnable(){
      long startTime=System.currentTimeMillis();
      @Override public void run(){
        for (        final ProcessingUnit processingUnit : uninstallOrder) {
          long undeployTimeout=TimeUnit.MINUTES.toMillis(timeoutInMinutes) - (System.currentTimeMillis() - startTime);
          try {
            if (processingUnit.waitForManaged(10,TimeUnit.SECONDS) == null) {
              logger.log(Level.WARNING,"Failed to locate GSM that is managing Processing Unit " + processingUnit.getName());
            }
 else {
              logger.log(Level.INFO,"Undeploying Processing Unit " + processingUnit.getName());
              processingUnit.undeployAndWait(undeployTimeout,TimeUnit.MINUTES);
            }
          }
 catch (          final Exception e) {
            final String msg="Failed to undeploy processing unit: " + processingUnit.getName() + " while uninstalling application "+ applicationName+ ". Uninstall will continue, but service "+ processingUnit.getName()+ " may remain in an unstable state";
            logger.log(Level.SEVERE,msg,e);
          }
        }
        logger.log(Level.INFO,"Application " + applicationName + " undeployment complete");
      }
    }
,true);
    ((InternalAdmin)admin).scheduleAdminOperation(undeployTask);
  }
  final UUID lifecycleEventContainerID=startPollingForApplicationUninstallLifecycleEvents(applicationName,uninstallOrder,timeoutInMinutes,undeployTask);
  final String errors=sb.toString();
  if (errors.length() == 0) {
    final Map<String,Object> returnMap=new HashMap<String,Object>();
    returnMap.put(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID,lifecycleEventContainerID);
    return RestUtils.successStatus(returnMap);
  }
  return RestUtils.errorStatus(errors);
}
