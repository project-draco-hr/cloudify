{
  final Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  final Application app=this.admin.getApplications().waitFor(applicationName,10,TimeUnit.SECONDS);
  if (app == null) {
    logger.log(Level.INFO,"Cannot uninstall application " + applicationName + " since it has not been discovered yet.");
    throw new RestErrorException(FAILED_TO_LOCATE_APP,applicationName);
  }
  if (app.getName().equals(CloudifyConstants.MANAGEMENT_APPLICATION_NAME)) {
    logger.log(Level.INFO,"Cannot uninstall the Management application.");
    throw new RestErrorException(ResponseConstants.CANNOT_UNINSTALL_MANAGEMENT_APP);
  }
  final ProcessingUnit[] pus=app.getProcessingUnits().getProcessingUnits();
  if (pus.length > 0) {
    if (permissionEvaluator != null) {
      final CloudifyAuthorizationDetails authDetails=new CloudifyAuthorizationDetails(authentication);
      String puAuthGroups=pus[0].getBeanLevelProperties().getContextProperties().getProperty(CloudifyConstants.CONTEXT_PROPERTY_AUTH_GROUPS);
      permissionEvaluator.verifyPermission(authDetails,puAuthGroups,"deploy");
    }
  }
  final StringBuilder sb=new StringBuilder();
  final List<ProcessingUnit> uninstallOrder=createUninstallOrder(pus,applicationName);
  FutureTask<Boolean> undeployTask=null;
  logger.log(Level.INFO,"Starting to poll for uninstall lifecycle events.");
  if (uninstallOrder.size() > 0) {
    undeployTask=new FutureTask<Boolean>(new Runnable(){
      private final long startTime=System.currentTimeMillis();
      public void run(){
        for (        final ProcessingUnit processingUnit : uninstallOrder) {
          if (permissionEvaluator != null) {
            final CloudifyAuthorizationDetails authDetails=new CloudifyAuthorizationDetails(authentication);
            String puAuthGroups=processingUnit.getBeanLevelProperties().getContextProperties().getProperty(CloudifyConstants.CONTEXT_PROPERTY_AUTH_GROUPS);
            permissionEvaluator.verifyPermission(authDetails,puAuthGroups,"deploy");
          }
          final long undeployTimeout=TimeUnit.MINUTES.toMillis(timeoutInMinutes) - (System.currentTimeMillis() - startTime);
          try {
            if (processingUnit.waitForManaged(TIMEOUT_WAITING_FOR_GSM_SEC,TimeUnit.SECONDS) == null) {
              logger.log(Level.WARNING,"Failed to locate GSM that is managing Processing Unit " + processingUnit.getName());
            }
 else {
              logger.log(Level.INFO,"Undeploying Processing Unit " + processingUnit.getName());
              processingUnit.undeployAndWait(undeployTimeout,TimeUnit.MILLISECONDS);
            }
          }
 catch (          final Exception e) {
            final String msg="Failed to undeploy processing unit: " + processingUnit.getName() + " while uninstalling application "+ applicationName+ ". Uninstall will continue, but service "+ processingUnit.getName()+ " may remain in an unstable state";
            logger.log(Level.SEVERE,msg,e);
          }
        }
        logger.log(Level.INFO,"Application " + applicationName + " undeployment complete");
      }
    }
,Boolean.TRUE);
    ((InternalAdmin)admin).scheduleAdminOperation(undeployTask);
  }
  final UUID lifecycleEventContainerID=startPollingForApplicationUninstallLifecycleEvents(applicationName,uninstallOrder,timeoutInMinutes,undeployTask);
  final String errors=sb.toString();
  if (errors.length() == 0) {
    final Map<String,Object> returnMap=new HashMap<String,Object>();
    returnMap.put(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID,lifecycleEventContainerID);
    return RestUtils.successStatus(returnMap);
  }
  throw new RestErrorException(errors);
}
