{
  final File jarFile=getJarFileFromDir(new File(puConfig.getBinaries()),extractedServiceFolder,serviceName);
  final int containerMemoryInMB=puConfig.getSla().getMemoryCapacityPerContainer();
  final int maxMemoryCapacityInMB=puConfig.getSla().getMaxMemoryCapacity();
  final int reservedMemoryCapacityPerMachineInMB=256;
  final ElasticStatefulProcessingUnitDeployment deployment=new ElasticStatefulProcessingUnitDeployment(jarFile).name(serviceName).memoryCapacityPerContainer(containerMemoryInMB,MemoryUnit.MEGABYTES).maxMemoryCapacity(maxMemoryCapacityInMB + "m").addContextProperty(CloudifyConstants.CONTEXT_PROPERTY_APPLICATION_NAME,applicationName).highlyAvailable(puConfig.getSla().getHighlyAvailable()).singleMachineDeployment();
  setContextProperties(deployment,contextProperties);
  if (cloud == null) {
    verifyEsmExistsInCluster();
    if (isLocalCloud()) {
      setPublicMachineProvisioning(deployment,agentZones,reservedMemoryCapacityPerMachineInMB);
      deployment.scale(new ManualCapacityScaleConfigurer().memoryCapacity(puConfig.getSla().getMemoryCapacity(),MemoryUnit.MEGABYTES).create());
    }
 else {
      setSharedMachineProvisioning(deployment,agentZones,reservedMemoryCapacityPerMachineInMB);
      deployment.scale(ElasticScaleConfigFactory.createEagerScaleConfig());
    }
  }
 else {
    final CloudTemplate template=getComputeTemplate(cloud,templateName);
    validateAndPrepareStatefulSla(serviceName,puConfig.getSla(),cloud,template);
    final CloudifyMachineProvisioningConfig config=new CloudifyMachineProvisioningConfig(cloud,template,cloudFileContents,templateName);
    final String locators=extractLocators(admin);
    config.setLocator(locators);
    setDedicatedMachineProvisioning(deployment,config);
    deployment.scale(ElasticScaleConfigFactory.createManualCapacityScaleConfig(puConfig.getSla().getMemoryCapacity(),locationAware));
  }
  deployAndWait(serviceName,deployment);
  jarFile.delete();
}
