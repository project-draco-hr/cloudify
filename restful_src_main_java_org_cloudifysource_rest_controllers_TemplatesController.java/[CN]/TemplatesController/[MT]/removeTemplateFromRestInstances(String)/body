{
  final ProcessingUnit processingUnit=admin.getProcessingUnits().waitFor("rest",RestUtils.TIMEOUT_IN_SECOND,TimeUnit.SECONDS);
  final ProcessingUnitInstance[] instances=processingUnit.getInstances();
  logger.log(Level.INFO,"[removeTemplateFromRestInstances] - sending an http request to " + instances.length + " REST instances. Template's name is "+ templateName);
  final Map<String,String> failedToRemoveFromHosts=new HashMap<String,String>();
  final List<String> successfullyRemovedFromHosts=new LinkedList<String>();
  for (  final ProcessingUnitInstance puInstance : instances) {
    String hostAddress=puInstance.getMachine().getHostAddress();
    final String port=Integer.toString(puInstance.getJeeDetails().getPort());
    try {
      RestClient restClient=createRestClient(hostAddress,port);
      restClient.removeTemplateInternal(templateName);
    }
 catch (    final RestClientException e) {
      failedToRemoveFromHosts.put(hostAddress,e.getMessageFormattedText());
      logger.log(Level.WARNING,"[removeTemplateFromRestInstances] - remove template [" + templateName + "] from instance ["+ hostAddress+ "] failed. Error: "+ e.getMessageFormattedText(),e);
      continue;
    }
    successfullyRemovedFromHosts.add(hostAddress);
    logger.log(Level.INFO,"[removeTemplateFromRestInstances] - Successfully removed template [" + templateName + "] from "+ hostAddress);
  }
  final RemoveTemplatesResponse response=new RemoveTemplatesResponse();
  response.setFailedToRemoveFromHosts(failedToRemoveFromHosts);
  response.setSuccessfullyRemovedFromHosts(successfullyRemovedFromHosts);
  return response;
}
