{
  final String managementMachineTemplate=cloud.getConfiguration().getManagementMachineTemplate();
  final ComputeTemplate cloudTemplate=cloud.getCloudCompute().getTemplates().get(managementMachineTemplate);
  String endpoint=null;
  final Map<String,Object> overrides=cloudTemplate.getOverrides();
  if (overrides != null && !overrides.isEmpty()) {
    endpoint=(String)overrides.get(OpenStackCloudifyDriver.JCLOUDS_ENDPOINT);
  }
  final String networkVersion=(String)cloudTemplate.getOptions().get(OpenStackCloudifyDriver.OPT_NETWORK_API_VERSION);
  final String networkServiceName=(String)cloudTemplate.getOptions().get(OpenStackCloudifyDriver.OPT_NETWORK_SERVICE_NAME);
  final String cloudImageId=cloudTemplate.getImageId();
  final String region=cloudImageId.split("/")[0];
  final String cloudUser=cloud.getUser().getUser();
  final String password=cloud.getUser().getApiKey();
  final StringTokenizer st=new StringTokenizer(cloudUser,":");
  final String tenant=st.hasMoreElements() ? (String)st.nextToken() : null;
  final String username=st.hasMoreElements() ? (String)st.nextToken() : null;
  try {
    this.networkApi=new OpenStackNetworkClient(endpoint,username,password,tenant,region,networkServiceName,networkVersion);
  }
 catch (  OpenstackJsonSerializationException e) {
    throw new IllegalStateException(e);
  }
}
