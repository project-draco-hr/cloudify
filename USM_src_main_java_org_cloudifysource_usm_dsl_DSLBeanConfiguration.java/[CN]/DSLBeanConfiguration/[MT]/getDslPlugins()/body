{
  if (!active) {
    return null;
  }
  final List<PluginDescriptor> plugins=this.service.getPlugins();
  if (plugins == null || plugins.isEmpty()) {
    return null;
  }
  for (  final PluginDescriptor descriptor : plugins) {
    final Class<?> pluginClass=getPluginClass(descriptor);
    if (pluginClass != null) {
      final String name=descriptor.getName() == null ? descriptor.getClassName() : descriptor.getName();
      try {
        this.context.getBeanFactory().getBean(name);
        throw new IllegalArgumentException("The name: " + name + " is already in use and can't be used to identify a plugin");
      }
 catch (      final NoSuchBeanDefinitionException e) {
      }
      ((DefaultListableBeanFactory)this.context.getBeanFactory()).registerBeanDefinition(pluginClass.getSimpleName(),BeanDefinitionBuilder.rootBeanDefinition(pluginClass.getName()).getBeanDefinition());
      final Object pluginObject=this.context.getBeanFactory().getBean(pluginClass);
      final Plugin component=(Plugin)pluginObject;
      component.setServiceContext(this.serviceContext);
      component.setConfig(descriptor.getConfig());
    }
  }
  return null;
}
