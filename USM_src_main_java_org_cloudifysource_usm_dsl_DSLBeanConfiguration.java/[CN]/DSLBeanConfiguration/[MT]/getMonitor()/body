{
  final Object monitor=this.service.getLifecycle().getMonitors();
  if (monitor == null) {
    return null;
  }
  if (monitor instanceof Closure<?>) {
    return new Monitor(){
      @SuppressWarnings("unchecked") @Override public Map<String,Number> getMonitorValues(      final UniversalServiceManagerBean usm,      final ServiceConfiguration config) throws MonitorException {
        final Object obj=((Closure<?>)monitor).call();
        if (obj instanceof Map<?,?>) {
          return USMUtils.convertMapToNumericValues((Map<String,Object>)obj);
        }
        throw new IllegalArgumentException("The Monitor closure defined in the DSL file does not evaluate to a Map! " + "Received object was of type: " + obj.getClass().getName());
      }
    }
;
  }
  return new Monitor(){
    @SuppressWarnings("unchecked") @Override public Map<String,Number> getMonitorValues(    final UniversalServiceManagerBean usm,    final ServiceConfiguration config) throws MonitorException {
      final Map<String,Object> returnMap=new HashMap<String,Object>();
      if (monitor instanceof Map<?,?>) {
        for (        final Map.Entry<String,Object> entryObject : ((Map<String,Object>)monitor).entrySet()) {
          final Object object=entryObject.getValue();
          final EventResult result=new DSLEntryExecutor(ExecutableDSLEntryFactory.createEntry(object,entryObject.getKey()),launcher,puExtDir).run();
          if (!result.isSuccess()) {
            logger.log(Level.WARNING,"DSL Entry failed to execute: " + result.getException());
          }
 else {
            returnMap.put(entryObject.getKey(),result.getResult());
          }
        }
      }
      return USMUtils.convertMapToNumericValues(returnMap);
    }
  }
;
}
