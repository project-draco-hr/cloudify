{
  RecipePathResolver pathResolver=new RecipePathResolver("/recipes/services");
  if (pathResolver.resolve(recipe)) {
    recipe=pathResolver.getResolved();
  }
 else {
    throw new CLIStatusException("service_file_doesnt_exist",pathResolver.getPathsLooked().toArray());
  }
  File packedFile;
  final File cloudConfigurationZipFile=createCloudConfigurationZipFile();
  Service service=null;
  try {
    if (recipe.getName().endsWith(".jar") || recipe.getName().endsWith(".war")) {
      packedFile=recipe;
    }
 else     if (recipe.isDirectory()) {
      final List<File> additionFiles=new LinkedList<File>();
      if (cloudConfigurationZipFile != null) {
        additionFiles.add(cloudConfigurationZipFile);
      }
      if (overrides != null) {
        additionFiles.add(overrides);
      }
      File recipeFile=recipe;
      if (serviceFileName != null) {
        final File fullPathToRecipe=new File(recipe.getAbsolutePath() + "/" + serviceFileName);
        if (!fullPathToRecipe.exists()) {
          throw new CLIStatusException("service_file_doesnt_exist",fullPathToRecipe.getPath());
        }
        recipeFile=fullPathToRecipe.isDirectory() ? DSLReader.findDefaultDSLFile(DSLReader.SERVICE_DSL_FILE_NAME_SUFFIX,fullPathToRecipe) : fullPathToRecipe;
      }
 else {
        if (recipe.isDirectory()) {
          recipeFile=DSLReader.findDefaultDSLFile(DSLReader.SERVICE_DSL_FILE_NAME_SUFFIX,recipe);
        }
      }
      final DSLReader dslReader=createDslReader(recipeFile);
      service=dslReader.readDslEntity(Service.class);
      if (overrides != null) {
        additionFiles.add(DSLReader.copyOverridesFile(overrides,dslReader.getDslName()));
      }
      packedFile=Packager.pack(recipeFile,false,service,additionFiles);
      packedFile.deleteOnExit();
    }
 else {
      packedFile=recipe;
      service=ServiceReader.readServiceFromZip(packedFile);
    }
  }
 catch (  final IOException e) {
    throw new CLIException(e);
  }
catch (  final PackagingException e) {
    throw new CLIException(e);
  }
  final String currentApplicationName=getCurrentApplicationName();
  Properties props=null;
  if (service != null) {
    props=createServiceContextProperties(service);
    if (serviceFileName != null) {
      props.setProperty(CloudifyConstants.CONTEXT_PROPERTY_SERVICE_FILE_NAME,serviceFileName);
    }
    if (serviceName == null || serviceName.isEmpty()) {
      serviceName=service.getName();
    }
  }
 else {
    if (serviceName == null || serviceName.isEmpty()) {
      serviceName=recipe.getName();
      final int endIndex=serviceName.lastIndexOf('.');
      if (endIndex > 0) {
        serviceName=serviceName.substring(0,endIndex);
      }
    }
  }
  if (zone == null || zone.isEmpty()) {
    zone=serviceName;
  }
  String templateName;
  if (service == null || service.getCompute() == null) {
    templateName="";
  }
 else {
    templateName=service.getCompute().getTemplate();
    if (templateName == null) {
      templateName="";
    }
  }
  final String lifecycleEventContainerPollingID=adminFacade.installElastic(packedFile,currentApplicationName,serviceName,zone,props,templateName,getTimeoutInMinutes(),!disableSelfHealing);
  final RestLifecycleEventsLatch lifecycleEventsPollingLatch=this.adminFacade.getLifecycleEventsPollingLatch(lifecycleEventContainerPollingID,TIMEOUT_ERROR_MESSAGE);
  boolean isDone=false;
  boolean continuous=false;
  while (!isDone) {
    try {
      if (!continuous) {
        lifecycleEventsPollingLatch.waitForLifecycleEvents(getTimeoutInMinutes(),TimeUnit.MINUTES);
      }
 else {
        lifecycleEventsPollingLatch.continueWaitForLifecycleEvents(getTimeoutInMinutes(),TimeUnit.MINUTES);
      }
      isDone=true;
    }
 catch (    final TimeoutException e) {
      if (!(Boolean)session.get(Constants.INTERACTIVE_MODE)) {
        throw e;
      }
      final boolean continueInstallation=promptWouldYouLikeToContinueQuestion();
      if (!continueInstallation) {
        throw new CLIStatusException(e,"service_installation_timed_out_on_client",serviceName);
      }
 else {
        continuous=true;
      }
    }
  }
  if (recipe.isDirectory()) {
    FileUtils.deleteQuietly(packedFile.getParentFile());
  }
  return getFormattedMessage("service_install_ended",Color.GREEN,serviceName);
}
