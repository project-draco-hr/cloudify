{
  logger.fine("install-service using the old rest client");
  try {
    DebugUtils.validateDebugSettings(debugAll,debugEvents,debugModeString);
  }
 catch (  final DSLErrorMessageException e) {
    throw new CLIStatusException(e,e.getErrorMessage().getName(),(Object[])e.getArgs());
  }
  if (cloudOverrides != null) {
    if (cloudOverrides.length() >= TEN_K) {
      throw new CLIStatusException(CloudifyErrorMessages.CLOUD_OVERRIDES_TO_LONG.getName());
    }
  }
  final RecipePathResolver pathResolver=new RecipePathResolver();
  if (pathResolver.resolveService(recipe)) {
    recipe=pathResolver.getResolved();
  }
 else {
    throw new CLIStatusException("service_file_doesnt_exist",StringUtils.join(pathResolver.getPathsLooked().toArray(),", "));
  }
  File packedFile;
  final File cloudConfigurationZipFile=createCloudConfigurationZipFile();
  Service service=null;
  try {
    if (recipe.getName().endsWith(".jar") || recipe.getName().endsWith(".war")) {
      packedFile=recipe;
    }
 else     if (recipe.isDirectory()) {
      final List<File> additionFiles=new LinkedList<File>();
      if (cloudConfigurationZipFile != null) {
        additionFiles.add(cloudConfigurationZipFile);
      }
      File recipeFile=recipe;
      if (getServiceFileName() != null) {
        final File fullPathToRecipe=new File(recipe.getAbsolutePath() + "/" + getServiceFileName());
        if (!fullPathToRecipe.exists()) {
          throw new CLIStatusException("service_file_doesnt_exist",fullPathToRecipe.getPath());
        }
        recipeFile=fullPathToRecipe.isDirectory() ? DSLReader.findDefaultDSLFile(DSLUtils.SERVICE_DSL_FILE_NAME_SUFFIX,fullPathToRecipe) : fullPathToRecipe;
      }
 else {
        recipeFile=DSLReader.findDefaultDSLFile(DSLUtils.SERVICE_DSL_FILE_NAME_SUFFIX,recipe);
      }
      service=ServiceReader.readService(recipeFile,recipe,null,false,overrides);
      packedFile=Packager.pack(recipeFile,false,service,additionFiles);
      packedFile.deleteOnExit();
    }
 else {
      packedFile=recipe;
      service=ServiceReader.readServiceFromZip(packedFile);
    }
  }
 catch (  final IOException e) {
    throw new CLIException(e);
  }
catch (  final PackagingException e) {
    throw new CLIException(e);
  }
  final String currentApplicationName=getCurrentApplicationName();
  Properties props=null;
  if (service != null) {
    props=createServiceContextProperties(service);
    if (getServiceFileName() != null) {
      props.setProperty(CloudifyConstants.CONTEXT_PROPERTY_SERVICE_FILE_NAME,getServiceFileName());
    }
    if (serviceName == null || serviceName.isEmpty()) {
      serviceName=service.getName();
    }
    if (!org.cloudifysource.restclient.StringUtils.isValidRecipeName(serviceName)) {
      throw new CLIStatusException(CloudifyErrorMessages.SERVICE_NAME_INVALID_CHARS.getName(),serviceName);
    }
  }
 else {
    if (serviceName == null || serviceName.isEmpty()) {
      serviceName=recipe.getName();
      final int endIndex=serviceName.lastIndexOf('.');
      if (endIndex > 0) {
        serviceName=serviceName.substring(0,endIndex);
      }
    }
  }
  if (zone == null || zone.isEmpty()) {
    zone=serviceName;
  }
  String templateName;
  if (service == null || service.getCompute() == null) {
    templateName="";
  }
 else {
    templateName=service.getCompute().getTemplate();
    if (templateName == null) {
      templateName="";
    }
  }
  try {
    final String lifecycleEventContainerPollingID=adminFacade.installElastic(packedFile,currentApplicationName,serviceName,zone,props,templateName,authGroups,getTimeoutInMinutes(),!disableSelfHealing,cloudOverrides,overrides);
    pollForLifecycleEvents(lifecycleEventContainerPollingID);
  }
  finally {
    if (recipe.isDirectory()) {
      FileUtils.deleteQuietly(packedFile.getParentFile());
    }
  }
  return getFormattedMessage("service_install_ended",Color.GREEN,serviceName);
}
