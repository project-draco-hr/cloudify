{
  final long[] allPids=getAllPids();
  final Map<Long,Set<Long>> procTree=createProcessTree(allPids);
  this.childProcessID=findNewChildProcessID(childrenBeforeStart,procTree);
  if (this.childProcessID == 0) {
    logger.warning("Default foreground process locator was unable to locate a new child process. " + "The default implementation can only locate foreground processes. " + "If you are running backgorund processes or OS services, you must "+ "set a process locator to get process level metrics and monitoring");
    this.serviceProcesses=new ArrayList<Long>(0);
  }
 else {
    logger.info("Looking for actual process ID in process tree");
    final List<Long> resultList=new LinkedList<Long>();
    findLeafProcessIDs(this.childProcessID,procTree,resultList);
    if (resultList.isEmpty()) {
      logger.warning("Default process locator was unable to locate service processes. " + "The default implementation can only locate foreground processes. " + "If you are running backgorund processes or OS services, you must "+ "set a process locator to get process level metrics and monitoring");
    }
    this.serviceProcesses=resultList;
    checkForConsoleProcess();
  }
}
