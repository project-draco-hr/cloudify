{
  final long endTime=System.currentTimeMillis() + timeUnit.toMillis(duration);
  final VolumeDetails volumeDetails;
  final Volume volume;
  Optional<? extends VolumeApi> volumeApi=getVolumeApi(location);
  if (!volumeApi.isPresent()) {
    throw new StorageProvisioningException("Failed to create volume, Openstack API is not initialized.");
  }
  if (computeContext == null) {
    throw new StorageProvisioningException("Failed to create volume, compute context is not initialized.");
  }
  String volumeName=storageTemplate.getNamePrefix() + System.currentTimeMillis();
  CreateVolumeOptions options=CreateVolumeOptions.Builder.name(volumeName).description(VOLUME_DESCRIPTION).availabilityZone(getStorageZone());
  volume=volumeApi.get().create(1,options);
  try {
    volumeDetails=waitForVolume(volumeApi,volume.getId(),endTime);
  }
 catch (  final Exception e) {
    logger.log(Level.WARNING,"volume: " + volume.getId() + " failed to start up correctly. Shutting it down."+ " Error was: "+ e.getMessage(),e);
    try {
      deleteVolume(location,volume.getId(),duration,timeUnit);
    }
 catch (    final Exception e2) {
      logger.log(Level.WARNING,"Error while deleting volume: " + volume.getId() + ". Error was: "+ e.getMessage()+ ".It may be leaking.",e);
    }
    throw new StorageProvisioningException(e);
  }
  return volumeDetails;
}
