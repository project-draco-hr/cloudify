{
  final File directory=new File(Environment.getHomeDirectory(),"/bin").getAbsoluteFile();
  command[command.length - 1]=new File(directory,command[command.length - 1]).getAbsolutePath();
  final List<String> commandLine=new ArrayList<String>();
  commandLine.addAll(Arrays.asList(command));
  commandLine.addAll(Arrays.asList(args));
  final String commandString=StringUtils.collectionToDelimitedString(commandLine," ");
  final File filename=createScript(commandString);
  final ProcessBuilder pb=new ProcessBuilder().command(filename.getAbsolutePath()).directory(directory);
  String localCloudOptions="-Xmx" + CloudifyConstants.DEFAULT_LOCALCLOUD_GSA_GSM_ESM_LUS_MEMORY_IN_MB + "m"+ " -D"+ CloudifyConstants.LUS_PORT_CONTEXT_PROPERTY+ "="+ lusPort+ " -D"+ GSM_EXCLUDE_GSC_ON_FAILED_INSTANCE+ "="+ GSM_EXCLUDE_GSC_ON_FAILED_INSTACE_BOOL+ " "+ GSM_PENDING_REQUESTS_DELAY+ " -D"+ ZONES_PROPERTY+ "="+ gsaZones;
  String gsaJavaOptions="-Xmx" + CloudifyConstants.DEFAULT_AGENT_MAX_MEMORY;
  if (gsaZones != null) {
    gsaJavaOptions+=" -D" + ZONES_PROPERTY + "="+ gsaZones;
  }
  if (autoShutdown) {
    gsaJavaOptions+=" " + AUTO_SHUTDOWN_COMMANDLINE_ARGUMENT;
  }
  String lusJavaOptions="-Xmx" + CloudifyConstants.DEFAULT_LUS_MAX_MEMORY + " -D"+ CloudifyConstants.LUS_PORT_CONTEXT_PROPERTY+ "="+ lusPort+ " -D"+ ZONES_PROPERTY+ "="+ MANAGEMENT_ZONE;
  String gsmJavaOptions="-Xmx" + CloudifyConstants.DEFAULT_GSM_MAX_MEMORY + " -D"+ CloudifyConstants.LUS_PORT_CONTEXT_PROPERTY+ "="+ lusPort+ " -D"+ GSM_EXCLUDE_GSC_ON_FAILED_INSTANCE+ "="+ GSM_EXCLUDE_GSC_ON_FAILED_INSTACE_BOOL+ " -D"+ ZONES_PROPERTY+ "="+ MANAGEMENT_ZONE+ " "+ GSM_PENDING_REQUESTS_DELAY;
  logger.info("CHECKING FOR GSM PERSISTENCE SETTINGS");
  if (!this.isLocalCloud) {
    logger.info("ADDING GSM PERSISTENCE SETTINGS");
    final String persistentStoragePath=this.cloud.getConfiguration().getPersistentStoragePath();
    if (persistentStoragePath != null) {
      final String gsmStoragePath=persistentStoragePath + "/gsm";
      gsmJavaOptions=gsmJavaOptions + " -Dcom.gs.persistency.logDirectory=" + gsmStoragePath;
    }
  }
  logger.info("GSM SETTINGS: " + gsmJavaOptions);
  System.out.println("GSM SETTINGS: " + gsmJavaOptions);
  String esmJavaOptions="-Xmx" + CloudifyConstants.DEFAULT_ESM_MAX_MEMORY + " -D"+ ZONES_PROPERTY+ "="+ MANAGEMENT_ZONE;
  String gscJavaOptions="";
  final Map<String,String> environment=pb.environment();
  if (lookupGroups != null) {
    environment.put("LOOKUPGROUPS",lookupGroups);
  }
  if (lookupLocators != null) {
    final String disableMulticast="-Dcom.gs.multicast.enabled=false";
    environment.put("LOOKUPLOCATORS",lookupLocators);
    gsaJavaOptions+=" " + disableMulticast;
    lusJavaOptions+=" " + disableMulticast;
    gsmJavaOptions+=" " + disableMulticast;
    esmJavaOptions+=" " + disableMulticast;
    gscJavaOptions+=" " + disableMulticast;
    localCloudOptions+=" " + disableMulticast;
  }
  gsaJavaOptions+=" " + environment.get("GSA_JAVA_OPTIONS") == null ? "" : environment.get("GSA_JAVA_OPTIONS");
  lusJavaOptions+=" " + environment.get("LUS_JAVA_OPTIONS") == null ? "" : environment.get("LUS_JAVA_OPTIONS");
  gsmJavaOptions+=" " + environment.get("GSM_JAVA_OPTIONS") == null ? "" : environment.get("GSM_JAVA_OPTIONS");
  esmJavaOptions+=" " + environment.get("ESM_JAVA_OPTIONS") == null ? "" : environment.get("ESM_JAVA_OPTIONS");
  gscJavaOptions+=" " + environment.get("GSC_JAVA_OPTIONS") == null ? "" : environment.get("GSC_JAVA_OPTIONS");
  if (nicAddress != null) {
    environment.put("NIC_ADDR",nicAddress);
  }
  environment.put("RMI_OPTIONS","");
  final String springProfiles=createSpringProfilesList(securityProfile);
  logger.fine("Setting env var " + CloudifyConstants.SPRING_ACTIVE_PROFILE_ENV_VAR + " to: "+ springProfiles);
  environment.put(CloudifyConstants.SPRING_ACTIVE_PROFILE_ENV_VAR,springProfiles);
  if (ShellUtils.isSecureConnection(securityProfile)) {
    logger.fine("Setting env var " + CloudifyConstants.KEYSTORE_FILE_ENV_VAR + " to: "+ keystoreFilePath);
    environment.put(CloudifyConstants.KEYSTORE_FILE_ENV_VAR,keystoreFilePath);
    logger.fine("Setting env var " + CloudifyConstants.KEYSTORE_PASSWORD_ENV_VAR + " to: "+ keystorePassword);
    environment.put(CloudifyConstants.KEYSTORE_PASSWORD_ENV_VAR,keystorePassword);
  }
  logger.fine("Setting env var " + CloudifyConstants.SPRING_SECURITY_CONFIG_FILE_ENV_VAR + " to: "+ securityFilePath);
  environment.put(CloudifyConstants.SPRING_SECURITY_CONFIG_FILE_ENV_VAR,securityFilePath);
  if (isLocalCloud) {
    logger.fine("Setting env vars COMPONENT_JAVA_OPTIONS: " + localCloudOptions);
    environment.put("COMPONENT_JAVA_OPTIONS",localCloudOptions);
    environment.put(CloudifyConstants.GIGASPACES_CLOUD_HARDWARE_ID,"localcloud");
    environment.put(CloudifyConstants.GIGASPACES_CLOUD_IMAGE_ID,"localcloud");
    environment.put(CloudifyConstants.GIGASPACES_CLOUD_TEMPLATE_NAME,"localcloud");
    environment.put(CloudifyConstants.GIGASPACES_CLOUD_MACHINE_ID,"localcloud");
    if (nicAddress != null) {
      environment.put(CloudifyConstants.GIGASPACES_AGENT_ENV_PRIVATE_IP,nicAddress);
      environment.put(CloudifyConstants.GIGASPACES_AGENT_ENV_PUBLIC_IP,nicAddress);
    }
  }
 else {
    logger.fine("Setting env vars " + "GSA_JAVA_OPTIONS: gsaJavaOptions" + gsaJavaOptions + "; LUS_JAVA_OPTIONS: "+ lusJavaOptions+ "; GSM_JAVA_OPTIONS: "+ gsmJavaOptions+ "; ESM_JAVA_OPTIONS: "+ esmJavaOptions+ "; GSC_JAVA_OPTIONS: "+ gscJavaOptions);
    environment.put("GSA_JAVA_OPTIONS",gsaJavaOptions);
    environment.put("LUS_JAVA_OPTIONS",lusJavaOptions);
    environment.put("GSM_JAVA_OPTIONS",gsmJavaOptions);
    logger.info("SETTING GSM_JAVA_OPTIONS2");
    environment.put("GSM_JAVA_OPTIONS2",gsmJavaOptions);
    environment.put("ESM_JAVA_OPTIONS",esmJavaOptions);
    environment.put("GSC_JAVA_OPTIONS",gscJavaOptions);
  }
  logger.info("Starting agent with command: " + commandString);
  logger.info("Staring agent with env: " + pb.environment());
  System.out.println("Starting agent with command: " + commandString);
  System.out.println("Staring agent with env: " + environment);
  try {
    logger.fine("Executing command: " + commandString);
    final Process proc=pb.start();
    Thread.sleep(MIN_PROC_ERROR_TIME);
    try {
      if (proc.exitValue() != 0) {
        String errorMessage="Error while starting agent. " + "Please make sure that another agent is not already running. ";
        if (verbose) {
          errorMessage=errorMessage.concat("Command executed: " + commandString);
        }
        throw new CLIException(errorMessage);
      }
    }
 catch (    final IllegalThreadStateException e) {
      logger.fine("agent is starting...");
    }
  }
 catch (  final IOException e) {
    throw new CLIException("Error while starting agent",e);
  }
}
