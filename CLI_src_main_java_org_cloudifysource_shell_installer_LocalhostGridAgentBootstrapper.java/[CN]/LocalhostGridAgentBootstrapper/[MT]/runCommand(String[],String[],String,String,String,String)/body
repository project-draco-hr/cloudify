{
  final File directory=new File(Environment.getHomeDirectory(),"/bin").getAbsoluteFile();
  command[command.length - 1]=new File(directory,command[command.length - 1]).getAbsolutePath();
  final List<String> commandLine=new ArrayList<String>();
  commandLine.addAll(Arrays.asList(command));
  commandLine.addAll(Arrays.asList(args));
  final String commandString=StringUtils.collectionToDelimitedString(commandLine," ");
  final File filename=createScript(commandString);
  final ProcessBuilder pb=new ProcessBuilder().command(filename.getAbsolutePath()).directory(directory);
  String localCloudOptions="-Xmx" + CloudifyConstants.DEFAULT_LOCALCLOUD_GSA_GSM_ESM_LUS_MEMORY_IN_MB + "m"+ " -D"+ CloudifyConstants.LUS_PORT_CONTEXT_PROPERTY+ "="+ lusPort+ " -D"+ GSM_EXCLUDE_GSC_ON_FAILED_INSTANCE+ "="+ GSM_EXCLUDE_GSC_ON_FAILED_INSTACE_BOOL+ " "+ GSM_PENDING_REQUESTS_DELAY+ " -D"+ ZONES_PROPERTY+ "="+ LOCALCLOUD_GSA_ZONES;
  final Map<String,String> environment=pb.environment();
  if (lookupGroups != null) {
    environment.put("LOOKUPGROUPS",lookupGroups);
  }
  if (lookupLocators != null) {
    final String disableMulticast="-Dcom.gs.multicast.enabled=false";
    environment.put("LOOKUPLOCATORS",lookupLocators);
    localCloudOptions+=" " + disableMulticast;
  }
  if (isLocalCloud) {
    logger.fine("Setting env vars COMPONENT_JAVA_OPTIONS: " + localCloudOptions);
    environment.put("COMPONENT_JAVA_OPTIONS",localCloudOptions);
    environment.put(CloudifyConstants.GIGASPACES_CLOUD_HARDWARE_ID,"localcloud");
    environment.put(CloudifyConstants.GIGASPACES_CLOUD_IMAGE_ID,"localcloud");
    environment.put(CloudifyConstants.GIGASPACES_CLOUD_TEMPLATE_NAME,"localcloud");
    environment.put(CloudifyConstants.GIGASPACES_CLOUD_MACHINE_ID,"localcloud");
    final String springProfiles=createSpringProfilesList(securityProfile);
    environment.put(CloudifyConstants.SPRING_ACTIVE_PROFILE_ENV_VAR,springProfiles);
    if (ShellUtils.isSecureConnection(securityProfile)) {
      environment.put(CloudifyConstants.KEYSTORE_FILE_ENV_VAR,keystoreFilePath);
      environment.put(CloudifyConstants.KEYSTORE_PASSWORD_ENV_VAR,keystorePassword);
    }
    environment.put(CloudifyConstants.SPRING_SECURITY_CONFIG_FILE_ENV_VAR,securityFilePath);
    if (nicAddress != null) {
      environment.put(CloudifyConstants.GIGASPACES_AGENT_ENV_PRIVATE_IP,nicAddress);
      environment.put(CloudifyConstants.GIGASPACES_AGENT_ENV_PUBLIC_IP,nicAddress);
    }
  }
  try {
    logger.fine("Executing command: " + commandString);
    final Process proc=pb.start();
    Thread.sleep(MIN_PROC_ERROR_TIME);
    try {
      if (proc.exitValue() != 0) {
        String errorMessage="Error while starting agent. " + "Please make sure that another agent is not already running. ";
        if (verbose) {
          errorMessage=errorMessage.concat("Command executed: " + commandString);
        }
        throw new CLIException(errorMessage);
      }
    }
 catch (    final IllegalThreadStateException e) {
      logger.fine("agent is starting...");
    }
  }
 catch (  final IOException e) {
    throw new CLIException("Error while starting agent",e);
  }
}
