{
  setIsLocalCloud(isLocalCloud);
  final long end=System.currentTimeMillis() + timeunit.toMillis(timeout);
  if (gsaZones == null || gsaZones.isEmpty()) {
    throw new CLIException("Agent must be started with a zone");
  }
  final ConnectionLogsFilter connectionLogs=new ConnectionLogsFilter();
  connectionLogs.supressConnectionErrors();
  final Admin admin=createAdmin();
  try {
    setLookupDefaults(admin);
    GridServiceAgent agent;
    try {
      try {
        if (!isLocalCloud || fastExistingAgentCheck()) {
          waitForExistingAgent(admin,progressInSeconds,TimeUnit.SECONDS);
          throw new CLIException("Agent already running on local machine.");
        }
      }
 catch (      final TimeoutException e) {
      }
      runGsAgentOnLocalHost("agent and management processes",gsAgentArgs);
      agent=waitForNewAgent(admin,ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE,end),TimeUnit.MILLISECONDS);
    }
  finally {
      connectionLogs.restoreConnectionErrors();
    }
    waitForManagementProcesses(agent,ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE,end),TimeUnit.MILLISECONDS);
    final List<AbstractManagementServiceInstaller> waitForManagementServices=new LinkedList<AbstractManagementServiceInstaller>();
    if (isLocalCloud) {
      startLocalCloudManagementServicesContainer(agent);
    }
    connectionLogs.supressConnectionErrors();
    try {
      ManagementSpaceServiceInstaller managementSpaceInstaller=null;
      if (!noManagementSpace) {
        final boolean highlyAvailable=!isLocalCloud && !notHighlyAvailableManagementSpace;
        managementSpaceInstaller=new ManagementSpaceServiceInstaller();
        managementSpaceInstaller.setAdmin(agent.getAdmin());
        managementSpaceInstaller.setVerbose(verbose);
        managementSpaceInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);
        managementSpaceInstaller.setMemory(MANAGEMENT_SPACE_MEMORY_IN_MB,MemoryUnit.MEGABYTES);
        managementSpaceInstaller.setServiceName(MANAGEMENT_SPACE_NAME);
        managementSpaceInstaller.setManagementZone(MANAGEMENT_ZONE);
        managementSpaceInstaller.setHighlyAvailable(highlyAvailable);
        managementSpaceInstaller.addListeners(this.eventsListenersList);
        managementSpaceInstaller.setIsLocalCloud(isLocalCloud);
        try {
          managementSpaceInstaller.installSpace();
          waitForManagementServices.add(managementSpaceInstaller);
        }
 catch (        final ProcessingUnitAlreadyDeployedException e) {
          if (verbose) {
            logger.fine("Service " + MANAGEMENT_SPACE_NAME + " already installed");
            publishEvent("Service " + MANAGEMENT_SPACE_NAME + " already installed");
          }
        }
      }
      if (!noWebServices) {
        final ManagementWebServiceInstaller webuiInstaller=new ManagementWebServiceInstaller();
        webuiInstaller.setAdmin(agent.getAdmin());
        webuiInstaller.setVerbose(verbose);
        webuiInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);
        webuiInstaller.setMemory(WEBUI_MEMORY_IN_MB,MemoryUnit.MEGABYTES);
        webuiInstaller.setPort(WEBUI_PORT);
        webuiInstaller.setWarFile(new File(WEBUI_FILE));
        webuiInstaller.setServiceName(WEBUI_NAME);
        webuiInstaller.setManagementZone(MANAGEMENT_ZONE);
        webuiInstaller.addListeners(this.eventsListenersList);
        webuiInstaller.setIsLocalCloud(isLocalCloud);
        try {
          webuiInstaller.installWebService();
        }
 catch (        final ProcessingUnitAlreadyDeployedException e) {
          if (verbose) {
            logger.fine("Service " + WEBUI_NAME + " already installed");
            publishEvent("Service " + WEBUI_NAME + " already installed");
          }
        }
        if (waitForWebUi) {
          waitForManagementServices.add(webuiInstaller);
        }
 else {
          webuiInstaller.logServiceLocation();
        }
        final ManagementWebServiceInstaller restInstaller=new ManagementWebServiceInstaller();
        restInstaller.setAdmin(agent.getAdmin());
        restInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);
        restInstaller.setVerbose(verbose);
        restInstaller.setMemory(REST_MEMORY_IN_MB,MemoryUnit.MEGABYTES);
        restInstaller.setPort(REST_PORT);
        restInstaller.setWarFile(new File(REST_FILE));
        restInstaller.setServiceName(REST_NAME);
        restInstaller.setManagementZone(MANAGEMENT_ZONE);
        restInstaller.dependencies.add(CloudifyConstants.MANAGEMENT_SPACE_NAME);
        restInstaller.setWaitForConnection();
        restInstaller.addListeners(this.eventsListenersList);
        restInstaller.setIsLocalCloud(isLocalCloud);
        try {
          restInstaller.installWebService();
        }
 catch (        final ProcessingUnitAlreadyDeployedException e) {
          if (verbose) {
            logger.fine("Service " + REST_NAME + " already installed");
            publishEvent("Service " + REST_NAME + " already installed");
          }
        }
        waitForManagementServices.add(restInstaller);
      }
      for (      final AbstractManagementServiceInstaller managementServiceInstaller : waitForManagementServices) {
        managementServiceInstaller.waitForInstallation(adminFacade,agent,ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE,end),TimeUnit.MILLISECONDS);
        if (managementServiceInstaller instanceof ManagementSpaceServiceInstaller) {
          logger.fine("Writing cloud configuration to space.");
          if (verbose) {
            publishEvent("Writing cloud configuration to space.");
          }
          final GigaSpace gigaspace=managementSpaceInstaller.getGigaSpace();
          final CloudConfigurationHolder holder=new CloudConfigurationHolder(getCloudContents());
          gigaspace.write(holder);
          ((ISpaceProxy)gigaspace.getSpace()).close();
        }
      }
    }
  finally {
      connectionLogs.restoreConnectionErrors();
    }
  }
  finally {
    admin.close();
  }
}
