{
  final Admin admin=agent.getAdmin();
  createConditionLatch(timeout,timeunit).waitFor(new ConditionLatch.Predicate(){
    /** 
 * {@inheritDoc}
 */
    @Override public boolean isDone() throws CLIException, InterruptedException {
      boolean isDone=true;
      if (!isDone(admin.getLookupServices(),"LUS")) {
        if (verbose) {
          logger.info("Waiting for Lookup Service");
        }
        isDone=false;
      }
      if (!isDone(admin.getGridServiceManagers(),"GSM")) {
        if (verbose) {
          logger.info("Waiting for Grid Service Manager");
        }
        isDone=false;
      }
      if (admin.getElasticServiceManagers().isEmpty()) {
        if (verbose) {
          logger.info("Waiting for Elastic Service Manager");
        }
        isDone=false;
      }
      if (!verbose) {
        logger.info("Waiting for Management processes to start.");
      }
      return isDone;
    }
    private boolean isDone(    final Iterable<? extends AgentGridComponent> components,    final String serviceName){
      boolean found=false;
      for (      final AgentGridComponent component : components) {
        if (checkAgent(component)) {
          found=true;
          break;
        }
      }
      if (verbose) {
        for (        final Object component : components) {
          final GridServiceAgent agentThatStartedComponent=((AgentGridComponent)component).getGridServiceAgent();
          String agentUid=null;
          if (agentThatStartedComponent != null) {
            agentUid=agentThatStartedComponent.getUid();
          }
          String message="Detected " + serviceName + " management process "+ " started by agent "+ agentUid+ " ";
          if (!checkAgent((AgentGridComponent)component)) {
            message+=" expected agent " + agent.getUid();
          }
          logger.info(message);
        }
      }
      return found;
    }
    private boolean checkAgent(    final AgentGridComponent component){
      return agent.equals(component.getGridServiceAgent());
    }
  }
);
}
