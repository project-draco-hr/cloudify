{
  final Admin admin=agent.getAdmin();
  createConditionLatch(timeout,timeunit).waitFor(new ConditionLatch.Predicate(){
    /** 
 * {@inheritDoc}
 */
    @Override public boolean isDone() throws CLIException, InterruptedException {
      boolean isDone=true;
      if (!isDone(admin.getLookupServices(),"LUS")) {
        if (verbose) {
          logger.fine("Waiting for Lookup Service");
          publishEvent("Waiting for Lookup Service");
        }
        isDone=false;
      }
      if (!isDone(admin.getGridServiceManagers(),"GSM")) {
        if (verbose) {
          logger.fine("Waiting for Grid Service Manager");
          publishEvent("Waiting for Grid Service Manager");
        }
        isDone=false;
      }
      if (admin.getElasticServiceManagers().isEmpty()) {
        if (verbose) {
          logger.fine("Waiting for Elastic Service Manager");
          publishEvent("Waiting for Elastic Service Manager");
        }
        isDone=false;
      }
      if (verbose) {
        logger.fine("Waiting for Management processes to start.");
        publishEvent("Waiting for Management processes to start.");
      }
      if (!isDone) {
        publishEvent(null);
      }
      return isDone;
    }
    private boolean isDone(    final Iterable<? extends AgentGridComponent> components,    final String serviceName){
      boolean found=false;
      if (isLocalCloud) {
        if (components.iterator().hasNext()) {
          found=true;
        }
      }
 else {
        for (        final AgentGridComponent component : components) {
          if (checkAgent(component)) {
            found=true;
            break;
          }
        }
      }
      if (verbose) {
        if (!isLocalCloud) {
          for (          final Object component : components) {
            final GridServiceAgent agentThatStartedComponent=((AgentGridComponent)component).getGridServiceAgent();
            String agentUid=null;
            if (agentThatStartedComponent != null) {
              agentUid=agentThatStartedComponent.getUid();
            }
            String message="Detected " + serviceName + " management process started by agent "+ agentUid+ " ";
            if (!checkAgent((AgentGridComponent)component)) {
              message+=" expected agent " + agent.getUid();
            }
            logger.fine(message);
            publishEvent(message);
          }
        }
      }
      if (!verbose) {
        publishEvent(null);
      }
      return found;
    }
    private boolean checkAgent(    final AgentGridComponent component){
      return agent.equals(component.getGridServiceAgent());
    }
  }
);
}
