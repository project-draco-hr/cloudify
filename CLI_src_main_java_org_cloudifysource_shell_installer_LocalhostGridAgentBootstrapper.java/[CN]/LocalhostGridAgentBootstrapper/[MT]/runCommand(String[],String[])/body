{
  final File directory=new File(Environment.getHomeDirectory(),"/bin").getAbsoluteFile();
  command[command.length - 1]=new File(directory,command[command.length - 1]).getAbsolutePath();
  final List<String> commandLine=new ArrayList<String>();
  commandLine.addAll(Arrays.asList(command));
  commandLine.addAll(Arrays.asList(args));
  final String commandString=StringUtils.collectionToDelimitedString(commandLine," ");
  final File filename=createScript(commandString);
  final ProcessBuilder pb=new ProcessBuilder().command(filename.getAbsolutePath()).directory(directory);
  String gsaJavaOptions="-Xmx" + GSA_MEMORY_IN_MB + "m";
  if (autoShutdown) {
    gsaJavaOptions+=" " + AUTO_SHUTDOWN_COMMANDLINE_ARGUMENT;
  }
  String lusJavaOptions="-Xmx" + LUS_MEMORY_IN_MB + "m"+ " -D"+ LUS_PORT_CONTEXT_PROPERTY+ "="+ lusPort+ " -D"+ ZONES_PROPERTY+ "="+ MANAGEMENT_ZONE;
  String gsmJavaOptions="-Xmx" + GSM_MEMORY_IN_MB + "m"+ " -D"+ LUS_PORT_CONTEXT_PROPERTY+ "="+ lusPort+ " -D"+ GSM_EXCLUDE_GSC_ON_FAILED_INSTANCE+ "="+ GSM_EXCLUDE_GSC_ON_FAILED_INSTACE_BOOL+ " -D"+ ZONES_PROPERTY+ "="+ MANAGEMENT_ZONE;
  String esmJavaOptions="-Xmx" + ESM_MEMORY_IN_MB + "m"+ " -D"+ ZONES_PROPERTY+ "="+ MANAGEMENT_ZONE;
  String gscJavaOptions="";
  final Map<String,String> environment=pb.environment();
  if (lookupGroups != null) {
    environment.put("LOOKUPGROUPS",lookupGroups);
  }
  if (lookupLocators != null) {
    environment.put("LOOKUPLOCATORS",lookupLocators);
    final String disableMulticast="-Dcom.gs.multicast.enabled=false";
    gsaJavaOptions+=" " + disableMulticast;
    lusJavaOptions+=" " + disableMulticast;
    gsmJavaOptions+=" " + disableMulticast;
    esmJavaOptions+=" " + disableMulticast;
    gscJavaOptions+=disableMulticast;
  }
  if (nicAddress != null) {
    environment.put("NIC_ADDR",nicAddress);
  }
  environment.put("RMI_OPTIONS","");
  if (gsaZones != null) {
    gsaJavaOptions+=" -D" + ZONES_PROPERTY + "="+ gsaZones;
  }
  environment.put("GSA_JAVA_OPTIONS",gsaJavaOptions);
  environment.put("LUS_JAVA_OPTIONS",lusJavaOptions);
  environment.put("GSM_JAVA_OPTIONS",gsmJavaOptions);
  environment.put("ESM_JAVA_OPTIONS",esmJavaOptions);
  environment.put("GSC_JAVA_OPTIONS",gscJavaOptions);
  try {
    logger.fine("Executing command: " + commandString);
    final Process proc=pb.start();
    Thread.sleep(MIN_PROC_ERROR_TIME);
    try {
      if (proc.exitValue() != 0) {
        String errorMessage="Error while starting agent. " + "Please make sure that another agent is not already running. ";
        if (verbose) {
          errorMessage=errorMessage.concat("Command executed: " + commandString);
        }
        throw new CLIException(errorMessage);
      }
    }
 catch (    final IllegalThreadStateException e) {
      logger.fine("agent is starting...");
    }
  }
 catch (  final IOException e) {
    throw new CLIException("Error while starting agent",e);
  }
}
