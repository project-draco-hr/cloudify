{
  final AtomicReference<GridServiceAgent> agentOnLocalhost=new AtomicReference<GridServiceAgent>();
  createConditionLatch(timeout,timeunit).waitFor(new ConditionLatch.Predicate(){
    @Override public boolean isDone() throws CLIException, InterruptedException {
      boolean isDone=false;
      for (      GridServiceAgent agent : admin.getGridServiceAgents()) {
        if (checkAgent(agent)) {
          agentOnLocalhost.set(agent);
          isDone=true;
          break;
        }
      }
      if (!isDone) {
        if (existingAgent) {
          logger.info("Looking for an existing agent running on local machine");
        }
 else {
          logger.info("Waiting for the agent on the local machine to start.");
        }
      }
      return isDone;
    }
    private boolean checkAgent(    GridServiceAgent agent){
      final String agentNicAddress=agent.getMachine().getHostAddress();
      final String agentLookupGroups=getLookupGroups(agent);
      boolean checkLookupGroups=lookupGroups != null && lookupGroups.equals(agentLookupGroups);
      boolean checkNicAddress=(nicAddress != null && agentNicAddress.equals(nicAddress)) || isThisMyIpAddress(agentNicAddress);
      if (verbose) {
        String message="Discovered agent nic-address=" + agentNicAddress + " lookup-groups="+ agentLookupGroups+ ". ";
        if (!checkLookupGroups) {
          message+="Ignoring agent. Filter lookupGroups='" + lookupGroups + "', agent LookupGroups='"+ agentLookupGroups+ "'";
        }
        if (!checkNicAddress) {
          message+="Ignoring agent. Filter nicAddress='" + nicAddress + "' or local address, agent nicAddress='"+ agentNicAddress+ "'";
        }
        logger.info(message);
      }
      return checkLookupGroups && checkNicAddress;
    }
    /** 
 * @see http://stackoverflow.com/questions/2406341/how-to-check-if-an-ip-address-is-the-local-host-on-a-multi-homed-system
 */
    public boolean isThisMyIpAddress(    String ip){
      InetAddress addr;
      try {
        addr=InetAddress.getByName(ip);
      }
 catch (      UnknownHostException e) {
        return false;
      }
      if (addr.isAnyLocalAddress() || addr.isLoopbackAddress())       return true;
      try {
        return NetworkInterface.getByInetAddress(addr) != null;
      }
 catch (      SocketException e) {
        return false;
      }
    }
    private String getLookupGroups(    VirtualMachineAware component){
      String prefix="-Dcom.gs.jini_lus.groups=";
      return getCommandLineArgumentRemovePrefix(component,prefix);
    }
    private String getCommandLineArgumentRemovePrefix(    VirtualMachineAware component,    String prefix){
      String[] commandLineArguments=component.getVirtualMachine().getDetails().getInputArguments();
      String requiredArg=null;
      for (      final String arg : commandLineArguments) {
        if (arg.startsWith(prefix)) {
          requiredArg=arg;
        }
      }
      if (requiredArg != null) {
        return requiredArg.substring(prefix.length());
      }
      return null;
    }
  }
);
  return agentOnLocalhost.get();
}
