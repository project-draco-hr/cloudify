{
  List<String> applicationsList=null;
  boolean applicationsExist=false;
  try {
    if (!adminFacade.isConnected()) {
      throw new CLIException("Failed to fetch applications list. " + "Client is not connected to the rest server.");
    }
    applicationsList=adminFacade.getApplicationsList();
    applicationsExist=applicationsList.size() > 1;
  }
 catch (  final CLIException e) {
    if (!force) {
      throw new CLIStatusException(e,"failed_to_access_rest_before_teardown");
    }
    final String errorMessage="Failed to fetch the currently deployed applications list." + " Continuing teardown-localcloud.";
    if (verbose) {
      logger.log(Level.FINE,errorMessage,e);
      publishEvent(errorMessage + System.getProperty("line.separator") + e.toString());
    }
 else {
      logger.log(Level.FINE,errorMessage);
      publishEvent(errorMessage);
    }
    return;
  }
  if (applicationsExist && !force) {
    throw new CLIStatusException("apps_deployed_before_teardown_localcloud",applicationsList.toString());
  }
  String uninstallMessage=ShellUtils.getMessageBundle().getString("uninstalling_applications_before_teardown");
  publishEvent(uninstallMessage);
  for (  final String appName : applicationsList) {
    try {
      if (!appName.equals(MANAGEMENT_APPLICATION)) {
        logger.fine("Uninstalling application " + appName);
        Map<String,String> uninstallApplicationResponse=adminFacade.uninstallApplication(appName,(int)timeout);
        if (uninstallApplicationResponse.containsKey(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID)) {
          String pollingID=uninstallApplicationResponse.get(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID);
          ((RestAdminFacade)this.adminFacade).waitForLifecycleEvents(pollingID,(int)timeout);
        }
 else {
          publishEvent("Failed to retrieve lifecycle logs from rest. " + "Check logs for more details.");
        }
      }
    }
 catch (    final CLIException e) {
      final String errorMessage="Application " + appName + " faild to uninstall."+ " Continuing teardown-localcloud.";
      if (!force) {
        throw new CLIStatusException(e,"failed_to_uninstall_app_before_teardown",appName);
      }
      if (verbose) {
        logger.log(Level.FINE,errorMessage,e);
        publishEvent(errorMessage);
      }
 else {
        logger.log(Level.FINE,errorMessage);
      }
    }
  }
  if (applicationsExist) {
    waitForUninstallApplications(timeout,timeunit);
    publishEvent(ShellUtils.getMessageBundle().getString("all_apps_removed_before_teardown"));
    logger.fine(ShellUtils.getMessageBundle().getString("all_apps_removed_before_teardown"));
  }
}
