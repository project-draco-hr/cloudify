{
  final long endTime=System.currentTimeMillis() + unit.toMillis(duration);
  final String machineIp=agent.getMachine().getHostAddress();
  try {
    if (isStorageTemplateUsed()) {
      handleVolumeOnStopMachine(machineIp,duration,unit);
    }
  }
 catch (  StorageProvisioningException e) {
    logger.log(Level.SEVERE,"Failed detaching volume from machine with ip: " + machineIp + ". There may still be leaking volumes.",e);
  }
  Exception failedToShutdownAgentException=null;
  final GridServiceAgentStopRequestedEvent agentStopEvent=new GridServiceAgentStopRequestedEvent();
  agentStopEvent.setHostAddress(machineIp);
  agentStopEvent.setAgentUid(agent.getUid());
  agentEventListener.elasticGridServiceAgentProvisioningProgressChanged(agentStopEvent);
  logger.fine("Shutting down agent: " + agent + " on host: "+ machineIp);
  try {
    agent.shutdown();
    logger.fine("Agent on host: " + machineIp + " successfully shut down");
    final GridServiceAgentStoppedEvent agentStoppedEvent=new GridServiceAgentStoppedEvent();
    agentStoppedEvent.setHostAddress(machineIp);
    agentStoppedEvent.setAgentUid(agent.getUid());
    agentEventListener.elasticGridServiceAgentProvisioningProgressChanged(agentStoppedEvent);
  }
 catch (  final Exception e) {
    failedToShutdownAgentException=e;
    logger.log(Level.FINE,"Failed to shutdown agent on host: " + machineIp + ". Continuing with shutdown of machine.",e);
  }
  try {
    final MachineStopRequestedEvent machineStopEvent=new MachineStopRequestedEvent();
    machineStopEvent.setHostAddress(machineIp);
    machineEventListener.elasticMachineProvisioningProgressChanged(machineStopEvent);
    logger.fine("Cloudify Adapter is shutting down machine with ip: " + machineIp);
    final boolean shutdownSuccessful=this.cloudifyProvisioning.stopMachine(machineIp,duration,unit);
    logger.fine("Shutdown result of machine: " + machineIp + " was: "+ shutdownSuccessful);
    if (shutdownSuccessful) {
      final MachineStoppedEvent machineStoppedEvent=new MachineStoppedEvent();
      machineStoppedEvent.setHostAddress(machineIp);
      machineEventListener.elasticMachineProvisioningProgressChanged(machineStoppedEvent);
      while (agent.isDiscovered()) {
        Thread.sleep(DEFAULT_AGENT_DISCOVERY_INTERVAL);
        if (System.currentTimeMillis() > endTime && agent.isDiscovered()) {
          if (failedToShutdownAgentException != null) {
            throw new ElasticGridServiceAgentProvisioningException("Machine is stopped but agent [" + agent.getUid() + "] is still discovered."+ "Failed to shutdown agent:"+ failedToShutdownAgentException.getMessage(),failedToShutdownAgentException);
          }
          throw new ElasticGridServiceAgentProvisioningException("Machine is stopped but agent[" + agent.getUid() + "] is still discovered.");
        }
      }
    }
    return shutdownSuccessful;
  }
 catch (  final CloudProvisioningException e) {
    throw new ElasticMachineProvisioningException("Attempt to shutdown machine with IP: " + machineIp + " for agent with UID: "+ agent.getUid()+ " has failed with error: "+ e.getMessage(),e);
  }
}
