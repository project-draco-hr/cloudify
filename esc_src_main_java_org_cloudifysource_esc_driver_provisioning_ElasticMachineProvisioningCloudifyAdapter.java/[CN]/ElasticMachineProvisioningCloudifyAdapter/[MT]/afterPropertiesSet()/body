{
  logger=java.util.logging.Logger.getLogger(ElasticMachineProvisioningCloudifyAdapter.class.getName());
  final String cloudContents=properties.get(CloudifyConstants.ELASTIC_PROPERTIES_CLOUD_CONFIGURATION);
  if (cloudContents == null) {
    throw new IllegalArgumentException("Cloud configuration was not set!");
  }
  try {
    this.cloud=ServiceReader.readCloud(cloudContents);
    this.cloudTemplateName=properties.get(CloudifyConstants.ELASTIC_PROPERTIES_CLOUD_TEMPLATE_NAME);
    if (this.cloudTemplateName == null) {
      throw new BeanConfigurationException("Cloud template was not set!");
    }
    final CloudTemplate cloudTemplate=this.cloud.getTemplates().get(this.cloudTemplateName);
    if (cloudTemplate == null) {
      throw new BeanConfigurationException("The provided cloud template name: " + this.cloudTemplateName + " was not found in the cloud configuration");
    }
    logger.info("Remote Directory is: " + cloudTemplate.getRemoteDirectory());
    if (ServiceUtils.isWindows()) {
      logger.info("Windows machine - modifying local directory location");
      String localDirectoryName=cloudTemplate.getRemoteDirectory();
      localDirectoryName=localDirectoryName.replace("$","");
      if (localDirectoryName.startsWith("/")) {
        localDirectoryName=localDirectoryName.substring(1);
      }
      if (localDirectoryName.charAt(1) == '/') {
        localDirectoryName=localDirectoryName.substring(0,1) + ":" + localDirectoryName.substring(1);
      }
      logger.info("Modified local dir name is: " + localDirectoryName);
      cloud.getProvider().setLocalDirectory(localDirectoryName);
    }
 else {
      cloud.getProvider().setLocalDirectory(cloudTemplate.getRemoteDirectory());
    }
    try {
      this.cloudifyProvisioning=(ProvisioningDriver)Class.forName(this.cloud.getConfiguration().getClassName()).newInstance();
      if (cloudifyProvisioning instanceof ProvisioningDriverClassContextAware) {
        final ProvisioningDriverClassContext provisioningDriverContext=lazyCreateProvisioningDriverClassContext(cloudifyProvisioning);
        final ProvisioningDriverClassContextAware contextAware=(ProvisioningDriverClassContextAware)cloudifyProvisioning;
        contextAware.setProvisioningDriverClassContext(provisioningDriverContext);
      }
      this.cloudifyProvisioning.setConfig(cloud,cloudTemplateName,false);
    }
 catch (    final ClassNotFoundException e) {
      throw new BeanConfigurationException("Failed to load provisioning class for cloud: " + this.cloud.getName() + ". Class not found: "+ this.cloud.getConfiguration().getClassName(),e);
    }
catch (    final Exception e) {
      throw new BeanConfigurationException("Failed to load provisioning class for cloud: " + this.cloud.getName(),e);
    }
    this.lookupLocatorsString=createLocatorsString();
    logger.info("Locators string used for new instances will be: " + this.lookupLocatorsString);
  }
 catch (  final DSLException e) {
    logger.severe("Could not parse the provided cloud configuration: " + cloudContents + ": "+ e.getMessage());
    throw new BeanConfigurationException("Could not parse the prvided cloud configuration: " + cloudContents + ": "+ e.getMessage());
  }
}
