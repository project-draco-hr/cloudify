{
  logger=java.util.logging.Logger.getLogger(ElasticMachineProvisioningCloudifyAdapter.class.getName());
  final String cloudConfigDirectoryPath=properties.get(CloudifyConstants.ELASTIC_PROPERTIES_CLOUD_CONFIGURATION_DIRECTORY);
  if (cloudConfigDirectoryPath == null) {
    logger.severe("Missing cloud configuration property. Properties are: " + this.properties);
    throw new IllegalArgumentException("Cloud configuration directory was not set!");
  }
  try {
    final String cloudOverridesPerService=config.getCloudOverridesPerService();
    this.cloud=ServiceReader.readCloudFromDirectory(cloudConfigDirectoryPath,cloudOverridesPerService);
    this.cloudTemplateName=properties.get(CloudifyConstants.ELASTIC_PROPERTIES_CLOUD_TEMPLATE_NAME);
    if (this.cloudTemplateName == null) {
      throw new BeanConfigurationException("Cloud template was not set!");
    }
    addTemplatesToCloud(new File(cloudConfigDirectoryPath));
    final ComputeTemplate computeTemplate=this.cloud.getCloudCompute().getTemplates().get(this.cloudTemplateName);
    if (computeTemplate == null) {
      throw new BeanConfigurationException("The provided cloud template name: " + this.cloudTemplateName + " was not found in the cloud configuration");
    }
    logger.info("Remote Directory is: " + computeTemplate.getRemoteDirectory());
    if (computeTemplate.getFileTransfer() == FileTransferModes.CIFS) {
      logger.info("Windows machine - modifying local directory location");
      final String remoteDirName=computeTemplate.getRemoteDirectory();
      final String windowsLocalDirPath=getWindowsLocalDirPath(remoteDirName,computeTemplate.getLocalDirectory());
      logger.info("Modified local dir name is: " + windowsLocalDirPath);
      computeTemplate.setLocalDirectory(windowsLocalDirPath);
    }
 else {
      computeTemplate.setLocalDirectory(computeTemplate.getRemoteDirectory());
    }
    try {
      this.cloudifyProvisioning=(ProvisioningDriver)Class.forName(this.cloud.getConfiguration().getClassName()).newInstance();
      if (cloudifyProvisioning instanceof ProvisioningDriverClassContextAware) {
        final ProvisioningDriverClassContext provisioningDriverContext=lazyCreateProvisioningDriverClassContext(cloudifyProvisioning);
        final ProvisioningDriverClassContextAware contextAware=(ProvisioningDriverClassContextAware)cloudifyProvisioning;
        contextAware.setProvisioningDriverClassContext(provisioningDriverContext);
      }
      handleServiceCloudConfiguration();
      this.cloudifyProvisioning.setConfig(cloud,cloudTemplateName,false,serviceName);
      this.storageTemplateName=config.getStorageTemplateName();
      if (isStorageTemplateUsed()) {
        boolean privileged=computeTemplate.isPrivileged();
        if (!privileged) {
          logger.warning("Storage template defined but not running in privileged mode.");
          throw new StorageProvisioningException("Storage mounting requires running in privileged mode." + " This should be defined in the cloud's compute template.");
        }
        logger.info("creating storage provisioning driver.");
        this.storageProvisioning=(StorageProvisioningDriver)Class.forName(this.cloud.getConfiguration().getStorageClassName()).newInstance();
        this.storageProvisioning.setComputeContext(cloudifyProvisioning.getComputeContext());
        this.storageProvisioning.setConfig(cloud,this.cloudTemplateName,this.storageTemplateName);
        logger.info("storage provisioning driver created successfully.");
      }
    }
 catch (    final ClassNotFoundException e) {
      throw new BeanConfigurationException("Failed to load provisioning class for cloud: " + this.cloud.getName() + ". Class not found: "+ this.cloud.getConfiguration().getClassName(),e);
    }
catch (    final Exception e) {
      throw new BeanConfigurationException("Failed to load provisioning class for cloud: " + this.cloud.getName(),e);
    }
    this.lookupLocatorsString=createLocatorsString();
    logger.info("Locators string used for new instances will be: " + this.lookupLocatorsString);
  }
 catch (  final DSLException e) {
    logger.severe("Could not parse the provided cloud configuration from : " + cloudConfigDirectoryPath + ": "+ e.getMessage());
    throw new BeanConfigurationException("Could not parse the prvided cloud configuration: " + cloudConfigDirectoryPath + ": "+ e.getMessage(),e);
  }
}
