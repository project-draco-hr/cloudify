{
  logger.info("Cloudify Adapter is starting a new machine with zones " + zones.getZones() + " and reservation id "+ reservationId);
  final long end=System.currentTimeMillis() + unit.toMillis(duration);
  try {
    configureDrivers();
  }
 catch (  final CloudProvisioningException e) {
    throw new ElasticMachineProvisioningException("Failed to configure cloud driver for first use: " + e.getMessage(),e);
  }
catch (  final StorageProvisioningException e) {
    throw new ElasticMachineProvisioningException("Failed to configure storage driver for first use: " + e.getMessage(),e);
  }
  logger.info("Calling provisioning implementation for new machine");
  MachineDetails machineDetails;
  final ZonesConfig defaultZones=config.getGridServiceAgentZones();
  logger.fine("default zones = " + defaultZones.getZones());
  if (!defaultZones.isSatisfiedBy(zones)) {
    throw new IllegalArgumentException("The specified zones " + zones + " does not satisfy the configuration zones "+ defaultZones);
  }
  final ComputeTemplate template=cloud.getCloudCompute().getTemplates().get(this.cloudTemplateName);
  final String locationId=findLocationIdInZones(zones,template);
  fireMachineStartEvent(locationId);
  try {
    final MachineDetails previousMachineDetails=getPreviousMachineDetailsFromFailedGSA(failedAgent);
    machineDetails=provisionMachine(locationId,reservationId,duration,unit,previousMachineDetails);
    if (!machineDetails.isAgentRunning()) {
      validateMachineIp(machineDetails);
    }
    if (machineDetails != null && machineDetails.getInstallerConfiguration() == null) {
      machineDetails.setInstallerConfigutation(template.getInstaller());
    }
  }
 catch (  final Exception e) {
    throw new ElasticMachineProvisioningException("Failed to provision machine: " + e.getMessage(),e);
  }
  logger.info("Machine was provisioned by implementation. Machine is: " + machineDetails);
  String machineIp;
  if (cloud.getConfiguration().isConnectToPrivateIp()) {
    machineIp=machineDetails.getPrivateAddress();
  }
 else {
    machineIp=machineDetails.getPublicAddress();
  }
  if (machineIp == null) {
    throw new IllegalStateException("The IP of the new machine is null! Machine Details are: " + machineDetails + " .");
  }
  fireMachineStartedEvent(machineDetails,machineIp);
  fireGSAStartRequestedEvent(machineIp);
  final String volumeId=null;
  try {
    checkForProvisioningTimeout(end,machineDetails);
    if (machineDetails.isAgentRunning()) {
      logger.info("Machine provisioning provided a machine and indicated that an agent is already running");
    }
 else {
      logger.info("Cloudify Adapter is installing Cloudify agent with reservation id " + reservationId + " on "+ machineIp);
      installAndStartAgent(machineDetails,reservationId,end);
      checkForProvisioningTimeout(end,machineDetails);
    }
    logger.info("Cloudify adapter is waiting for GSA on host: " + machineIp + " with reservation id: "+ reservationId+ " to become available");
    final GridServiceAgent gsa=waitForGsa(machineIp,end,reservationId);
    if (gsa == null) {
      throw new TimeoutException("New machine was provisioned and Cloudify was installed, " + "but a GSA was not discovered on the new machine: " + machineDetails);
    }
    agentEventListener.elasticGridServiceAgentProvisioningProgressChanged(new GridServiceAgentStartedEvent(machineIp,gsa.getUid()));
    if (gsa.getVirtualMachine().getDetails().getEnvironmentVariables().get(CloudifyConstants.GIGASPACES_CLOUD_TEMPLATE_NAME) == null) {
      throw new ElasticGridServiceAgentProvisioningException("an agent was started. but the property " + CloudifyConstants.GIGASPACES_CLOUD_TEMPLATE_NAME + " was missing from its environment variables.");
    }
    final Object context=machineDetails;
    return new StartedGridServiceAgent(gsa,context);
  }
 catch (  final ElasticMachineProvisioningException e) {
    logger.info("ElasticMachineProvisioningException occurred, " + e.getMessage());
    logger.info(ExceptionUtils.getFullStackTrace(e));
    handleExceptionAfterMachineCreated(machineIp,volumeId,machineDetails,end,reservationId);
    throw e;
  }
catch (  final ElasticGridServiceAgentProvisioningException e) {
    logger.info("ElasticGridServiceAgentProvisioningException occurred, " + e.getMessage());
    logger.info(ExceptionUtils.getFullStackTrace(e));
    handleExceptionAfterMachineCreated(machineIp,volumeId,machineDetails,end,reservationId);
    throw e;
  }
catch (  final TimeoutException e) {
    logger.info("TimeoutException occurred, " + e.getMessage());
    logger.info(ExceptionUtils.getFullStackTrace(e));
    handleExceptionAfterMachineCreated(machineIp,volumeId,machineDetails,end,reservationId);
    throw e;
  }
catch (  final InterruptedException e) {
    logger.info("InterruptedException occurred, " + e.getMessage());
    logger.info(ExceptionUtils.getFullStackTrace(e));
    handleExceptionAfterMachineCreated(machineIp,volumeId,machineDetails,end,reservationId);
    throw e;
  }
catch (  final Throwable e) {
    logger.info("Unexpected exception occurred, " + e.getMessage());
    logger.info(ExceptionUtils.getFullStackTrace(e));
    handleExceptionAfterMachineCreated(machineIp,volumeId,machineDetails,end,reservationId);
    throw new IllegalStateException("Unexpected exception during machine provisioning",e);
  }
}
