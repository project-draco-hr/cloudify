{
  final int externalProcessMemoryInMB=512;
  final int containerMemoryInMB=128;
  final int reservedMemoryCapacityPerMachineInMB=256;
  final ElasticStatelessProcessingUnitDeployment deployment=new ElasticStatelessProcessingUnitDeployment(serviceFile).memoryCapacityPerContainer(externalProcessMemoryInMB,MemoryUnit.MEGABYTES).addCommandLineArgument("-Xmx" + containerMemoryInMB + "m").addCommandLineArgument("-Xms" + containerMemoryInMB + "m").addContextProperty("com.gs.application",applicationName).name(serviceName).sharedMachineProvisioning(SHARED_ISOLATION_ID,new DiscoveredMachineProvisioningConfigurer().addGridServiceAgentZone(zone).reservedMemoryCapacityPerMachine(reservedMemoryCapacityPerMachineInMB,MemoryUnit.MEGABYTES).create());
  if (cloud == null) {
    if (isLocalCloud()) {
      deployment.scale(new ManualCapacityScaleConfigurer().memoryCapacity(externalProcessMemoryInMB * numberOfInstances,MemoryUnit.MEGABYTES).create());
    }
 else {
      deployment.scale(new EagerScaleConfigurer().atMostOneContainerPerMachine().create());
    }
  }
 else {
    long cloudExternalProcessMemoryInMB=calculateExternalProcessMemory(cloud);
    CloudMachineProvisioningConfig config=CloudDSLToCloudMachineProvisioningConfig.convert(cloud);
    String locators=extractLocators(admin);
    config.setLocator(locators);
    setDedicatedMachineProvisioning(deployment,config);
    deployment.memoryCapacityPerContainer((int)cloudExternalProcessMemoryInMB,MemoryUnit.MEGABYTES);
    deployment.scale(new ManualCapacityScaleConfigurer().memoryCapacity((int)cloudExternalProcessMemoryInMB * numberOfInstances,MemoryUnit.MEGABYTES).atMostOneContainerPerMachine().create());
  }
  setContextProperties(deployment,contextProperties);
  verifyEsmExistsInCluster();
  deployAndWait(serviceName,deployment);
}
