{
  if (timeout < 0) {
    throw new TimeoutException("Uploading files to host " + host + " timed out");
  }
  final long end=System.currentTimeMillis() + unit.toMillis(timeout);
  final FileSystemOptions opts=new FileSystemOptions();
  FileSystemManager createdManager=null;
  String target=null;
switch (details.getFileTransferMode()) {
case SCP:
    createdManager=createRemoteSSHFileSystem(details.getKeyFile(),opts,details);
  final String userDetails;
if (details.getPassword() != null && details.getPassword().length() > 0) {
  userDetails=details.getUsername() + ":" + details.getPassword();
}
 else {
  userDetails=details.getUsername();
}
target=new java.net.URI("sftp",userDetails,host,SSH_PORT,details.getRemoteDir(),null,null).toASCIIString();
break;
case CIFS:
checkConnection(host,CIFS_PORT,timeout,unit);
createdManager=VFS.getManager();
target=new java.net.URI("smb",details.getUsername() + ":" + details.getPassword(),host,CIFS_PORT,details.getRemoteDir(),null,null).toASCIIString();
break;
default :
throw new UnsupportedOperationException("Unsupported Remote File System: " + details.getFileTransferMode().toString());
}
String localDirPath=details.getLocalDir();
if (details.isLus()) {
if (details.getCloudFile() == null) {
throw new IllegalArgumentException("While bootstrapping a management machine, cloud file is null");
}
localDirPath=details.getCloudFile().getParentFile().getAbsolutePath();
}
logger.fine("Setting local directory for file upload to: " + localDirPath);
final FileSystemManager mng=createdManager;
mng.setLogger(org.apache.commons.logging.LogFactory.getLog(logger.getName()));
final FileObject localDir=mng.resolveFile("file:" + localDirPath);
final FileObject remoteDir=resolveTargetDirectory(opts,target,mng);
logger.fine("Copying files to: " + target + " from local dir: "+ localDir.getName().getPath()+ " excluding "+ excludedFiles.toString());
try {
remoteDir.copyFrom(localDir,new FileSelector(){
@Override public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
if (excludedFiles.contains(fileInfo.getFile().getName().getBaseName())) {
logger.fine(fileInfo.getFile().getName().getBaseName() + " excluded");
return false;
}
final FileObject remoteFile=mng.resolveFile(remoteDir,localDir.getName().getRelativeName(fileInfo.getFile().getName()));
if (!remoteFile.exists()) {
logger.fine(fileInfo.getFile().getName().getBaseName() + " missing on server");
return true;
}
if (fileInfo.getFile().getType() == FileType.FILE) {
final long remoteSize=remoteFile.getContent().getSize();
final long localSize=fileInfo.getFile().getContent().getSize();
final boolean res=localSize != remoteSize;
if (res) {
logger.fine(fileInfo.getFile().getName().getBaseName() + " different on server");
}
return res;
}
return false;
}
@Override public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
return true;
}
}
);
if (details.getCloudFile() != null) {
final FileObject cloudFileParentObject=mng.resolveFile(details.getCloudFile().getParentFile().getAbsolutePath());
final FileObject cloudFileObject=mng.resolveFile(details.getCloudFile().getAbsolutePath());
remoteDir.copyFrom(cloudFileParentObject,new FileSelector(){
@Override public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
return true;
}
@Override public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
return fileInfo.getFile().equals(cloudFileObject);
}
}
);
}
logger.fine("Copying files to: " + target + " completed.");
}
  finally {
mng.closeFileSystem(remoteDir.getFileSystem());
mng.closeFileSystem(localDir.getFileSystem());
}
if (end < System.currentTimeMillis()) {
throw new TimeoutException("Uploading files to host " + host + " timed out");
}
}
