{
  if (timeout < 0) {
    throw new TimeoutException("Uploading files to host " + host + " timed out");
  }
  long end=System.currentTimeMillis() + unit.toMillis(timeout);
  final FileSystemOptions opts=new FileSystemOptions();
  SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(opts,"no");
  SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(opts,false);
  if (keyFile != null && keyFile.length() > 0) {
    final File temp=new File(keyFile);
    if (!temp.exists()) {
      throw new FileNotFoundException("Could not find key file: " + temp + ". KeyFile "+ keyFile+ " that was passed in the installation Details does not exist");
    }
    SftpFileSystemConfigBuilder.getInstance().setIdentities(opts,new File[]{temp});
  }
  SftpFileSystemConfigBuilder.getInstance().setTimeout(opts,SFTP_DISCONNECT_DETECTION_TIMEOUT_MILLIS);
  final FileSystemManager mng=VFS.getManager();
  mng.setLogger(org.apache.commons.logging.LogFactory.getLog(logger.getName()));
  final FileObject localDir=mng.resolveFile("file:" + srcDir);
  String scpTarget=null;
  if (password != null && password.length() > 0) {
    scpTarget="sftp://" + username + ":"+ password+ "@"+ host+ toDir;
  }
 else {
    scpTarget="sftp://" + username + "@"+ host+ toDir;
  }
  final FileObject remoteDir=mng.resolveFile(scpTarget,opts);
  logger.fine("Copying files to: " + scpTarget + " from local dir: "+ localDir.getName().getPath()+ " excluding "+ excludedFiles.toString());
  try {
    remoteDir.copyFrom(localDir,new FileSelector(){
      @Override public boolean includeFile(      final FileSelectInfo fileInfo) throws Exception {
        if (excludedFiles.contains(fileInfo.getFile().getName().getBaseName())) {
          logger.fine(fileInfo.getFile().getName().getBaseName() + " excluded");
          return false;
        }
        final FileObject remoteFile=mng.resolveFile(remoteDir,localDir.getName().getRelativeName(fileInfo.getFile().getName()));
        if (!remoteFile.exists()) {
          logger.fine(fileInfo.getFile().getName().getBaseName() + " missing on server");
          return true;
        }
        if (fileInfo.getFile().getType().equals(FileType.FILE)) {
          final long remoteSize=remoteFile.getContent().getSize();
          final long localSize=fileInfo.getFile().getContent().getSize();
          final boolean res=(localSize != remoteSize);
          if (res) {
            logger.fine(fileInfo.getFile().getName().getBaseName() + " different on server");
          }
          return res;
        }
        return false;
      }
      @Override public boolean traverseDescendents(      final FileSelectInfo fileInfo) throws Exception {
        return true;
      }
    }
);
    if (cloudFile != null) {
      final FileObject cloudFileParentObject=mng.resolveFile(cloudFile.getParentFile().getAbsolutePath());
      final FileObject cloudFileObject=mng.resolveFile(cloudFile.getAbsolutePath());
      remoteDir.copyFrom(cloudFileParentObject,new FileSelector(){
        @Override public boolean traverseDescendents(        FileSelectInfo fileInfo) throws Exception {
          return true;
        }
        @Override public boolean includeFile(        FileSelectInfo fileInfo) throws Exception {
          return (fileInfo.getFile().equals(cloudFileObject));
        }
      }
);
    }
    logger.fine("Copying files to: " + scpTarget + " completed.");
  }
  finally {
    mng.closeFileSystem(remoteDir.getFileSystem());
    mng.closeFileSystem(localDir.getFileSystem());
  }
  if (end < System.currentTimeMillis()) {
    throw new TimeoutException("Uploading files to host " + host + " timed out");
  }
}
