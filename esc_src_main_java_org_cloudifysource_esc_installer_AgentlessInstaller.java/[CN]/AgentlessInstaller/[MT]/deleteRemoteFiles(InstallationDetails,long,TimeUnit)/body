{
  final String host=details.isConnectedToPrivateIp() ? details.getPrivateIp() : details.getPublicIp();
  if (timeout < 0) {
    throw new TimeoutException("Uploading files to host " + host + " timed out");
  }
  final long end=System.currentTimeMillis() + unit.toMillis(timeout);
  final FileSystemOptions opts=new FileSystemOptions();
  FileSystemManager createdManager=null;
  String target=null;
switch (details.getFileTransferMode()) {
case SCP:
    try {
      createdManager=createRemoteSSHFileSystem(details.getKeyFile(),opts,details);
    }
 catch (    final FileSystemException e) {
      throw new InstallerException("Failed to load remote file system: " + e.getMessage(),e);
    }
catch (    final FileNotFoundException e) {
      throw new InstallerException("Failed to load remote file system: " + e.getMessage(),e);
    }
  final String userDetails;
if (details.getPassword() != null && details.getPassword().length() > 0) {
  userDetails=details.getUsername() + ":" + details.getPassword();
}
 else {
  userDetails=details.getUsername();
}
try {
target=new java.net.URI("sftp",userDetails,host,SSH_PORT,details.getRemoteDir(),null,null).toASCIIString();
}
 catch (final URISyntaxException e) {
throw new InstallerException("Failed to create URI for remote file system",e);
}
break;
case CIFS:
checkConnection(host,CIFS_PORT,timeout,unit);
try {
createdManager=VFS.getManager();
}
 catch (final FileSystemException e) {
throw new InstallerException("Failed to load remote file system: " + e.getMessage(),e);
}
try {
target=new java.net.URI("smb",details.getUsername() + ":" + details.getPassword(),host,CIFS_PORT,details.getRemoteDir(),null,null).toASCIIString();
}
 catch (final URISyntaxException e) {
throw new InstallerException("Failed to create URI for remote file system",e);
}
break;
default :
throw new UnsupportedOperationException("Unsupported Remote File System: " + details.getFileTransferMode().toString());
}
final FileSystemManager mng=createdManager;
mng.setLogger(org.apache.commons.logging.LogFactory.getLog(logger.getName()));
FileObject remoteDir;
try {
remoteDir=resolveTargetDirectory(opts,target,mng);
}
 catch (final FileSystemException e) {
throw new InstallerException("Failed to load remote location (" + target + "): "+ e.getMessage(),e);
}
logger.fine("deleting remote dir: " + remoteDir.getName().getPath());
try {
remoteDir.delete(new FileSelector(){
@Override public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
return true;
}
@Override public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
return true;
}
}
);
}
 catch (final FileSystemException e) {
throw new InstallerException("Failed to delete remote directory files: " + e.getMessage(),e);
}
 finally {
mng.closeFileSystem(remoteDir.getFileSystem());
}
if (end < System.currentTimeMillis()) {
throw new TimeoutException("Uploading files to host " + host + " timed out");
}
}
