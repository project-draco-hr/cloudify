{
  int cleanupTimeoutMillis=uploadRepo.getCleanupTimeoutMillis();
  uploadRepo.resetTimeout(TEST_CLEANUP_TIMOUT_MILLIS);
  try {
    File file=new File(TEST_FILE_PATH);
    UploadResponse uploadResponse=uploadFile(file);
    String uploadKey=uploadResponse.getUploadKey();
    System.out.println("uploaded file with key " + uploadKey);
    Assert.assertNotNull(uploadKey);
    File uploadedFile=assertUploadedFileExists(file,uploadKey);
    String parentPath=uploadedFile.getParentFile().getAbsolutePath();
    System.out.println("sleeping for " + (TEST_CLEANUP_TIMOUT_MILLIS * 3) / DateUtils.MILLIS_PER_SECOND + " seconds");
    Thread.sleep(TEST_CLEANUP_TIMOUT_MILLIS * 3);
    File expectedToBeDeletedFolder=new File(parentPath);
    System.out.println("validate that the folder [" + expectedToBeDeletedFolder.getAbsolutePath() + "] was deleted:");
    boolean exists=expectedToBeDeletedFolder.exists();
    System.out.println("The folder [" + expectedToBeDeletedFolder.getAbsolutePath() + "] (expected to be deleted at this point) "+ (exists ? " exists" : " not exists."));
    Assert.assertFalse(exists);
  }
  finally {
    System.out.println("setting the cleanup timeout back to " + cleanupTimeoutMillis + " millis");
    uploadRepo.resetTimeout(cleanupTimeoutMillis);
    System.out.println("timeout has been reset to " + uploadRepo.getCleanupTimeoutMillis() + " milliseconds");
  }
}
