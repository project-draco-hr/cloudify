{
  final long end=System.currentTimeMillis() + timeunit.toMillis(timeout);
  int serviceShutDownEventsCount=0;
  int calcedNumberOfInstances=plannedNumberOfInstances;
  final String pollingURL="processingUnits/Names/" + ServiceUtils.getAbsolutePUName(applicationName,serviceName);
  waitForServicePU(applicationName,serviceName,pollingURL,timeoutErrorMessage,PROCESSINGUNIT_LOOKUP_TIMEOUT,timeunit);
  logger.info(MessageFormat.format(messages.getString("deploying_service"),serviceName));
  int currentNumberOfNonUSMInstances=-1;
  int currentNumberOfRunningUSMInstances=-1;
  boolean statusChanged=false;
  while (System.currentTimeMillis() < end) {
    Map<String,Object> serviceStatusMap=null;
    try {
      serviceStatusMap=client.getAdminData(pollingURL);
    }
 catch (    final ErrorStatusException e) {
      throw new CLIStatusException(e,e.getReasonCode(),e.getArgs());
    }
catch (    final RestException e) {
      throw new CLIException(e);
    }
    if (serviceStatusMap.containsKey("ClusterSchema") && "partitioned-sync2backup".equals(serviceStatusMap.get("ClusterSchema"))) {
      calcedNumberOfInstances=Integer.valueOf((String)serviceStatusMap.get("TotalNumberOfInstances"));
    }
    boolean serviceInstanceExists=false;
    int serviceInstancesSize=0;
    if (serviceStatusMap.containsKey("Instances-Size")) {
      serviceInstancesSize=(Integer)serviceStatusMap.get("Instances-Size");
      if (!serviceStatusMap.get("Instances-Size").equals(0)) {
        serviceInstanceExists=true;
      }
    }
    if (serviceInstanceExists && isUSMService(applicationName,serviceName)) {
      final int actualNumberOfUSMServicesWithRunningState=getNumberOfUSMServicesWithRunningState(serviceName,applicationName,serviceInstancesSize);
      if (currentNumberOfRunningUSMInstances != actualNumberOfUSMServicesWithRunningState && actualNumberOfUSMServicesWithRunningState != 0) {
        currentNumberOfRunningUSMInstances=actualNumberOfUSMServicesWithRunningState;
        statusChanged=true;
      }
 else {
        statusChanged=false;
      }
    }
 else {
      final int actualNumberOfInstances=serviceInstancesSize;
      if (actualNumberOfInstances != currentNumberOfNonUSMInstances && actualNumberOfInstances != 0) {
        currentNumberOfNonUSMInstances=actualNumberOfInstances;
        statusChanged=true;
      }
 else {
        statusChanged=false;
      }
    }
    serviceShutDownEventsCount=handleEventLogs(serviceName,applicationName,calcedNumberOfInstances,serviceShutDownEventsCount);
    if (serviceInstancesSize == 0) {
      printStatusMessage(calcedNumberOfInstances,serviceInstancesSize,statusChanged);
    }
 else     if (calcedNumberOfInstances < currentNumberOfNonUSMInstances || calcedNumberOfInstances < currentNumberOfRunningUSMInstances) {
      throw new CLIException(MessageFormat.format(messages.getString("number_of_instances_exceeded_planned"),calcedNumberOfInstances,Math.max(currentNumberOfNonUSMInstances,currentNumberOfRunningUSMInstances)));
    }
 else     if (serviceInstancesSize > 0) {
      if (isUSMService(applicationName,serviceName)) {
        currentNumberOfRunningUSMInstances=getNumberOfUSMServicesWithRunningState(serviceName,applicationName,serviceInstancesSize);
        printStatusMessage(calcedNumberOfInstances,currentNumberOfRunningUSMInstances,statusChanged);
        if (currentNumberOfRunningUSMInstances == calcedNumberOfInstances) {
          return true;
        }
      }
 else {
        printStatusMessage(calcedNumberOfInstances,currentNumberOfNonUSMInstances,statusChanged);
        if (calcedNumberOfInstances == currentNumberOfNonUSMInstances) {
          return true;
        }
      }
    }
    Thread.sleep(POLLING_INTERVAL);
  }
  throw new TimeoutException(timeoutErrorMessage);
}
