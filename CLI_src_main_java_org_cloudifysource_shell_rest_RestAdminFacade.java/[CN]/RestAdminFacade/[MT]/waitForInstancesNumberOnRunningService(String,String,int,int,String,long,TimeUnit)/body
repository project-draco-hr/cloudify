{
  final long end=System.currentTimeMillis() + timeunit.toMillis(timeout);
  final boolean ascending=plannedNumberOfInstances > initialNumberOfInstances;
  int serviceShutDownEventsCount=0;
  final String pollingURL="processingUnits/Names/" + ServiceUtils.getAbsolutePUName(applicationName,serviceName);
  waitForServicePU(applicationName,serviceName,pollingURL,timeoutErrorMessage,PROCESSINGUNIT_LOOKUP_TIMEOUT,timeunit);
  if (ascending) {
    logger.info(MessageFormat.format(messages.getString("deploying_service"),serviceName));
  }
 else {
    logger.info(MessageFormat.format(messages.getString("removing_service_instances"),serviceName));
  }
  int currentNumberOfRunningUSMInstances=ascending ? -1 : Integer.MAX_VALUE;
  boolean statusChanged=false;
  boolean firstTime=true;
  while (System.currentTimeMillis() < end) {
    Map<String,Object> serviceStatusMap=null;
    try {
      serviceStatusMap=client.getAdminData(pollingURL);
    }
 catch (    final ErrorStatusException e) {
      throw new CLIStatusException(e,e.getReasonCode(),e.getArgs());
    }
catch (    final RestException e) {
      throw new CLIException(e);
    }
    int targetNumberOfInstances=plannedNumberOfInstances;
    if ("partitioned-sync2backup".equals(serviceStatusMap.get("ClusterSchema"))) {
      targetNumberOfInstances=Integer.valueOf((String)serviceStatusMap.get("TotalNumberOfInstances"));
    }
    if (ascending) {
      if (!serviceStatusMap.get("Instances-Size").equals(0) && isUSMService(applicationName,serviceName)) {
        final int actualNumberOfUSMServicesWithRunningState=getNumberOfUSMServicesWithRunningState(serviceName,applicationName,(Integer)serviceStatusMap.get("Instances-Size"));
        if (currentNumberOfRunningUSMInstances != actualNumberOfUSMServicesWithRunningState && actualNumberOfUSMServicesWithRunningState != 0) {
          currentNumberOfRunningUSMInstances=actualNumberOfUSMServicesWithRunningState;
          statusChanged=true;
        }
 else {
          statusChanged=false;
        }
      }
    }
 else {
      final int actualNumberOfUSMServicesWithRunningState=(Integer)serviceStatusMap.get("Instances-Size");
      if (currentNumberOfRunningUSMInstances != actualNumberOfUSMServicesWithRunningState && actualNumberOfUSMServicesWithRunningState != 0) {
        currentNumberOfRunningUSMInstances=actualNumberOfUSMServicesWithRunningState;
        statusChanged=true;
      }
 else {
        statusChanged=false;
      }
    }
    serviceShutDownEventsCount=handleEventLogsInSetInstances(serviceName,applicationName,targetNumberOfInstances,serviceShutDownEventsCount,firstTime);
    firstTime=false;
    if ((Integer)serviceStatusMap.get("Instances-Size") == 0) {
      printStatusMessage(targetNumberOfInstances,(Integer)serviceStatusMap.get("Instances-Size"),statusChanged);
    }
 else     if (ascending && targetNumberOfInstances < currentNumberOfRunningUSMInstances) {
      throw new CLIException(MessageFormat.format(messages.getString("number_of_instances_exceeded_planned"),targetNumberOfInstances,currentNumberOfRunningUSMInstances));
    }
 else     if (!ascending && targetNumberOfInstances > currentNumberOfRunningUSMInstances) {
      throw new CLIException(MessageFormat.format(messages.getString("number_of_instances_removed_exceeded_planned"),targetNumberOfInstances,currentNumberOfRunningUSMInstances));
    }
 else     if ((Integer)serviceStatusMap.get("Instances-Size") > 0) {
      if (isUSMService(applicationName,serviceName)) {
        printStatusMessage(targetNumberOfInstances,currentNumberOfRunningUSMInstances,statusChanged);
        if (currentNumberOfRunningUSMInstances == targetNumberOfInstances) {
          handleEventLogsInSetInstances(serviceName,applicationName,targetNumberOfInstances,serviceShutDownEventsCount,firstTime);
          return true;
        }
      }
    }
    Thread.sleep(POLLING_INTERVAL);
  }
  throw new TimeoutException(timeoutErrorMessage);
}
