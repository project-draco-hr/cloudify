{
  logger.info("Installing service for application: " + applicationName + ". Async install: "+ async+ ". Number of services: "+ this.services.size());
  for (  final Service service : services) {
    logger.info("Installing service: " + service.getName() + " for application: "+ applicationName);
    service.getCustomProperties().put("usmJarPath",Environment.getHomeDirectory() + "/lib/platform/usm");
    final Properties contextProperties=createServiceContextProperties(service,applicationName,async,cloud);
    final String serviceName=service.getName();
    String absolutePUName=ServiceUtils.getAbsolutePUName(applicationName,serviceName);
    File serviceDirectory=new File(appDir,serviceName);
    File serviceCloudConfiguration=new File(serviceDirectory,CloudifyConstants.SERVICE_CLOUD_CONFIGURATION_FILE_NAME);
    byte[] serviceCloudConfigurationContents=null;
    if (serviceCloudConfiguration.exists()) {
      serviceCloudConfigurationContents=FileUtils.readFileToByteArray(serviceCloudConfiguration);
      FileUtils.forceDelete(serviceCloudConfiguration);
    }
    boolean found=false;
    try {
      File packedFile=Packager.pack(serviceDirectory,absolutePUName);
      result.getApplicationFile().delete();
      packedFile.deleteOnExit();
      logger.info("Deploying PU: " + absolutePUName + ". File: "+ packedFile+ ". Properties: "+ contextProperties);
      final String templateName=(service.getCompute() == null ? null : service.getCompute().getTemplate());
      controller.deployElasticProcessingUnit(absolutePUName,applicationName,serviceName,packedFile,contextProperties,templateName,true,0,TimeUnit.SECONDS,serviceCloudConfigurationContents);
      try {
        FileUtils.deleteDirectory(packedFile.getParentFile());
      }
 catch (      IOException ioe) {
        logger.warning("Failed to delete temporary directory: " + packedFile.getParentFile());
      }
      if (!async) {
        logger.info("Waiting for instance of service: " + serviceName + " of application: "+ applicationName);
        boolean instanceFound=controller.waitForServiceInstance(applicationName,serviceName,SERVICE_INSTANCE_STARTUP_TIMEOUT_MINUTES,TimeUnit.MINUTES);
        if (!instanceFound) {
          throw new TimeoutException("Service " + serviceName + " of application "+ applicationName+ " was installed, but no instance of the service has started after "+ SERVICE_INSTANCE_STARTUP_TIMEOUT_MINUTES+ " minutes.");
        }
        logger.info("Found instance of: " + serviceName);
      }
      found=true;
      logger.fine("service " + service + " deployed.");
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,"Failed to install service: " + serviceName + " of application: "+ applicationName+ ". Application installation will halt. "+ "Some services may already have started, and should be shutdown manually. Error was: "+ e.getMessage(),e);
      return;
    }
    if (!found) {
      logger.severe("Failed to find an instance of service: " + serviceName + " while installing application "+ applicationName+ ". Application installation will stop. Some services may have been installed!");
      return;
    }
  }
}
