{
  final Location zone=node.getLocation();
  final Location region=zone.getParent();
  WindowsApi winApi=EC2Client.class.cast(context.unwrap(EC2ApiMetadata.CONTEXT_TOKEN).getApi()).getWindowsApiForRegion(region.getId()).get();
  final String id=node.getId();
  String key;
  try {
    key=FileUtils.readFileToString(pemFile);
  }
 catch (  final IOException e) {
    throw new CloudProvisioningException("Failed to read key file: " + pemFile,e);
  }
  final String amiId=id.split("/")[1];
  while (System.currentTimeMillis() < end) {
    logger.fine("Reading Windows password");
    final PasswordData passwordData=winApi.getPasswordDataInRegion(region.getId(),amiId);
    if (passwordData == null || passwordData.getPasswordData() == null || passwordData.getPasswordData().isEmpty()) {
      Thread.sleep(PASSWORD_POLLING_INTERVAL_MILLIS);
    }
 else {
      final String encryptedPassword=passwordData.getPasswordData();
      LoginCredentials credentials;
      try {
        credentials=decryptPasswordData(encryptedPassword,key);
      }
 catch (      final NoSuchAlgorithmException e) {
        throw new CloudProvisioningException("Failed to decrypt windows password: " + e.getMessage(),e);
      }
catch (      final CertificateException e) {
        throw new CloudProvisioningException("Failed to decrypt windows password: " + e.getMessage(),e);
      }
catch (      final IOException e) {
        throw new CloudProvisioningException("Failed to decrypt windows password: " + e.getMessage(),e);
      }
      return credentials;
    }
  }
  throw new TimeoutException("Failed to retrieve EC2 Windows password in the allocated time");
}
