{
  logger.fine("Retrieving data on node with id " + serverId);
  NodeMetadata nodeMetadata=this.context.getComputeService().getNodeMetadata(serverId);
  logger.fine("Invoking destroy node on " + serverId);
  this.context.getComputeService().destroyNode(serverId);
  logger.info("Machine: " + nodeMetadata.getPrivateAddresses() + "-"+ serverId+ " shutdown has started. "+ "Waiting for process to complete");
  final long endTime=System.currentTimeMillis() + unit.toMillis(duration);
  NodeMetadata.Status state=null;
  while (System.currentTimeMillis() < endTime) {
    logger.fine("Retrieving data on node with id " + serverId);
    final NodeMetadata node=this.context.getComputeService().getNodeMetadata(serverId);
    if (node == null) {
      return;
    }
    state=node.getStatus();
    logger.fine("Machine: " + node.getPrivateAddresses() + "-"+ serverId+ " state is: "+ state);
switch (state) {
case TERMINATED:
      return;
case PENDING:
case RUNNING:
case SUSPENDED:
    break;
case ERROR:
case UNRECOGNIZED:
default :
  logger.warning("While waiting for machine " + serverId + " to shut down, received unexpected node state: "+ state);
break;
}
Thread.sleep(SHUTDOWN_WAIT_POLLING_INTERVAL_MILLIS);
}
throw new TimeoutException("Termination of cloud node with id " + serverId + " was requested, "+ "but machine did not shut down in the required time. Last state was : "+ state);
}
