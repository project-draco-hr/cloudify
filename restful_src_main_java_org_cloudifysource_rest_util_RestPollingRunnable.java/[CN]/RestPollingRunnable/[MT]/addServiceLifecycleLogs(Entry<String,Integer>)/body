{
  List<Map<String,String>> servicesLifecycleEventDetailes;
  servicesLifecycleEventDetailes=new ArrayList<Map<String,String>>();
  String serviceName=entry.getKey();
  final String absolutePuName=ServiceUtils.getAbsolutePUName(this.applicationName,serviceName);
  logger.log(Level.FINE,"Polling for lifecycle events on service: " + absolutePuName);
  final Zone zone=admin.getZones().getByName(absolutePuName);
  if (zone == null) {
    logger.log(Level.FINE,"Zone " + absolutePuName + " does not exist");
    if (isUninstall) {
      logger.log(Level.INFO,"Polling for service " + absolutePuName + " has ended successfully");
      this.serviceNames.remove(serviceName);
    }
    return;
  }
  final String regex=MessageFormat.format(USM_EVENT_LOGGER_NAME,absolutePuName);
  final LogEntryMatcher matcher=regex(regex);
  for (  final GridServiceContainer container : zone.getGridServiceContainers()) {
    logger.log(Level.FINE,"Polling GSC with uid: " + container.getUid());
    final Date pollingStartTime=getGSCSamplingStartTime(container);
    final LogEntries logEntries=container.logEntries(matcher);
    for (    final LogEntry logEntry : logEntries) {
      if (logEntry.isLog()) {
        if (pollingStartTime.before(new Date(logEntry.getTimestamp()))) {
          final Map<String,String> serviceEventsMap=getEventDetailes(logEntry,container,absolutePuName);
          servicesLifecycleEventDetailes.add(serviceEventsMap);
        }
      }
    }
    this.lifecycleEventsContainer.addLifecycleEvents(servicesLifecycleEventDetailes);
  }
}
