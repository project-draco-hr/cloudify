{
  if (isUninstall) {
    final String absolutePuName=ServiceUtils.getAbsolutePUName(applicationName,serviceName);
    try {
      final Boolean undeployedSuccessfully=this.undeployTask.get(ONE_SEC,TimeUnit.SECONDS);
      if (undeployedSuccessfully) {
        logger.info("undeployAndWait for processing unit " + absolutePuName + " has finished");
        this.serviceNames.remove(serviceName);
        this.lifecycleEventsContainer.addNonLifecycleEvents("Service \"" + serviceName + "\" uninstalled successfully");
      }
    }
 catch (    final Exception e) {
      if (e instanceof TimeoutException) {
        logger.info("undeployAndWait for processing unit " + absolutePuName + " has not finished yet");
      }
 else {
        final String message="undeploy task has ended unsuccessfully. " + "Some machines may not have been terminated!";
        logger.log(Level.WARNING,message,e);
        lifecycleEventsContainer.addNonLifecycleEvents(message);
        throw new ExecutionException(message,e);
      }
    }
  }
 else {
    if (plannedNumberOfInstances == numberOfServiceInstances + numberOfFailedInstances) {
      this.serviceNames.remove(serviceName);
    }
  }
}
