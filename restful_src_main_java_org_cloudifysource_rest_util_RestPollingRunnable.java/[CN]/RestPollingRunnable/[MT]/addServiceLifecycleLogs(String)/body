{
  List<Map<String,String>> servicesLifecycleEventDetailes;
  servicesLifecycleEventDetailes=new ArrayList<Map<String,String>>();
  final String absolutePuName=ServiceUtils.getAbsolutePUName(this.applicationName,serviceName);
  logger.log(Level.FINE,"Polling for lifecycle events on service: " + absolutePuName);
  final Zone zone=admin.getZones().getByName(absolutePuName);
  if (zone == null) {
    logger.log(Level.FINE,"Zone " + absolutePuName + " does not exist. not polling for logs");
    return;
  }
  final String regex=MessageFormat.format(USM_EVENT_LOGGER_NAME,absolutePuName);
  final LogEntryMatcher matcher=regex(regex);
  for (  final GridServiceContainer container : zone.getGridServiceContainers()) {
    logger.log(Level.FINE,"Polling GSC with uid: " + container.getUid());
    final Date pollingStartTime=getGSCSamplingStartTime(container);
    LogEntries logEntries=null;
    try {
      logEntries=container.logEntries(matcher);
    }
 catch (    AdminException e) {
      logger.log(Level.INFO,"an internal admin exception was thrown. Reason: " + e.getMessage(),e);
    }
    if (logEntries != null) {
      for (      final LogEntry logEntry : logEntries) {
        if (logEntry.isLog()) {
          if (pollingStartTime.before(new Date(logEntry.getTimestamp()))) {
            final Map<String,String> serviceEventsMap=getEventDetailes(logEntry,container,absolutePuName);
            servicesLifecycleEventDetailes.add(serviceEventsMap);
          }
        }
      }
    }
    this.lifecycleEventsContainer.addLifecycleEvents(servicesLifecycleEventDetailes);
  }
}
