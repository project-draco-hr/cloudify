{
  printInitialRunningInstances();
  ConditionLatch conditionLatch=createConditionLatch(timeout);
  conditionLatch.waitFor(new ConditionLatch.Predicate(){
    @Override public boolean isDone() throws CLIException, InterruptedException {
      try {
        boolean ended=false;
        final List<String> latestEvents=getLatestEvents();
        if (!latestEvents.isEmpty()) {
          if (latestEvents.contains(CloudifyConstants.UNDEPLOYED_SUCCESSFULLY_EVENT)) {
            ended=true;
          }
          displayer.printEvents(latestEvents);
        }
 else {
          displayer.printNoChange();
        }
        printIfReleasingCloudResources();
        return ended;
      }
 catch (      final RestClientException e) {
        String message=e.getMessageFormattedText();
        if (message == null) {
          message=e.getMessage();
        }
        throw new CLIException(message,e,e.getVerbose());
      }
    }
    private void printIfReleasingCloudResources() throws RestClientException {
      if (cloudResourceNotReleasedServices.isEmpty()) {
        return;
      }
      for (      String serviceName : new HashSet<String>(cloudResourceNotReleasedServices)) {
        try {
          restClient.getServiceDescription(applicationName,serviceName);
        }
 catch (        RestClientResponseException e) {
          if (e.getStatusCode() == CloudifyConstants.HTTP_STATUS_NOT_FOUND) {
            cloudResourceNotReleasedServices.remove(serviceName);
            displayer.printEvent(CloudifyConstants.RELEASING_CLOUD_RESOURCES_EVENT + " for service : " + serviceName);
          }
 else {
            throw e;
          }
        }
      }
    }
  }
);
}
