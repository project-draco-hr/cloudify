{
  AdminFacade adminFacade=(AdminFacade)session.get(Constants.ADMIN_FACADE);
  if (adminFacade != null && adminFacade.isConnected()) {
    throw new CLIStatusException("already_connected");
  }
  if (timeoutInMinutes < 0) {
    throw new CLIException("-timeout cannot be negative");
  }
  if (progressInMinutes < 1) {
    throw new CLIException("-progress-min must be positive");
  }
  if (timeoutInMinutes > 0 && timeoutInMinutes < progressInMinutes) {
    throw new CLIException("-timeout must be bigger than -progress-min");
  }
  long end=System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(timeoutInMinutes);
  if (end < 0) {
    throw new CLIException("-timeout caused an overflow. please use a smaller value");
  }
  if (!applicationFile.exists()) {
    throw new CLIException("Could not find application at: " + applicationFile.getPath());
  }
  if (!azureDeploymentSlotName.equals(AzureSlot.Production.getSlot()) && !azureDeploymentSlotName.equals(AzureSlot.Staging.getSlot())) {
    throw new CLIException("azure-deployment-slot must be either " + AzureSlot.Production.getSlot() + " or "+ AzureSlot.Staging.getSlot());
  }
  Properties properties=AzureUtils.getAzureProperties();
  String storageAccount=AzureUtils.getProperty(properties,"storageAccount");
  String storageAccessKey=AzureUtils.getProperty(properties,"storageAccessKey");
  String storageBlobContainerName=AzureUtils.getProperty(properties,"storageBlobContainerName");
  String rdpLoginUsername=AzureUtils.getProperty(properties,"rdpLoginUsername");
  String rdpLoginEncrypedPassword=AzureUtils.getProperty(properties,"rdpLoginEncrypedPassword");
  String subscriptionId=AzureUtils.getProperty(properties,"subscriptionId");
  String certificateThumbprint=AzureUtils.getProperty(properties,"certificateThumbprint");
  File templateFolder=AzureUtils.getFileProperty(properties,"workerRoleFolder");
  File cspackFolder=AzureUtils.getFileProperty(properties,"cspackFolder");
  File rdpCertFile=AzureUtils.getFileProperty(properties,"rdpCertFile");
  File rdpPfxFile=AzureUtils.getFileProperty(properties,"rdpPfxFile");
  Application application=ServiceReader.getApplicationFromFile(this.applicationFile).getApplication();
  if (azureHostedServiceName == null) {
    azureHostedServiceName=application.getName();
  }
  if (azureDeploymentName == null) {
    azureDeploymentName=azureHostedServiceName;
    if (AzureSlot.Staging.equals(AzureSlot.fromString(azureDeploymentSlotName))) {
      azureDeploymentName+="-staging";
    }
  }
  List<AzureServiceDefinition> serviceDefinitions=new ArrayList<AzureServiceDefinition>();
  List<Service> services=application.getServices();
  for (  Service service : services) {
    if (service.getNetwork() != null) {
      int port=service.getNetwork().getPort();
      serviceDefinitions.add(new AzureServiceDefinition(service.getName(),calculateNumberOfInstances(service),port,port));
    }
 else {
      serviceDefinitions.add(new AzureServiceDefinition(service.getName(),calculateNumberOfInstances(service)));
    }
  }
  File projectDirectory=createTempDirectory(new File(templateFolder,".."));
  updateConfigurationFiles(serviceDefinitions,templateFolder,projectDirectory,storageAccount,storageAccessKey,rdpLoginUsername,rdpLoginEncrypedPassword);
  List<String> serviceNames=new ArrayList<String>();
  for (  Service service : application.getServices()) {
    serviceNames.add(service.getName());
  }
  File cspkgFile=cspackCspkg(cspackFolder,projectDirectory,serviceNames);
  File cscfgFile=new File(cspkgFile.getParent(),"ServiceConfiguration.Cloud.cscfg");
  AzureHostedService azureHostedService=new AzureHostedService(AzureUtils.getAzureConfigEXE(),AzureUtils.getEncUtilEXE(),subscriptionId,certificateThumbprint,verbose);
  List<String> azureHostedServices=Arrays.asList(azureHostedService.listHostedServices());
  if (azureHostedServices.contains(azureHostedServiceName)) {
    logger.log(Level.INFO,"Found azure hosted service " + azureHostedServiceName);
  }
 else {
    logger.log(Level.INFO,"Creating azure hosted service " + azureHostedServiceName);
    azureHostedService.createHostedService(azureHostedServiceName,azureHostedServiceName,azureHostedServiceLocation,azureHostedServiceDescription);
  }
  Collection<String> certificateThumbprints=Arrays.asList(azureHostedService.listCertificateThumbprints(azureHostedServiceName));
  String rdpCertificateThumbprint=azureHostedService.getCertificateThumbprint(rdpCertFile);
  if (certificateThumbprints.contains(rdpCertificateThumbprint)) {
    logger.log(Level.INFO,"Found RDP certificate " + rdpCertificateThumbprint);
  }
 else {
    logger.log(Level.INFO,"Uploading Remote Desktop certificate");
    azureHostedService.addCertificate(azureHostedServiceName,rdpPfxFile,azureRemoteDesktopPfxFilePassword);
  }
  logger.log(Level.INFO,"updating " + cscfgFile.getName() + " with certificate thumbprint "+ rdpCertificateThumbprint);
  AzureDeploymentConfigurationFile cscfg=new AzureDeploymentConfigurationFile(cscfgFile);
  cscfg.setRdpCertificateThumbprint(rdpCertificateThumbprint);
  cscfg.flush();
  logger.log(Level.INFO,"Creating azure deployment " + azureDeploymentName);
  AzureDeploymentWrapper azureDeploymentWrapper=new AzureDeploymentWrapper();
  azureDeploymentWrapper.setVerbose(verbose);
  azureDeploymentWrapper.setProgressInMinutes(progressInMinutes);
  azureDeploymentWrapper.setAzureHostedServiceName(azureHostedServiceName);
  azureDeploymentWrapper.setAzureDeploymentSlotName(azureDeploymentSlotName);
  azureDeploymentWrapper.setCertificateThumbprint(certificateThumbprint);
  azureDeploymentWrapper.setSubscriptionId(subscriptionId);
  azureDeploymentWrapper.setStorageAccount(storageAccount);
  azureDeploymentWrapper.setStorageAccessKey(storageAccessKey);
  azureDeploymentWrapper.setStorageBlobContainerName(storageBlobContainerName);
  azureDeploymentWrapper.setTimeoutErrorMessage(TIMEOUT_ERROR_STRING);
  azureDeploymentWrapper.createDeployment(azureDeploymentName,cscfgFile,cspkgFile);
  if (timeoutInMinutes > 0) {
    logger.info(ShellUtils.getExpectedExecutionTimeMessage());
    waitForStatus(azureDeploymentWrapper,AzureDeploymentStatus.Running,ShellUtils.millisUntil(TIMEOUT_ERROR_STRING,end),TimeUnit.MILLISECONDS);
    try {
      URI url=azureDeploymentWrapper.connectAndWait(adminFacade,ShellUtils.millisUntil(TIMEOUT_ERROR_STRING,end),TimeUnit.MILLISECONDS);
      logger.log(Level.INFO,"Cloudify REST gateway URL is " + url);
      int numberOfMachines=0;
      numberOfMachines+=1;
      numberOfMachines+=2;
      for (      String service : serviceNames) {
        numberOfMachines+=cscfg.getNumberOfInstances(service);
      }
      logger.log(Level.INFO,"Waiting for " + numberOfMachines + " instances to start");
      azureDeploymentWrapper.waitForNumberOfMachines(adminFacade,numberOfMachines,ShellUtils.millisUntil(TIMEOUT_ERROR_STRING,end),TimeUnit.MILLISECONDS);
      logger.log(Level.INFO,"Azure travel application bootstrapping complete. Cloudify REST gateway URL is " + url);
    }
 catch (    TimeoutException e) {
      logger.log(Level.INFO,MessageFormat.format(messages.getString("operation_timeout"),"azure:bootstrap-application"));
    }
  }
  deleteDirectory(projectDirectory);
  return messages.getString("bootstrap_succesfully");
}
