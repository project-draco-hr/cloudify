{
  super.setConfig(cloud,templateName,management,serviceName);
  this.stopManagementMachinesTimeoutInMinutes=Utils.getInteger(super.cloud.getCustom().get(CloudifyConstants.STOP_MANAGEMENT_TIMEOUT_IN_MINUTES),DEFAULT_STOP_MANAGEMENT_TIMEOUT);
  this.availabilitySet=(String)this.template.getCustom().get(AZURE_AVAILABILITY_SET);
  String pfxFile=(String)this.template.getCustom().get(AZURE_PFX_FILE);
  if (pfxFile == null && management) {
    throw new IllegalArgumentException("Custom field '" + AZURE_PFX_FILE + "' must be set");
  }
  this.pathToPfxFile=this.template.getAbsoluteUploadDir() + File.separator + pfxFile;
  this.pfxPassword=(String)this.template.getCustom().get(AZURE_PFX_PASSWORD);
  if (pfxPassword == null && management) {
    throw new IllegalArgumentException("Custom field '" + AZURE_PFX_PASSWORD + "' must be set");
  }
  this.deploymentSlot=(String)this.template.getCustom().get(AZURE_DEPLOYMENT_SLOT);
  if (StringUtils.isBlank(deploymentSlot)) {
    deploymentSlot="Staging";
  }
 else {
    if (!deploymentSlot.equals("Staging") && !deploymentSlot.equals("Production")) {
      throw new IllegalArgumentException(AZURE_DEPLOYMENT_SLOT + " property must be either 'Staging' or " + "'Production'");
    }
  }
  this.endpoints=(List<Map<String,String>>)this.template.getCustom().get(AZURE_ENDPOINTS);
  this.imageName=this.template.getImageId();
  this.userName=this.template.getUsername();
  this.password=this.template.getPassword();
  this.size=this.template.getHardwareId();
  this.subscriptionId=this.cloud.getUser().getUser();
  this.cleanup=Boolean.parseBoolean((String)this.cloud.getCustom().get(AZURE_CLEANUP_ON_TEARDOWN));
  this.location=(String)this.cloud.getCustom().get(AZURE_AFFINITY_LOCATION);
  if (location == null) {
    throw new IllegalArgumentException("Custom field '" + AZURE_AFFINITY_LOCATION + "' must be set");
  }
  this.addressSpace=(String)this.cloud.getCustom().get(AZURE_NETOWRK_ADDRESS_SPACE);
  if (addressSpace == null) {
    throw new IllegalArgumentException("Custom field '" + AZURE_NETOWRK_ADDRESS_SPACE + "' must be set");
  }
  this.affinityGroup=(String)this.cloud.getCustom().get(AZURE_AFFINITY_GROUP);
  if (affinityGroup == null) {
    throw new IllegalArgumentException("Custom field '" + AZURE_AFFINITY_GROUP + "' must be set");
  }
  this.networkName=(String)this.cloud.getCustom().get(AZURE_NETWORK_NAME);
  if (networkName == null) {
    throw new IllegalArgumentException("Custom field '" + AZURE_NETWORK_NAME + "' must be set");
  }
  this.storageAccountName=(String)this.cloud.getCustom().get(AZURE_STORAGE_ACCOUNT);
  if (storageAccountName == null) {
    throw new IllegalArgumentException("Custom field '" + AZURE_STORAGE_ACCOUNT + "' must be set");
  }
  if (this.management) {
    this.serverNamePrefix=this.cloud.getProvider().getManagementGroup();
  }
 else {
    this.serverNamePrefix=this.cloud.getProvider().getMachineNamePrefix();
  }
  final String wireLog=(String)this.cloud.getCustom().get(AZURE_WIRE_LOG);
  boolean enableWireLog=false;
  if (wireLog != null) {
    enableWireLog=Boolean.parseBoolean(wireLog);
  }
  initRestClient(this.subscriptionId,this.pathToPfxFile,this.pfxPassword,enableWireLog);
}
