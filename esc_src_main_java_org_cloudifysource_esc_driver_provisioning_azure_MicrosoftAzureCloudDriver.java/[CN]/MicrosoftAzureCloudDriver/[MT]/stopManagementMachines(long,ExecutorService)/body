{
  List<Future<?>> futures=new ArrayList<Future<?>>();
  Disks disks=null;
  try {
    disks=azureClient.listOSDisks();
  }
 catch (  MicrosoftAzureException e1) {
    throw new CloudProvisioningException(e1);
  }
  for (  Disk disk : disks) {
    AttachedTo attachedTo=disk.getAttachedTo();
    if (attachedTo != null) {
      String roleName=attachedTo.getRoleName();
      if (roleName.startsWith(this.serverNamePrefix)) {
        final String diskName=disk.getName();
        final String deploymentName=attachedTo.getDeploymentName();
        final String hostedServiceName=attachedTo.getHostedServiceName();
        StopManagementMachineCallable task=new StopManagementMachineCallable(deploymentName,hostedServiceName,diskName,endTime);
        futures.add(service.submit(task));
      }
    }
 else {
      if (disk.getName().contains(serverNamePrefix)) {
        try {
          logger.info("Detected a zombie OS Disk with name " + disk.getName() + ", Deleting it.");
          azureClient.deleteOSDisk(disk.getName(),endTime);
        }
 catch (        final Exception e) {
          throw new CloudProvisioningException(e);
        }
      }
    }
  }
  List<Throwable> exceptionOnStopMachines=new ArrayList<Throwable>();
  for (  Future<?> future : futures) {
    try {
      future.get();
    }
 catch (    final Exception e) {
      if (e instanceof InterruptedException) {
        exceptionOnStopMachines.add(e);
      }
 else {
        ExecutionException executionException=(ExecutionException)e;
        Throwable rootCause=ExceptionUtils.getRootCause(executionException);
        logger.warning(rootCause.getMessage());
        exceptionOnStopMachines.add(rootCause);
      }
    }
  }
  if (!(exceptionOnStopMachines.isEmpty())) {
    if (logger.isLoggable(Level.FINEST)) {
      for (      Throwable e : exceptionOnStopMachines) {
        logger.finest(ExceptionUtils.getFullStackTrace(e));
      }
    }
    throw new CloudProvisioningException(exceptionOnStopMachines.get(0).getMessage(),exceptionOnStopMachines.get(0));
  }
}
