{
  MachineDetails machineDetails=new MachineDetails();
  String cloudServiceName=null;
  CreatePersistentVMRoleDeploymentDescriptor desc=null;
  try {
    logger.fine("Creating Cloud Service");
    cloudServiceName=azureClient.createCloudService(affinityGroup,duration,unit);
    logger.fine("Cloud Service Created : " + cloudServiceName);
    desc=new CreatePersistentVMRoleDeploymentDescriptor();
    desc.setRoleName(serverNamePrefix + "_role");
    desc.setDeploymentName(cloudServiceName);
    desc.setDeploymentSlot(deploymentSlot);
    desc.setImageName(imageName);
    desc.setAvailabilitySetName(availabilitySet);
    InputEndpoints inputEndpoints=new InputEndpoints();
    if (this.endpoints != null) {
      for (      Map<String,String> endpointPair : this.endpoints) {
        String name=endpointPair.get("name");
        int port=Integer.parseInt(endpointPair.get("port"));
        InputEndpoint endpoint=new InputEndpoint();
        endpoint.setLocalPort(port);
        endpoint.setPort(port);
        endpoint.setName(name);
        endpoint.setProtocol("TCP");
        inputEndpoints.getInputEndpoints().add(endpoint);
      }
    }
    InputEndpoint sshEndpoint=new InputEndpoint();
    sshEndpoint.setLocalPort(SSH_PORT);
    sshEndpoint.setPort(SSH_PORT);
    sshEndpoint.setName("SSH");
    sshEndpoint.setProtocol("TCP");
    inputEndpoints.getInputEndpoints().add(sshEndpoint);
    if (this.management) {
      InputEndpoint webuiEndpoint=new InputEndpoint();
      webuiEndpoint.setLocalPort(WEBUI_PORT);
      webuiEndpoint.setPort(WEBUI_PORT);
      webuiEndpoint.setName("Webui");
      webuiEndpoint.setProtocol("TCP");
      inputEndpoints.getInputEndpoints().add(webuiEndpoint);
      InputEndpoint restEndpoint=new InputEndpoint();
      restEndpoint.setLocalPort(REST_PORT);
      restEndpoint.setPort(REST_PORT);
      restEndpoint.setName("Rest");
      restEndpoint.setProtocol("TCP");
      inputEndpoints.getInputEndpoints().add(restEndpoint);
    }
    desc.setInputEndpoints(inputEndpoints);
    desc.setNetworkName(networkName);
    desc.setPassword(password);
    desc.setSize(size);
    desc.setStorageAccountName(storageAccountName);
    desc.setUserName(userName);
    logger.fine("Launching Virtual Machine...");
    RoleAddressDetails roleAddressDetails=azureClient.createVirtualMachineDeployment(desc,cloudServiceName,duration,unit);
    machineDetails.setPrivateAddress(roleAddressDetails.getPrivateIp());
    machineDetails.setPublicAddress(roleAddressDetails.getPublicIp());
    machineDetails.setMachineId(roleAddressDetails.getId());
    machineDetails.setAgentRunning(false);
    machineDetails.setCloudifyInstalled(false);
    machineDetails.setInstallationDirectory(this.template.getRemoteDirectory());
    machineDetails.setRemoteDirectory(this.template.getRemoteDirectory());
    machineDetails.setRemotePassword(password);
    machineDetails.setRemoteUsername(userName);
    logger.fine("Virtual Machine Started : " + machineDetails);
    return machineDetails;
  }
 catch (  final MicrosoftAzureException e) {
    logger.warning("Failed Starting Virtual Machine properly. " + "trying to delete it and any services that were pre dedicated for this instance");
    if (desc != null) {
      logger.warning("deleting role " + desc.getRoleName());
      try {
        azureClient.deleteRole(cloudServiceName,desc.getDeploymentName(),desc.getRoleName(),duration,unit);
      }
 catch (      MicrosoftAzureException e1) {
        logger.log(Level.WARNING,"Failed deleting role " + desc.getRoleName(),e1);
      }
    }
    if (cloudServiceName != null) {
      logger.warning("the Cloud Service " + cloudServiceName + " was created, deleting it...");
      try {
        azureClient.deleteCloudService(cloudServiceName,duration,unit);
      }
 catch (      MicrosoftAzureException e1) {
        logger.log(Level.WARNING,"Failed deleting Cloud Service " + cloudServiceName,e1);
      }
    }
    throw new CloudProvisioningException(e);
  }
}
