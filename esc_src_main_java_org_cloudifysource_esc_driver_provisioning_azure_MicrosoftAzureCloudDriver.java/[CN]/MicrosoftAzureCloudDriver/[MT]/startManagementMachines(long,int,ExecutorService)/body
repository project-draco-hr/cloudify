{
  final List<Future<MachineDetails>> results=new ArrayList<Future<MachineDetails>>(numberOfManagementMachines);
  for (int i=0; i < numberOfManagementMachines; i++) {
    StartMachineCallable task=new StartMachineCallable(endTime);
    Future<MachineDetails> future=executorService.submit(task);
    results.add(future);
  }
  List<Throwable> exceptionsOnManagementStart=new ArrayList<Throwable>();
  List<MachineDetails> managementMachinesDetails=new ArrayList<MachineDetails>();
  for (  Future<MachineDetails> future : results) {
    try {
      managementMachinesDetails.add(future.get());
    }
 catch (    final Exception e) {
      if (e instanceof InterruptedException) {
        exceptionsOnManagementStart.add(e);
      }
 else {
        ExecutionException executionException=(ExecutionException)e;
        Throwable rootCause=ExceptionUtils.getRootCause(executionException);
        logger.warning(rootCause.getMessage());
        exceptionsOnManagementStart.add(rootCause);
      }
    }
  }
  if (exceptionsOnManagementStart.isEmpty()) {
    return managementMachinesDetails.toArray(new MachineDetails[numberOfManagementMachines]);
  }
 else {
    if (logger.isLoggable(Level.FINEST)) {
      logger.finest("Here are all the exception caught from all threads");
      for (      Throwable t : exceptionsOnManagementStart) {
        logger.finest(ExceptionUtils.getFullStackTrace(t));
      }
    }
    try {
      logger.warning("Failed to start management machines. cleaning up any services that might have already been started.");
      stopManagementMachines();
    }
 catch (    CloudProvisioningException e) {
      logger.warning("Failed to cleanup some management services. Please shut them down manually or use the teardown-cloud command.");
      logger.fine(ExceptionUtils.getFullStackTrace(e));
    }
    throw new CloudProvisioningException(exceptionsOnManagementStart.get(0).getMessage(),exceptionsOnManagementStart.get(0));
  }
}
