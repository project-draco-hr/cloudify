{
  final ComputeTemplate cloudTemplate=this.cloud.getCloudCompute().getTemplates().get(this.cloudTemplateName);
  String locationId;
  if (locationIdOverride == null) {
    locationId=cloudTemplate.getLocationId();
  }
 else {
    locationId=locationIdOverride;
  }
  NodeMetadata node;
  final MachineDetails machineDetails;
  publishEvent(EVENT_STARTING_MACHINE_WITH_NAME,groupName);
  node=deployer.createServer(groupName,locationId);
  final String nodeId=node.getId();
  try {
    publishEvent(EVENT_WAITING_FOR_NODE_TO_BE_AVAILABLE,groupName);
    node=waitForNodeToBecomeReady(nodeId,end);
    publishEvent(EVENT_MACHINE_STARTED,node.getName(),node.getPublicAddresses());
    machineDetails=createMachineDetailsFromNode(node);
    final FileTransferModes fileTransfer=cloudTemplate.getFileTransfer();
    if (this.cloud.getProvider().getProvider().equals("aws-ec2") && fileTransfer == FileTransferModes.CIFS) {
      if (machineDetails.getRemotePassword() == null) {
        handleEC2WindowsCredentials(end,node,machineDetails,cloudTemplate);
      }
    }
 else {
      handleServerCredentials(machineDetails,cloudTemplate);
    }
  }
 catch (  final Exception e) {
    logger.log(Level.SEVERE,"Cloud machine was started but an error occurred during initialization. Shutting " + "down machine",e);
    deployer.shutdownMachine(nodeId);
    throw new CloudProvisioningException(e);
  }
  return machineDetails;
}
