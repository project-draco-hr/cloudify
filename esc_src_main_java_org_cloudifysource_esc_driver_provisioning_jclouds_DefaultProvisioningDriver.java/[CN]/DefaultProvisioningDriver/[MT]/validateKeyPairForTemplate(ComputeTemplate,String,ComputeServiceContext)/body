{
  String locationId=template.getLocationId();
  if (StringUtils.isBlank(locationId) && apiId.equalsIgnoreCase(OPENSTACK_API)) {
    locationId=getOpenstackLocationByHardwareId(template.getHardwareId());
  }
  if (StringUtils.isBlank(locationId)) {
    throw new CloudProvisioningException("locationId is missing");
  }
  Object keyPairObj=(String)template.getOptions().get("keyPairName");
  if (keyPairObj == null) {
    keyPairObj=(String)template.getOptions().get("keyPair");
  }
  if (!(keyPairObj instanceof String)) {
    throw new CloudProvisioningException("Invalid configuration: keyPair must of type String");
  }
  String keyPairString=(String)keyPairObj;
  if (StringUtils.isNotBlank(keyPairString)) {
    try {
      publishOngoingEvent(CloudifyErrorMessages.EVENT_VALIDATING_KEY_PAIR.getName(),keyPairString);
      if (apiId.equalsIgnoreCase(EC2_API)) {
        validateEC2KeyPair(computeServiceContext,locationId,keyPairString);
      }
 else       if (apiId.equalsIgnoreCase(OPENSTACK_API)) {
        validateOpenstackKeyPair(computeServiceContext,locationId,keyPairString);
      }
 else       if (apiId.equalsIgnoreCase(CLOUDSTACK)) {
      }
 else       if (apiId.equalsIgnoreCase(VCLOUD)) {
      }
 else {
      }
      publishEventEnd(VALIDATION_SUCCESS_MESSAGE);
    }
 catch (    Exception ex) {
      publishEventEnd(" [Error] Invalid key-pair configuration");
      throw new CloudProvisioningException("Invalid key-pair configuration: " + ex.getMessage(),ex);
    }
  }
}
