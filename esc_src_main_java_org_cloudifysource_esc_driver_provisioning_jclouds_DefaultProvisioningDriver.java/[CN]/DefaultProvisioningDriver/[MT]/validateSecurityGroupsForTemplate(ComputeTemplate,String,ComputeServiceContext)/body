{
  String locationId=template.getLocationId();
  if (StringUtils.isBlank(locationId) && apiId.equalsIgnoreCase(OPENSTACK_API)) {
    locationId=getOpenstackLocationByHardwareId(template.getHardwareId());
  }
  if (locationId == null) {
    throw new CloudProvisioningException("locationId is missing");
  }
  Object securityGroupsArr=template.getOptions().get("securityGroupNames");
  if (securityGroupsArr == null) {
    securityGroupsArr=template.getOptions().get("securityGroups");
  }
  if (securityGroupsArr != null && securityGroupsArr instanceof String[]) {
    if (apiId.equalsIgnoreCase(EC2_API)) {
      RestContext<EC2Client,EC2AsyncClient> unwrapped=computeServiceContext.unwrap();
      validateEc2SecurityGroups(unwrapped.getApi(),locationId,(String[])securityGroupsArr);
    }
 else     if (apiId.equalsIgnoreCase(OPENSTACK_API)) {
      RestContext<NovaApi,NovaAsyncApi> unwrapped=computeServiceContext.unwrap();
      validateOpenstackSecurityGroups(unwrapped.getApi(),locationId,(String[])securityGroupsArr);
    }
 else     if (apiId.equalsIgnoreCase(CLOUDSTACK)) {
    }
 else     if (apiId.equalsIgnoreCase(VCLOUD)) {
    }
 else {
    }
  }
}
