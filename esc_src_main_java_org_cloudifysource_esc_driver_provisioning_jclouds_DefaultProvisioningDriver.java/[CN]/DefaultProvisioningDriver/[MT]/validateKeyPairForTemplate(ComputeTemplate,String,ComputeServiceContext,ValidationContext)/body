{
  String locationId=template.getLocationId();
  if (StringUtils.isBlank(locationId) && apiId.equalsIgnoreCase(OPENSTACK_API)) {
    locationId=getOpenstackLocationByHardwareId(template.getHardwareId());
  }
  if (StringUtils.isBlank(locationId)) {
    throw new CloudProvisioningException("locationId is missing");
  }
  Object keyPairObj=template.getOptions().get("keyPairName");
  if (keyPairObj == null) {
    keyPairObj=template.getOptions().get("keyPair");
  }
  if (keyPairObj != null) {
    if (!(keyPairObj instanceof String)) {
      throw new CloudProvisioningException("Invalid configuration: keyPair must be of type String");
    }
    String keyPairString=(String)keyPairObj;
    if (StringUtils.isNotBlank(keyPairString)) {
      try {
        validationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,getFormattedMessage("validating_key_pair",keyPairString));
        if (apiId.equalsIgnoreCase(EC2_API)) {
          validateEC2KeyPair(computeServiceContext,locationId,keyPairString);
        }
 else         if (apiId.equalsIgnoreCase(OPENSTACK_API)) {
          validateOpenstackKeyPair(computeServiceContext,locationId,keyPairString);
        }
 else         if (apiId.equalsIgnoreCase(CLOUDSTACK)) {
        }
 else         if (apiId.equalsIgnoreCase(VCLOUD)) {
        }
 else {
        }
        validationContext.validationEventEnd(ValidationResultType.OK);
      }
 catch (      Exception ex) {
        validationContext.validationEventEnd(ValidationResultType.ERROR);
        throw new CloudProvisioningException("Invalid key-pair configuration: " + ex.getMessage(),ex);
      }
    }
  }
}
