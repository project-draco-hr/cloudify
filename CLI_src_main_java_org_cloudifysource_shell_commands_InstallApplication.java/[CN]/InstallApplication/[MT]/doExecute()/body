{
  try {
    DebugUtils.validateDebugSettings(debugAll,debugEvents,getDebugModeString());
  }
 catch (  final DSLErrorMessageException e) {
    throw new CLIStatusException(e.getErrorMessage().getName(),(Object[])e.getArgs());
  }
  if (cloudOverrides != null) {
    if (cloudOverrides.length() >= TEN_K) {
      throw new CLIStatusException(CloudifyErrorMessages.CLOUD_OVERRIDES_TO_LONG.getName());
    }
  }
  final RecipePathResolver pathResolver=new RecipePathResolver();
  if (pathResolver.resolveApplication(applicationFile)) {
    applicationFile=pathResolver.getResolved();
  }
 else {
    throw new CLIStatusException("application_not_found",StringUtils.join(pathResolver.getPathsLooked().toArray(),", "));
  }
  logger.info("Validating file " + applicationFile.getName());
  final DSLReader dslReader=createDslReader();
  final Application application=dslReader.readDslEntity(Application.class);
  if (StringUtils.isBlank(applicationName)) {
    applicationName=application.getName();
  }
  if (!org.cloudifysource.restclient.StringUtils.isValidRecipeName(applicationName)) {
    throw new CLIStatusException(CloudifyErrorMessages.APPLICATION_NAME_INVALID_CHARS.getName(),applicationName);
  }
  if (adminFacade.getApplicationNamesList().contains(applicationName)) {
    throw new CLIStatusException("application_already_deployed",application.getName());
  }
  final File cloudConfigurationZipFile=createCloudConfigurationZipFile();
  File zipFile;
  if (applicationFile.isFile()) {
    if (applicationFile.getName().endsWith(".zip") || applicationFile.getName().endsWith(".jar")) {
      zipFile=applicationFile;
    }
 else {
      throw new CLIStatusException("application_file_format_mismatch",applicationFile.getPath());
    }
  }
 else {
    final List<File> additionalServiceFiles=new LinkedList<File>();
    if (cloudConfigurationZipFile != null) {
      additionalServiceFiles.add(cloudConfigurationZipFile);
    }
    zipFile=Packager.packApplication(application,applicationFile,additionalServiceFiles);
  }
  logger.info("Uploading application " + applicationName);
  final Map<String,String> result=adminFacade.installApplication(zipFile,applicationName,authGroups,getTimeoutInMinutes(),!isDisableSelfHealing(),overrides,cloudOverrides,debugAll,debugEvents,getDebugModeString());
  final String serviceOrder=result.get(CloudifyConstants.SERVICE_ORDER);
  if (!applicationFile.isFile()) {
    final boolean delete=zipFile.delete();
    if (!delete) {
      logger.info("Failed to delete application file: " + zipFile.getAbsolutePath());
    }
  }
  if (serviceOrder.charAt(0) != '[' && serviceOrder.charAt(serviceOrder.length() - 1) != ']') {
    throw new IllegalStateException("Cannot parse service order response: " + serviceOrder);
  }
  printApplicationInfo(application);
  session.put(Constants.ACTIVE_APP,applicationName);
  GigaShellMain.getInstance().setCurrentApplicationName(applicationName);
  final String pollingID=result.get(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID);
  final RestLifecycleEventsLatch lifecycleEventsPollingLatch=this.adminFacade.getLifecycleEventsPollingLatch(pollingID,TIMEOUT_ERROR_MESSAGE);
  boolean isDone=false;
  boolean continuous=false;
  while (!isDone) {
    try {
      if (!continuous) {
        lifecycleEventsPollingLatch.waitForLifecycleEvents(getTimeoutInMinutes(),TimeUnit.MINUTES);
      }
 else {
        lifecycleEventsPollingLatch.continueWaitForLifecycleEvents(getTimeoutInMinutes(),TimeUnit.MINUTES);
      }
      isDone=true;
    }
 catch (    final TimeoutException e) {
      if (!(Boolean)session.get(Constants.INTERACTIVE_MODE)) {
        throw e;
      }
      final boolean continueInstallation=promptWouldYouLikeToContinueQuestion();
      if (!continueInstallation) {
        throw new CLIStatusException(e,"application_installation_timed_out_on_client",applicationName);
      }
      continuous=true;
    }
  }
  return this.getFormattedMessage("application_installed_successfully",Color.GREEN,applicationName);
}
