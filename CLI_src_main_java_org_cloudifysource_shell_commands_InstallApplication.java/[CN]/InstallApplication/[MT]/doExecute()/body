{
  if (!applicationFile.exists()) {
    throw new CLIStatusException("application_not_found",applicationFile.getAbsolutePath());
  }
  logger.info("Validating file " + applicationFile.getName());
  final Application application=ServiceReader.getApplicationFromFile(applicationFile).getApplication();
  normalizeApplicationName(application);
  if (adminFacade.getApplicationsList().contains(applicationName)) {
    throw new CLIStatusException("application_already_deployed",application.getName());
  }
  File zipFile;
  if (applicationFile.isFile()) {
    if (applicationFile.getName().endsWith(".zip") || applicationFile.getName().endsWith(".jar")) {
      zipFile=applicationFile;
    }
 else {
      throw new CLIStatusException("application_file_format_mismatch",applicationFile.getPath());
    }
  }
 else {
    zipFile=Packager.packApplication(application,applicationFile);
  }
  logger.info("Uploading application " + applicationName);
  Map<String,String> result=adminFacade.installApplication(zipFile,applicationName,timeoutInMinutes);
  String serviceOrder=result.get(CloudifyConstants.SERVICE_ORDER);
  if (!applicationFile.isFile()) {
    zipFile.delete();
  }
  if (serviceOrder.charAt(0) != '[' && serviceOrder.charAt(serviceOrder.length() - 1) != ']') {
    throw new IllegalStateException("Cannot parse service order response: " + serviceOrder);
  }
  printApplicationInfo(application);
  if (result.containsKey(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID)) {
    String pollingID=result.get(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID);
    RestLifecycleEventsLatch lifecycleEventsPollingLatch=this.adminFacade.getLifecycleEventsPollingLatch(pollingID,TIMEOUT_ERROR_MESSAGE);
    boolean isDone=false;
    boolean continues=false;
    while (!isDone) {
      try {
        if (!continues) {
          lifecycleEventsPollingLatch.waitForLifecycleEvents(timeoutInMinutes,TimeUnit.MINUTES);
        }
 else {
          lifecycleEventsPollingLatch.continueWaitForLifecycleEvents(timeoutInMinutes,TimeUnit.MINUTES);
        }
        isDone=true;
      }
 catch (      TimeoutException e) {
        if (!(Boolean)session.get(Constants.INTERACTIVE_MODE)) {
          throw e;
        }
        boolean continueInstallation=promptWouldYouLikeToContinueQuestion();
        if (!continueInstallation) {
          throw new CLIStatusException(e,"application_installation_timed_out_on_client",applicationName);
        }
 else {
          continues=true;
        }
      }
    }
  }
 else {
    throw new CLIException("Failed to retrieve lifecycle logs from rest. " + "Check logs for more details.");
  }
  session.put(Constants.ACTIVE_APP,applicationName);
  GigaShellMain.getInstance().setCurrentApplicationName(applicationName);
  return this.getFormattedMessage("application_installed_succesfully",Color.GREEN,applicationName);
}
