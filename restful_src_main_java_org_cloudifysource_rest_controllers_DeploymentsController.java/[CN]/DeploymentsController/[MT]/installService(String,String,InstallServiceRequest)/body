{
  logger.info("[installService] - installing service " + serviceName);
  final String absolutePuName=ServiceUtils.getAbsolutePUName(appName,serviceName);
  String uploadKey=request.getServiceFolderUploadKey();
  if (StringUtils.isBlank(uploadKey)) {
    throw new RestErrorException(CloudifyErrorMessages.UPLOAD_KEY_PARAMETER_MISSING.getName());
  }
  final File servicePackedFolder=getFromRepo(uploadKey,CloudifyMessageKeys.WRONG_SERVICE_FOLDER_UPLOAD_KEY.getName(),absolutePuName);
  File serviceDir;
  try {
    serviceDir=ServiceReader.extractProjectFileToDir(servicePackedFolder,absolutePuName,extractedFodler);
  }
 catch (  final IOException e) {
    logger.log(Level.WARNING,"Failed to extract project file [" + servicePackedFolder.getAbsolutePath() + "] to new directory "+ absolutePuName+ " [under "+ extractedFodler.getAbsolutePath()+ "]",e);
    throw new RestErrorException(CloudifyMessageKeys.FAILED_TO_EXTRACT_PROJECT_FILE.getName(),absolutePuName);
  }
  final File serviceOverridesFile=getFromRepo(request.getServiceOverridesUploadKey(),CloudifyMessageKeys.WRONG_SERVICE_OVERRIDES_UPLOAD_KEY.getName(),absolutePuName);
  File workingProjectDir=new File(serviceDir,"ext");
  final DSLServiceCompilationResult readServiceResult=readService(workingProjectDir,request.getServiceFileName(),absolutePuName,null,serviceOverridesFile);
  Service service=readServiceResult.getService();
  File overridesFile=readServiceResult.getServiceOverridesFile();
  validateInstallService(request,service,absolutePuName,overridesFile);
  File propertiesFile=readServiceResult.getServicePropertiesFile();
  if (propertiesFile == null && overridesFile != null) {
    String propertiesFileName=DSLUtils.getPropertiesFileName(workingProjectDir,DSLUtils.SERVICE_DSL_FILE_NAME_SUFFIX);
    logger.finer("Service [" + serviceName + "] has overrides file but no proeprties file."+ "Creating an empty properties file ["+ propertiesFileName+ "] to contain the overrides file's content.");
    propertiesFile=new File(workingProjectDir,propertiesFileName);
  }
  PropertiesOverridesMerger merger=new PropertiesOverridesMerger(propertiesFile,null,propertiesFile,overridesFile);
  merger.merge();
  File updatedPackedFile=servicePackedFolder;
  if (merger.isMerged()) {
    try {
      updatedPackedFile=Packager.createZipFile(absolutePuName,serviceDir);
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,"Failed to re-pack service folder [" + serviceDir.getAbsolutePath() + "]. Reason: "+ e.getMessage());
      throw new RestErrorException(CloudifyErrorMessages.FAILED_PACKING_SERVICE_FOLDER.getName(),serviceDir);
    }
  }
  String effectiveAuthGroups=getEffectiveAuthGroups(request.getAuthGroups());
  request.setAuthGroups(effectiveAuthGroups);
  final String deploymentID=UUID.randomUUID().toString();
  return installServiceInternal(appName,request,deploymentID,null,service,updatedPackedFile);
}
