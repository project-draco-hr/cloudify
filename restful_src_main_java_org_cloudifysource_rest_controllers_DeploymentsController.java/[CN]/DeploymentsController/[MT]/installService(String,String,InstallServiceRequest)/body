{
  final String absolutePuName=ServiceUtils.getAbsolutePUName(appName,serviceName);
  final File srcFile=repo.get(request.getUploadKey());
  if (srcFile == null) {
    throw new RestErrorException(CloudifyMessageKeys.WRONG_UPLOAD_KEY.getName(),request.getUploadKey());
  }
  File serviceDir=null;
  try {
    File baseDir=new File(restConfig.getTemporaryFolderPath(),"extracted");
    baseDir.mkdirs();
    baseDir.deleteOnExit();
    serviceDir=ServiceReader.extractProjectFileToDir(srcFile,absolutePuName,baseDir);
  }
 catch (  final IOException e1) {
    throw new RestErrorException(CloudifyMessageKeys.FAILED_TO_EXTRACT_PROJECT_FILE.getName(),absolutePuName);
  }
  File workingProjectDir=new File(serviceDir,"ext");
  File updatedSrcFile=updatePropertiesFile(request,serviceDir,absolutePuName,srcFile,workingProjectDir);
  String serviceFileName=request.getServiceFileName();
  DSLServiceCompilationResult result;
  try {
    if (serviceFileName != null) {
      result=ServiceReader.getServiceFromFile(new File(workingProjectDir,serviceFileName),workingProjectDir);
    }
 else {
      result=ServiceReader.getServiceFromDirectory(workingProjectDir);
    }
  }
 catch (  final Exception e) {
    throw new RestErrorException(CloudifyMessageKeys.FAILED_TO_READ_SERVICE.getName(),absolutePuName);
  }
  Service service=result.getService();
  String templateName=getTempalteNameFromService(service);
  String cloudConfigurationUploadKey=request.getCloudConfigurationUploadKey();
  byte[] serviceCloudConfigurationContents=null;
  File serviceCloudConfigurationFile=null;
  if (cloudConfigurationUploadKey != null) {
    serviceCloudConfigurationFile=repo.get(cloudConfigurationUploadKey);
    if (serviceCloudConfigurationFile == null) {
      throw new RestErrorException(CloudifyMessageKeys.WRONG_SERVICE_CLOUD_CONFIGURATION_UPLOAD_KEY.getName(),absolutePuName);
    }
    try {
      serviceCloudConfigurationContents=FileUtils.readFileToByteArray(serviceCloudConfigurationFile);
    }
 catch (    IOException e) {
      throw new RestErrorException(CloudifyMessageKeys.FAILED_TO_READ_SERVICE_CLOUD_CONFIGURATION.getName(),absolutePuName);
    }
  }
  String cloudOverridesUploadKey=request.getCloudOverridesUploadKey();
  File cloudOverridesFile=null;
  if (StringUtils.isBlank(cloudOverridesUploadKey)) {
    cloudOverridesFile=repo.get(cloudOverridesUploadKey);
    if (cloudOverridesFile == null) {
      throw new RestErrorException(CloudifyMessageKeys.WRONG_CLOUD_OVERRIDES_UPLOAD_KEY.getName(),absolutePuName);
    }
  }
  validateInstallService(absolutePuName,request,service,templateName,serviceCloudConfigurationFile);
  Properties serviceContextProperties=createServiceContextProperties(service,request);
  serviceContextProperties.setProperty(CloudifyConstants.CONTEXT_PROPERTY_TEMPLATE,templateName);
  String effectiveAuthGroups=request.getAuthGroups();
  if (StringUtils.isBlank(effectiveAuthGroups)) {
    if (permissionEvaluator != null) {
      effectiveAuthGroups=permissionEvaluator.getUserAuthGroupsString();
    }
 else {
      effectiveAuthGroups="";
    }
  }
  InstallServiceResponse installServiceResponse=new InstallServiceResponse();
  String deploymentID="";
  installServiceResponse.setDeploymentID(deploymentID);
  return installServiceResponse;
}
