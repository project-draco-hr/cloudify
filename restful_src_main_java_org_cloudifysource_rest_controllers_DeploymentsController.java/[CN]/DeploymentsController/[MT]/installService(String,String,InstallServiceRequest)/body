{
  final String absolutePuName=ServiceUtils.getAbsolutePUName(appName,serviceName);
  final File packedFile=getFromRepo(request.getUploadKey(),"service packed file",absolutePuName);
  final File serviceDir=extractServiceDir(packedFile,absolutePuName);
  final File serviceOverridesFile=getFromRepo(request.getServiceOverridesUploadKey(),CloudifyMessageKeys.WRONG_SERVICE_OVERRIDES_UPLOAD_KEY.getName(),absolutePuName);
  final File workingProjectDir=new File(serviceDir,"ext");
  final File updatedPackedFile=updatePropertiesFile(request,serviceOverridesFile,serviceDir,absolutePuName,workingProjectDir,packedFile);
  final Service service=readService(workingProjectDir,request.getServiceFileName(),absolutePuName);
  final String templateName=getTempalteNameFromService(service);
  final File cloudConfigurationFile=getFromRepo(request.getCloudConfigurationUploadKey(),CloudifyMessageKeys.WRONG_CLOUD_CONFIGURATION_UPLOAD_KEY.getName(),absolutePuName);
  final byte[] cloudConfigurationContents=getCloudConfigurationContent(cloudConfigurationFile,absolutePuName);
  final File cloudOverridesFile=getFromRepo(request.getCloudOverridesUploadKey(),CloudifyMessageKeys.WRONG_CLOUD_OVERRIDES_UPLOAD_KEY.getName(),absolutePuName);
  String effectiveAuthGroups=request.getAuthGroups();
  if (StringUtils.isBlank(effectiveAuthGroups)) {
    if (permissionEvaluator != null) {
      effectiveAuthGroups=permissionEvaluator.getUserAuthGroupsString();
    }
 else {
      effectiveAuthGroups="";
    }
  }
  validateInstallService(absolutePuName,request,service,templateName,cloudOverridesFile,serviceOverridesFile,cloudConfigurationFile);
  final DeploymentConfig deployConfig=new DeploymentConfig();
  final UUID deploymentID=UUID.randomUUID();
  deployConfig.setDeploymentId(deploymentID.toString());
  deployConfig.setAbsolutePUName(absolutePuName);
  deployConfig.setApplicationName(appName);
  deployConfig.setAuthGroups(effectiveAuthGroups);
  deployConfig.setCloud(restConfig.getCloud());
  deployConfig.setCloudConfig(cloudConfigurationContents);
  deployConfig.setCloudOverrides(FileUtils.readFileToString(cloudOverridesFile));
  deployConfig.setInstallRequest(request);
  final String locators=extractLocators(restConfig.getAdmin());
  deployConfig.setLocators(locators);
  deployConfig.setPackedFile(updatedPackedFile);
  deployConfig.setService(service);
  deployConfig.setTemplateName(templateName);
  final ElasticProcessingUnitDeploymentFactory fac=new ElasticProcessingUnitDeploymentFactoryImpl();
  final ElasticDeploymentTopology deployment=fac.create(deployConfig);
  deployAndWait(serviceName,(ElasticSpaceDeployment)deployment);
  final InstallServiceResponse installServiceResponse=new InstallServiceResponse();
  if (!request.isApplicationInstall()) {
    startPollingForLifecycleEvents(deploymentID,service.getName(),appName,service.getNumInstances(),true,request.getTimeout(),request.getTimeUnit());
  }
  installServiceResponse.setDeploymentID(deploymentID.toString());
  return installServiceResponse;
}
