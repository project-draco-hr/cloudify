{
  final String serviceOverridesUploadKey=request.getServiceOverridesUploadKey();
  final File applicationProeprtiesFile=request.getApplicationPropertiesFile();
  if (StringUtils.isBlank(serviceOverridesUploadKey) && applicationProeprtiesFile == null) {
    return srcFile;
  }
 else {
    final String propertiesFileName=DSLUtils.getPropertiesFileName(workingProjectDir,DSLUtils.SERVICE_DSL_FILE_NAME_SUFFIX);
    final File servicePropertiesFile=new File(workingProjectDir,propertiesFileName);
    final LinkedHashMap<File,String> filesToAppend=new LinkedHashMap<File,String>();
    try {
      final FileAppender appender=new FileAppender("finalPropertiesFile.properties");
      filesToAppend.put(applicationProeprtiesFile,"application proeprties file");
      filesToAppend.put(servicePropertiesFile,"service proeprties file");
      final File serviceOverridesFile=repo.get(serviceOverridesUploadKey);
      if (serviceOverridesFile != null) {
        if (serviceOverridesFile.length() > CloudifyConstants.SERVICE_OVERRIDES_FILE_LENGTH_LIMIT_BYTES) {
          throw new RestErrorException(CloudifyMessageKeys.SERVICE_OVERRIDES_SIZE_LIMIT_EXCEEDED.getName());
        }
        filesToAppend.put(serviceOverridesFile,"service overrides file");
      }
      appender.appendAll(servicePropertiesFile,filesToAppend);
      return Packager.createZipFile(absolutePuName,serviceDir);
    }
 catch (    final IOException e) {
      throw new RestErrorException(CloudifyMessageKeys.FAILED_TO_MERGE_OVERRIDES.getName(),absolutePuName);
    }
  }
}
