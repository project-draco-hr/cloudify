{
  String serviceName=service.getName();
  final String absolutePuName=ServiceUtils.getAbsolutePUName(appName,serviceName);
  final String templateName=getTempalteNameFromService(service);
  final File cloudOverridesFile=getFromRepo(request.getCloudOverridesUploadKey(),CloudifyMessageKeys.WRONG_CLOUD_OVERRIDES_UPLOAD_KEY.getName(),absolutePuName);
  final File cloudConfigurationFile=getFromRepo(request.getCloudConfigurationUploadKey(),CloudifyMessageKeys.WRONG_CLOUD_CONFIGURATION_UPLOAD_KEY.getName(),absolutePuName);
  final byte[] cloudConfigurationContents=getCloudConfigurationContent(cloudConfigurationFile,absolutePuName);
  String effectiveAuthGroups=getEffectiveAuthGroups(request.getAuthGroups());
  request.setAuthGroups(effectiveAuthGroups);
  String cloudOverrides=null;
  try {
    if (cloudOverridesFile != null) {
      cloudOverrides=FileUtils.readFileToString(cloudOverridesFile);
    }
  }
 catch (  IOException e) {
    throw new RestErrorException("Failed reading cloud overrides file.",e);
  }
  deleteServiceAttributes(appName,serviceName);
  final DeploymentConfig deployConfig=new DeploymentConfig();
  final String locators=extractLocators(restConfig.getAdmin());
  final Cloud cloud=restConfig.getCloud();
  deployConfig.setCloudConfig(cloudConfigurationContents);
  deployConfig.setDeploymentId(deploymentID);
  deployConfig.setAuthGroups(effectiveAuthGroups);
  deployConfig.setAbsolutePUName(absolutePuName);
  deployConfig.setCloudOverrides(cloudOverrides);
  deployConfig.setCloud(cloud);
  deployConfig.setPackedFile(packedFile);
  deployConfig.setTemplateName(templateName);
  deployConfig.setApplicationName(appName);
  deployConfig.setInstallRequest(request);
  deployConfig.setLocators(locators);
  deployConfig.setService(service);
  final ElasticProcessingUnitDeploymentFactory fac=new ElasticProcessingUnitDeploymentFactoryImpl(this.restConfig);
  final ElasticDeploymentTopology deployment;
  try {
    deployment=fac.create(deployConfig);
  }
 catch (  ElasticDeploymentCreationException e) {
    throw new RestErrorException("Failed creating deployment object.",e);
  }
  try {
    ProcessingUnit processingUnit=deployAndWait(serviceName,deployment);
    populateEventsCache(deploymentID,processingUnit);
  }
 catch (  final TimeoutException e) {
    throw new RestErrorException("Timed out waiting for deployment.",e);
  }
  final InstallServiceResponse installServiceResponse=new InstallServiceResponse();
  installServiceResponse.setDeploymentID(deploymentID);
  return installServiceResponse;
}
