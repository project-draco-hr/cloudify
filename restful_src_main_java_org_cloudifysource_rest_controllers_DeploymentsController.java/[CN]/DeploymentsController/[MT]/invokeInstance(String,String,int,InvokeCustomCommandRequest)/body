{
  InvokeInstanceCommandResponse response=new InvokeInstanceCommandResponse();
  final String absolutePuName=ServiceUtils.getAbsolutePUName(applicationName,serviceName);
  if (logger.isLoggable(Level.FINER)) {
    logger.finer("received request to invoke command of service " + serviceName + " of application "+ applicationName);
  }
  final ProcessingUnit pu=admin.getProcessingUnits().waitFor(absolutePuName,PU_DISCOVERY_TIMEOUT_SEC,TimeUnit.SECONDS);
  if (pu == null) {
    logger.severe("Could not find service " + absolutePuName);
    throw new ResourceNotFoundException(absolutePuName);
  }
  if (permissionEvaluator != null) {
    final String puAuthGroups=pu.getBeanLevelProperties().getContextProperties().getProperty(CloudifyConstants.CONTEXT_PROPERTY_AUTH_GROUPS);
    final Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
    final CloudifyAuthorizationDetails authDetails=new CloudifyAuthorizationDetails(authentication);
    permissionEvaluator.verifyPermission(authDetails,puAuthGroups,"deploy");
  }
  final InternalProcessingUnitInstance pui=findInstanceById(pu,instanceId);
  if (pui == null) {
    logger.severe("Could not find service instance " + instanceId + " for service "+ absolutePuName);
    throw new RestErrorException(ResponseConstants.SERVICE_INSTANCE_UNAVAILABLE,applicationName,absolutePuName,Integer.toString(instanceId));
  }
  final String instanceName=buildServiceInstanceName(pui);
  Object invocationResult;
  try {
    Map<String,Object> invocationArgs=preProcessInvocationRequest(request.getCommandName(),request.getParameters());
    final Future<?> future=pui.invoke(CloudifyConstants.INVOCATION_PARAMETER_BEAN_NAME_USM,invocationArgs);
    invocationResult=future.get();
    Map<String,String> finalResult=postProcessInvocationResult(instanceName,invocationResult);
    response.setInvocationResult(finalResult);
  }
 catch (  final Exception e) {
    String errorMessage="Error occurred while invoking custom command on pu instance " + absolutePuName + ":"+ instanceId+ " on host "+ pui.getVirtualMachine().getMachine().getHostName()+ ". Reported error: "+ e.getMessage();
    logger.severe(errorMessage);
    throw new RestErrorException(ResponseConstants.FAILED_TO_INVOKE_INSTANCE,absolutePuName,Integer.toString(instanceId),e.getMessage());
  }
  return response;
}
