{
  InvokeServiceCommandResponse response=new InvokeServiceCommandResponse();
  final String absolutePuName=ServiceUtils.getAbsolutePUName(applicationName,serviceName);
  if (logger.isLoggable(Level.FINER)) {
    logger.finer("received request to invoke command of service " + absolutePuName + " of application "+ applicationName);
  }
  final ProcessingUnit pu=admin.getProcessingUnits().waitFor(absolutePuName,PU_DISCOVERY_TIMEOUT_SEC,TimeUnit.SECONDS);
  if (pu == null) {
    logger.severe("Could not find service " + absolutePuName);
    throw new ResourceNotFoundException(absolutePuName);
  }
  if (permissionEvaluator != null) {
    final String puAuthGroups=pu.getBeanLevelProperties().getContextProperties().getProperty(CloudifyConstants.CONTEXT_PROPERTY_AUTH_GROUPS);
    final Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
    final CloudifyAuthorizationDetails authDetails=new CloudifyAuthorizationDetails(authentication);
    permissionEvaluator.verifyPermission(authDetails,puAuthGroups,"deploy");
  }
  final ProcessingUnitInstance[] instances=pu.getInstances();
  if (instances.length == 0) {
    throw new RestErrorException(ResponseConstants.NO_PROCESSING_UNIT_INSTANCES_FOUND_FOR_INVOCATION,serviceName);
  }
  final Map<String,Future<Object>> futures=new HashMap<String,Future<Object>>(instances.length);
  for (  final ProcessingUnitInstance instance : instances) {
    final String serviceInstanceName=buildServiceInstanceName(instance);
    try {
      Map<String,Object> invocationArgs=preProcessInvocationRequest(request.getCommandName(),request.getParameters());
      final Future<Object> future=((DefaultProcessingUnitInstance)instance).invoke(CloudifyConstants.INVOCATION_PARAMETER_BEAN_NAME_USM,invocationArgs);
      futures.put(serviceInstanceName,future);
    }
 catch (    final Exception e) {
      String errorMessage="Error occurred while invoking custom command '" + request.getCommandName() + "' on service "+ serviceName+ ":"+ instance.getInstanceId()+ " on host "+ instance.getVirtualMachine().getMachine().getHostName()+ ". Reported error: "+ e.getMessage();
      logger.severe(errorMessage);
      Map<String,String> processedResult=postProcessInvocationResult(serviceInstanceName,errorMessage);
      response.setInvocationResult(serviceInstanceName,processedResult);
    }
  }
  for (  final Map.Entry<String,Future<Object>> entry : futures.entrySet()) {
    String serviceInstanceName=entry.getKey();
    Object invocationResult;
    try {
      invocationResult=entry.getValue().get();
    }
 catch (    final Exception e) {
      String errorMessage="Error occurred while invoking custom command on service " + serviceName + ":"+ serviceInstanceName+ ". Reported error: "+ e.getMessage();
      logger.severe(errorMessage);
      invocationResult=errorMessage;
    }
    Map<String,String> processedResult=postProcessInvocationResult(serviceInstanceName,invocationResult);
    response.setInvocationResult(serviceInstanceName,processedResult);
  }
  return response;
}
