{
  final File testParsingBaseDslFile=new File(TEST_PARSING_RESOURCE_PATH + "test_parsing_base-service.groovy");
  final File testParsingBaseWorkDir=new File(TEST_PARSING_RESOURCE_PATH);
  final Service baseService=ServiceReader.getServiceFromFile(testParsingBaseDslFile,testParsingBaseWorkDir).getService();
  Assert.assertFalse(baseService.getName().equals("test parsing extend"));
  final ServiceLifecycle baseLifecycle=baseService.getLifecycle();
  Assert.assertFalse(baseLifecycle.getInit().equals("test_parsing_extend_install.groovy"));
  Assert.assertNull(baseLifecycle.getStop());
  Assert.assertFalse(baseLifecycle.getStart().equals("start"));
  final File testParsingExtendDslFile=new File(TEST_PARSING_RESOURCE_PATH + "test_parsing_extend_two_level-service.groovy");
  final File testParsingExtendWorkDir=new File(TEST_PARSING_RESOURCE_PATH);
  final Service service=ServiceReader.getServiceFromFile(testParsingExtendDslFile,testParsingExtendWorkDir).getService();
  Assert.assertEquals("test parsing extend two level",service.getName());
  final ServiceLifecycle lifecycle=service.getLifecycle();
  Assert.assertEquals("test_parsing_extend_install.groovy",lifecycle.getInit());
  Assert.assertNotNull(lifecycle.getStart());
  Assert.assertNotNull(lifecycle.getPostStart());
  Assert.assertNotNull(lifecycle.getPreStop());
  Assert.assertNotNull(lifecycle.getStop());
  Assert.assertEquals("install",lifecycle.getInstall());
  Assert.assertEquals("start",lifecycle.getStart());
  Assert.assertEquals(2,service.getExtendedServicesPaths().size());
  Assert.assertEquals("test_parsing_extend-service.groovy",service.getExtendedServicesPaths().getFirst());
  Assert.assertEquals("test_parsing_base-service.groovy",service.getExtendedServicesPaths().getLast());
}
