{
  try {
    deployer=(ByonDeployer)context.getOrCreate("UNIQUE_BYON_DEPLOYER_ID",new Callable<Object>(){
      @Override public Object call() throws Exception {
        logger.info("Creating BYON context deployer for cloud: " + cloud.getName());
        final ByonDeployer deployer=new ByonDeployer();
        List<Map<String,String>> nodesList=null;
        final Map<String,CloudTemplate> templatesMap=cloud.getTemplates();
        for (        final String templateName : templatesMap.keySet()) {
          final Map<String,Object> customSettings=cloud.getTemplates().get(templateName).getCustom();
          if (customSettings != null) {
            nodesList=(List<Map<String,String>>)customSettings.get(CLOUD_NODES_LIST);
          }
          if (nodesList == null) {
            publishEvent("prov_invalid_configuration");
            throw new CloudProvisioningException("Failed to create BYON cloud deployer, invalid configuration");
          }
          deployer.addNodesList(templateName,nodesList);
        }
        final Map<String,Object> customSettings=cloud.getCustom();
        if (customSettings != null) {
          if (customSettings.containsKey(CLEAN_GS_FILES_ON_SHUTDOWN)) {
            final Object cleanOnShutdownStr=customSettings.get(CLEAN_GS_FILES_ON_SHUTDOWN);
            if (cleanOnShutdownStr != null && StringUtils.isNotBlank((String)cleanOnShutdownStr)) {
              cleanGsFilesOnShutdown=((String)cleanOnShutdownStr).equalsIgnoreCase("true");
            }
          }
        }
        return deployer;
      }
    }
);
  }
 catch (  final Exception e) {
    publishEvent("connection_to_cloud_api_failed",cloud.getProvider().getProvider());
    throw new IllegalStateException("Failed to create cloud deployer",e);
  }
}
