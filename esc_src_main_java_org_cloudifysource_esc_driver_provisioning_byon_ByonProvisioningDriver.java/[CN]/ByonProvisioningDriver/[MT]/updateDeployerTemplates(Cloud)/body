{
  final Map<String,ComputeTemplate> cloudTemplatesMap=cloud.getCloudCompute().getTemplates();
  final List<String> cloudTemplateNames=new LinkedList<String>(cloudTemplatesMap.keySet());
  final List<String> deployerTemplateNames=getDeployer().getTemplatesList();
  final List<String> redundantTemplates=new LinkedList<String>(deployerTemplateNames);
  redundantTemplates.removeAll(cloudTemplateNames);
  if (!redundantTemplates.isEmpty()) {
    logger.info("initDeployer - found redundant templates: " + redundantTemplates);
    getDeployer().removeTemplates(redundantTemplates);
  }
  final List<String> missingTemplates=new LinkedList<String>(cloudTemplateNames);
  missingTemplates.removeAll(deployerTemplateNames);
  if (!missingTemplates.isEmpty()) {
    logger.info("initDeployer - found missing templates: " + missingTemplates);
    final Map<String,ComputeTemplate> templatesMap=new HashMap<String,ComputeTemplate>();
    for (    final String templateName : missingTemplates) {
      final ComputeTemplate cloudTemplate=cloudTemplatesMap.get(templateName);
      templatesMap.put(templateName,cloudTemplate);
    }
    addTemplatesToDeployer(getDeployer(),templatesMap);
  }
}
