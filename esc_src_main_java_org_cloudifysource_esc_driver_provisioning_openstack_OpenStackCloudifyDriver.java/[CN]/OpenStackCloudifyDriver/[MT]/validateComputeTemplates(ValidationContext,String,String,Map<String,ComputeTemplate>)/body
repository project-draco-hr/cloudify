{
  String templateName;
  for (  Entry<String,ComputeTemplate> entry : templates.entrySet()) {
    final ComputeTemplate computeTemplate=entry.getValue();
    templateName=entry.getKey();
    validationContext.validationEvent(ValidationMessageType.GROUP_VALIDATION_MESSAGE,getFormattedMessage("validating_template",templateName));
    final String imageLocation=computeTemplate.getImageId();
    if (!imageLocation.contains("/")) {
      throw new CloudProvisioningException("'imageId' should be formatted as region/imageId." + " Verify the cloud template : " + templateName);
    }
    final String hardwareLocation=computeTemplate.getHardwareId();
    if (!hardwareLocation.contains("/")) {
      throw new CloudProvisioningException("'hardwareId' should be formatted as region/flavorId." + " Verify the cloud template : " + templateName);
    }
    this.validateImageHardwareLocation(validationContext,groovyFile,propertiesFile,computeTemplate);
    this.validateStaticSecgroups(validationContext,groovyFile,propertiesFile,computeTemplate);
    this.validateStaticNetworks(validationContext,groovyFile,propertiesFile,computeTemplate);
  }
}
