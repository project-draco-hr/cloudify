{
  final String imageId=template.getImageId().split("/")[1];
  final String hardwareId=template.getHardwareId().split("/")[1];
  final String keyName=(String)template.getOptions().get(OPT_KEY_PAIR);
  String serverId=null;
  final List<String> reservedPortIds=new ArrayList<String>();
  try {
    final NovaServerResquest request=new NovaServerResquest();
    request.setName(serverName);
    request.setKeyName(keyName);
    request.setImageRef(imageId);
    request.setFlavorRef(hardwareId);
    if (this.networkHelper.useManagementNetwork()) {
      final String managementNetworkName=this.networkHelper.getManagementNetworkName();
      final Network managementNetwork=this.networkApi.getNetworkByName(managementNetworkName);
      final Port port=this.addPortToRequest(request,managementNetwork.getId(),managementNetwork.getSubnets());
      reservedPortIds.add(port.getId());
    }
    for (    final String networkName : this.networkHelper.getComputeNetworks()) {
      final Network network=this.networkApi.getNetworkByName(networkName);
      if (network == null) {
        throw new CloudProvisioningException("Couldn't find network '" + networkName + "'");
      }
      final Port port=this.addPortToRequest(request,network.getId(),network.getSubnets());
      reservedPortIds.add(port.getId());
    }
    if (!management && this.networkHelper.useServiceNetworkTemplate()) {
      final String applicationNetworkName=this.networkHelper.getApplicationNetworkName();
      final Network templateNetwork=this.networkApi.getNetworkByName(applicationNetworkName);
      final Port port=this.addPortToRequest(request,templateNetwork.getId(),templateNetwork.getSubnets());
      reservedPortIds.add(port.getId());
    }
    NovaServer newServer=computeApi.createServer(request);
    serverId=newServer.getId();
    newServer=this.waitForServerToBecomeReady(serverId,endTime);
    if (management) {
      this.addSecurityGroupsToServer(serverId,this.openstackPrefixNames.getManagementName(),this.openstackPrefixNames.getClusterName());
    }
 else {
      this.addSecurityGroupsToServer(serverId,this.openstackPrefixNames.getAgentName(),this.openstackPrefixNames.getClusterName(),this.openstackPrefixNames.getApplicationName(),this.openstackPrefixNames.getServiceName());
    }
    if (this.networkHelper.associateFloatingIp()) {
      final String privateIPNetworkName=this.networkHelper.getPrivateIpNetworkName();
      final Network privateIpNetwork=this.networkApi.getNetworkByName(privateIPNetworkName);
      networkApi.createAndAssociateFloatingIp(serverId,privateIpNetwork.getId());
    }
    final MachineDetails md=this.createMachineDetails(template,newServer);
    return md;
  }
 catch (  final Exception e) {
    logger.log(Level.SEVERE,"An error occured during initialization." + " Shutting down machine and cleaning openstack resources",e);
    if (serverId != null) {
      try {
        computeApi.deleteServer(serverId);
      }
 catch (      final OpenstackException e1) {
        logger.log(Level.WARNING,"Cleaning after error. Could not delete server.",e1);
      }
    }
 else {
      for (      final String portId : reservedPortIds) {
        try {
          networkApi.deletePort(portId);
        }
 catch (        final OpenstackException e1) {
          logger.log(Level.WARNING,"Cleaning after error. Could not delete server.",e1);
        }
      }
    }
    throw new CloudProvisioningException(e);
  }
}
