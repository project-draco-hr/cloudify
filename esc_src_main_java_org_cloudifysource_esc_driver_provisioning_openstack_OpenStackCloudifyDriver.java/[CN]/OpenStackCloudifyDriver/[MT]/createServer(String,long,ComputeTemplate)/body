{
  final String imageId=template.getImageId().split("/")[1];
  final String hardwareId=template.getHardwareId().split("/")[1];
  final String keyName=(String)template.getOptions().get(OPT_KEY_PAIR);
  String serverId=null;
  Port createdMngPort=null;
  Port createdPort=null;
  try {
    Network managementNetwork=networkApi.getNetworkByName(this.managementNetworkName);
    if (managementNetwork == null) {
      managementNetwork=networkApi.getNetworkByName(this.securityGroupNames.getPrefix() + this.managementNetworkName);
    }
    final NovaServerResquest request=new NovaServerResquest();
    request.setName(serverName);
    request.setKeyName(keyName);
    request.setImageRef(imageId);
    request.setFlavorRef(hardwareId);
    createdMngPort=this.addPortToRequest(managementNetwork,this.cloud.getCloudNetwork().getManagement().getNetworkConfiguration(),request);
    if (!management) {
      if (!this.managementNetworkName.equals(this.applicationNetworkName)) {
        Network appliNetwork=networkApi.getNetworkByName(this.applicationNetworkName);
        if (appliNetwork == null) {
          appliNetwork=networkApi.getNetworkByName(this.securityGroupNames.getPrefix() + this.applicationNetworkName);
        }
        createdPort=this.addPortToRequest(appliNetwork,this.networkConfiguration,request);
      }
    }
    NovaServer newServer=computeApi.createServer(request);
    serverId=newServer.getId();
    newServer=this.waitForServerToBecomeReady(serverId,endTime);
    if (this.associateFloatingIp) {
      networkApi.createAndAssociateFloatingIp(serverId,managementNetwork.getId());
    }
    if (this.management) {
      this.addSecurityGroupsToNetwork(serverId,managementNetwork,new String[]{this.securityGroupNames.getManagementName(),this.securityGroupNames.getClusterName()});
    }
 else {
      this.addSecurityGroupsToNetwork(serverId,managementNetwork,new String[]{this.securityGroupNames.getAgentName(),this.securityGroupNames.getClusterName(),this.securityGroupNames.getServiceName()});
      Network appliNetwork=networkApi.getNetworkByName(this.applicationNetworkName);
      if (appliNetwork == null) {
        appliNetwork=networkApi.getNetworkByName(this.securityGroupNames.getPrefix() + this.applicationNetworkName);
      }
      this.addSecurityGroupsToNetwork(serverId,appliNetwork,new String[]{this.securityGroupNames.getClusterName(),this.securityGroupNames.getApplicationName(),this.securityGroupNames.getServiceName()});
    }
    final MachineDetails md=this.createMachineDetails(template,newServer);
    return md;
  }
 catch (  final Exception e) {
    logger.log(Level.SEVERE,"Cloud machine was started but an error occured during initialization. Shutting down machine",e);
    if (serverId != null) {
      try {
        computeApi.deleteServer(serverId);
      }
 catch (      final OpenstackException e1) {
        throw new CloudProvisioningException(e1);
      }
    }
 else {
      if (createdPort != null) {
        try {
          networkApi.deletePort(createdPort.getId());
        }
 catch (        final OpenstackException e1) {
          throw new CloudProvisioningException(e1);
        }
      }
      if (createdMngPort != null) {
        try {
          networkApi.deletePort(createdMngPort.getId());
        }
 catch (        final OpenstackException e1) {
          throw new CloudProvisioningException(e1);
        }
      }
    }
    throw new CloudProvisioningException(e);
  }
}
