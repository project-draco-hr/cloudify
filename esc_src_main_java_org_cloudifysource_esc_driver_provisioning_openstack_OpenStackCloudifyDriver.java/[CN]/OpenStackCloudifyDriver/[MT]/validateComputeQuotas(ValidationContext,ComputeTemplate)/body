{
  try {
    validationContext.validationOngoingEvent(ValidationMessageType.TOP_LEVEL_VALIDATION_MESSAGE,getFormattedMessage("validating_compute_quotas"));
    final ComputeLimits limits=this.computeApi.getLimits();
    if (limits == null) {
      throw new OpenstackException("Error requesting compute limits");
    }
    final int coreLimit=limits.getLimits().getMaxTotalCores();
    final int ramLimit=limits.getLimits().getMaxTotalRAMSize();
    final int instanceLimit=limits.getLimits().getMaxTotalInstances();
    final List<NovaServer> servers=this.computeApi.getServers();
    if (servers == null) {
      throw new CloudProvisioningException("Failed requesting list of servers");
    }
    if (instanceLimit == 0) {
      logger.warning("Failed to retrieve instances quota, skipping instance quota validation");
      validationContext.validationEventEnd(ValidationResultType.WARNING);
    }
 else {
      validateInstanceQuota(validationContext,instanceLimit,servers);
    }
    if (coreLimit == 0 && ramLimit == 0) {
      logger.warning("Failed to retrieve vCPUs and RAM quotas, skipping vCPUs and RAM validations");
      validationContext.validationEventEnd(ValidationResultType.WARNING);
    }
 else {
      validateCoreAndRamQuota(validationContext,managementComputeTemplate,coreLimit,ramLimit,servers);
    }
    validationContext.validationEventEnd(ValidationResultType.OK);
  }
 catch (  final OpenstackException e) {
    validationContext.validationEventEnd(ValidationResultType.WARNING);
    logger.log(Level.WARNING,"Cannot validate compute quotas on this provider.");
  }
}
