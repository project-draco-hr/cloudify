{
  super.setConfig(configuration);
  final String serviceName;
  if (!this.management) {
    final FullServiceName fsn=ServiceUtils.getFullServiceName(configuration.getServiceName());
    applicationName=fsn.getApplicationName();
    serviceName=fsn.getServiceName();
  }
 else {
    applicationName=null;
    serviceName=null;
  }
  String managementGroup=cloud.getProvider().getManagementGroup();
  managementGroup=managementGroup == null ? MANAGMENT_MACHINE_PREFIX : managementGroup;
  this.securityGroupNames=new SecurityGroupNames(managementGroup,applicationName,serviceName);
  final ManagementNetwork managementNetwork=this.cloud.getCloudNetwork().getManagement();
  final NetworkConfiguration managementNetworkConfig=managementNetwork.getNetworkConfiguration();
  this.managementNetworkName=managementGroup + managementNetworkConfig.getName();
  if (management) {
    final ComputeTemplate template=this.cloud.getCloudCompute().getTemplates().get(this.cloud.getConfiguration().getManagementMachineTemplate());
    final String extRouterName=(String)template.getOptions().get(OPT_EXTERNAL_ROUTER_NAME);
    this.externalRouterName=StringUtils.isEmpty(extRouterName) ? null : extRouterName;
    final String extNetName=(String)template.getOptions().get(OPT_EXTERNAL_NETWORK_NAME);
    this.externalNetworkName=StringUtils.isEmpty(extNetName) ? null : extNetName;
    final String skipExtNetStr=(String)template.getOptions().get(OPT_SKIP_EXTERNAL_NETWORKING);
    this.skipExternalNetworking=BooleanUtils.toBoolean(skipExtNetStr);
    this.networkConfiguration=managementNetworkConfig;
  }
 else {
    final CloudNetwork cloudNetwork=this.cloud.getCloudNetwork();
    final Map<String,NetworkConfiguration> templates=cloudNetwork.getTemplates();
    if (templates == null || templates.isEmpty()) {
      throw new IllegalStateException("No network template found.");
    }
    final ServiceNetwork serviceNetwork=this.configuration.getNetwork();
    if (serviceNetwork == null || StringUtils.isEmpty(serviceNetwork.getTemplate())) {
      final String networkTemplateName=templates.keySet().iterator().next();
      this.networkConfiguration=templates.get(networkTemplateName);
    }
 else {
      this.networkConfiguration=templates.get(serviceNetwork.getTemplate());
    }
    this.applicationNetworkName=this.securityGroupNames.getPrefix() + networkConfiguration.getName();
  }
  final String associateFloatingIp=this.networkConfiguration.getCustom().get("associateFloatingIpOnBootstrap");
  this.associateFloatingIp=BooleanUtils.toBoolean(associateFloatingIp);
}
