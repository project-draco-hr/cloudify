{
  ValidationUtil.validateAllNetworkNames(configuration);
  super.setConfig(configuration);
  final String serviceName;
  if (!this.management) {
    final FullServiceName fsn=ServiceUtils.getFullServiceName(configuration.getServiceName());
    applicationName=fsn.getApplicationName();
    serviceName=fsn.getServiceName();
  }
 else {
    applicationName=null;
    serviceName=null;
  }
  String managementGroup=cloud.getProvider().getManagementGroup();
  managementGroup=managementGroup == null ? MANAGMENT_MACHINE_PREFIX : managementGroup;
  this.securityGroupNames=new SecurityGroupNames(managementGroup,applicationName,serviceName);
  if (management) {
    final String machineTemplateName=this.cloud.getConfiguration().getManagementMachineTemplate();
    final ComputeTemplate mngTemplate=this.cloud.getCloudCompute().getTemplates().get(machineTemplateName);
    final ComputeTemplateNetwork computeNetwork=mngTemplate.getComputeNetwork();
    if (computeNetwork == null || computeNetwork.getNetworks() == null || computeNetwork.getNetworks().isEmpty()) {
      final String extRouterName=(String)mngTemplate.getOptions().get(OPT_EXTERNAL_ROUTER_NAME);
      this.externalRouterName=StringUtils.isEmpty(extRouterName) ? null : extRouterName;
      final String extNetName=(String)mngTemplate.getOptions().get(OPT_EXTERNAL_NETWORK_NAME);
      this.externalNetworkName=StringUtils.isEmpty(extNetName) ? null : extNetName;
      final String skipExtNetStr=(String)mngTemplate.getOptions().get(OPT_SKIP_EXTERNAL_NETWORKING);
      this.skipExternalNetworking=BooleanUtils.toBoolean(skipExtNetStr);
      final ManagementNetwork managementNetwork=this.cloud.getCloudNetwork().getManagement();
      final NetworkConfiguration managementNetworkConfig=managementNetwork.getNetworkConfiguration();
      this.managementNetworkName=managementNetworkConfig.getName();
      if (this.managementNetworkName == null) {
        throw new CloudProvisioningException("The management network network must be provided");
      }
      this.networkConfiguration=managementNetworkConfig;
    }
 else {
      computeNetworks=computeNetwork.getNetworks();
    }
  }
 else {
    final ComputeTemplate template=this.cloud.getCloudCompute().getTemplates().get(this.cloudTemplateName);
    final ComputeTemplateNetwork computeNetwork=template.getComputeNetwork();
    if (computeNetwork == null || computeNetwork.getNetworks() == null || computeNetwork.getNetworks().isEmpty()) {
      final ManagementNetwork managementNetwork=this.cloud.getCloudNetwork().getManagement();
      final NetworkConfiguration managementNetworkConfig=managementNetwork.getNetworkConfiguration();
      this.managementNetworkName=managementNetworkConfig.getName();
      final CloudNetwork cloudNetwork=this.cloud.getCloudNetwork();
      final Map<String,NetworkConfiguration> templates=cloudNetwork.getTemplates();
      if (templates == null || templates.isEmpty()) {
        throw new CloudProvisioningException("No network template found.");
      }
      final ServiceNetwork serviceNetwork=this.configuration.getNetwork();
      if (serviceNetwork == null || StringUtils.isEmpty(serviceNetwork.getTemplate())) {
        final String networkTemplateName=templates.keySet().iterator().next();
        this.networkConfiguration=templates.get(networkTemplateName);
      }
 else {
        NetworkConfiguration nc=templates.get(serviceNetwork.getTemplate());
        if (nc == null) {
          throw new CloudProvisioningException("The network template name '" + serviceNetwork.getTemplate() + "' was not found");
        }
        this.networkConfiguration=nc;
      }
      this.applicationNetworkName=networkConfiguration.getName();
    }
 else {
      this.computeNetworks=computeNetwork.getNetworks();
      if (this.computeNetworks == null || computeNetworks.isEmpty()) {
        throw new CloudProvisioningException("No network configuration found in template '" + this.cloudTemplateName + "'. You must either use a networkTemplate"+ " or declare a computeNetwork in your computeTemplate.");
      }
    }
  }
  if (this.computeNetworks == null) {
    final String associateFloatingIp=this.networkConfiguration.getCustom().get("associateFloatingIpOnBootstrap");
    this.associateFloatingIp=BooleanUtils.toBoolean(associateFloatingIp);
  }
 else {
    this.associateFloatingIp=false;
  }
}
