{
  final String serviceSecgroupName=this.securityGroupNames.getServiceName();
  final SecurityGroup serviceSecGroup=networkApi.getSecurityGroupsByName(serviceSecgroupName);
  final String managementSecgroupName=this.securityGroupNames.getManagementName();
  final SecurityGroup managementSecGroup=networkApi.getSecurityGroupsByName(managementSecgroupName);
  final ComputeTemplate cloudTemplate=cloud.getCloudCompute().getTemplates().get(cloudTemplateName);
  final String port=Integer.toString(cloudTemplate.getFileTransfer().getDefaultPort());
  final SecurityGroupRule request=new SecurityGroupRule();
  request.setSecurityGroupId(serviceSecGroup.getId());
  request.setDirection("ingress");
  request.setProtocol(DEFAULT_PROTOCOL);
  request.setPortRangeMax(port);
  request.setPortRangeMin(port);
  request.setRemoteGroupId(managementSecGroup.getId());
  networkApi.createSecurityGroupRule(request);
  final AccessRules accessRules=this.networkHelper.getServiceAccessRules();
  if (accessRules != null) {
    for (    final AccessRule accessRule : accessRules.getIncoming()) {
      this.createAccessRule(serviceSecGroup.getId(),"ingress",accessRule);
    }
    for (    final AccessRule accessRule : accessRules.getOutgoing()) {
      this.deleteEgressRulesFromSecurityGroup(this.securityGroupNames.getServiceName());
      this.createAccessRule(serviceSecGroup.getId(),"egress",accessRule);
    }
  }
}
