{
  try {
    final MachineDetails md=this.createMachineDetailsForTemplate(template);
    md.setMachineId(server.getId());
    md.setCloudifyInstalled(false);
    md.setInstallationDirectory(null);
    md.setOpenFilesLimit(template.getOpenFilesLimit());
    final String privateIpNetworkName=this.networkHelper.getPrivateIpNetworkName();
    final Network privateIpNetwork=this.networkApi.getNetworkByName(privateIpNetworkName);
    if (privateIpNetwork == null) {
      throw new CloudProvisioningException("Couldn't find network '" + privateIpNetworkName + "' to set private IP.");
    }
    final Port privateIpPort=networkApi.getPort(server.getId(),privateIpNetwork.getId());
    if (privateIpPort == null) {
      throw new CloudProvisioningException("Server '" + server.getName() + "' has no port on network '"+ privateIpNetwork.getName()+ "'.");
    }
    if (privateIpPort.getFixedIps() == null || privateIpPort.getFixedIps().isEmpty()) {
      throw new CloudProvisioningException("No fixed IP found on the port which link server '" + server.getName() + "' tonetwork '"+ privateIpNetwork.getName()+ "'.");
    }
    final RouteFixedIp fixedIp=privateIpPort.getFixedIps().get(0);
    md.setPrivateAddress(fixedIp.getIpAddress());
    if (this.networkHelper.associateFloatingIp()) {
      final FloatingIp floatingIp=networkApi.getFloatingIpByPortId(privateIpPort.getId());
      if (floatingIp != null) {
        md.setPublicAddress(floatingIp.getFloatingIpAddress());
      }
    }
    final String applicationNetworkName=this.networkHelper.getApplicationNetworkPrefixedName();
    if (applicationNetworkName != null) {
      final Network appliNetwork=this.networkApi.getNetworkByName(applicationNetworkName);
      final Port appliPort=networkApi.getPort(server.getId(),appliNetwork.getId());
      final RouteFixedIp appliFixedIp=appliPort.getFixedIps().get(0);
      Map<String,String> env=new HashMap<String,String>();
      env.put("CLOUDIFY_APPLICATION_NETWORK_IP",appliFixedIp.getIpAddress());
      md.setEnvironment(env);
    }
    this.handleServerCredentials(md,template);
    return md;
  }
 catch (  Exception e) {
    throw new CloudProvisioningException(e);
  }
}
