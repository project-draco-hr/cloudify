{
  if (!this.networkHelper.skipExternalNetworking()) {
    final Router router;
    if (this.networkHelper.isCreateExternalRouter()) {
      router=networkApi.getRouterByName(this.openstackPrefixes.getPrefix() + MANAGEMENT_PUBLIC_ROUTER_NAME);
    }
 else {
      router=networkApi.getRouterByName(this.networkHelper.getExternalRouterName());
    }
    if (router != null) {
      try {
        final String privateIpNetworkName=this.networkHelper.getPrivateIpNetworkName();
        Network privateNetwork=this.networkApi.getNetworkByName(privateIpNetworkName);
        String[] privateNetSubnetIds=privateNetwork.getSubnets();
        final List<Port> ports=networkApi.getPortsByDeviceId(router.getId());
        for (        final Port port : ports) {
          for (          final RouteFixedIp fixedIp : port.getFixedIps()) {
            for (            final String id : privateNetSubnetIds) {
              if (id.equals(fixedIp.getSubnetId())) {
                networkApi.deleteRouterInterface(router.getId(),fixedIp.getSubnetId());
              }
            }
          }
        }
      }
 catch (      final Exception e) {
        logger.log(Level.WARNING,"Could not remove an interface from external router",e);
      }
      if (this.networkHelper.isCreateExternalRouter()) {
        networkApi.deleteRouter(router.getId());
      }
    }
  }
  final List<Network> appliNetworks=networkApi.getNetworkByPrefix(this.openstackPrefixes.getPrefix());
  for (  final Network n : appliNetworks) {
    networkApi.deleteNetwork(n.getId());
  }
}
