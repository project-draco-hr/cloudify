{
  Router router=null;
  if (!this.networkHelper.skipExternalNetworking()) {
    if (this.networkHelper.isCreateExternalRouter()) {
      router=networkApi.getRouterByName(this.openstackPrefixes.getPrefix() + MANAGEMENT_PUBLIC_ROUTER_NAME);
    }
 else {
      router=networkApi.getRouterByName(this.networkHelper.getExternalRouterName());
    }
    if (router != null) {
      try {
        final String privateIpNetworkName=this.networkHelper.getPrivateIpNetworkName();
        final Network privateNetwork=this.networkApi.getNetworkByName(privateIpNetworkName);
        if (privateNetwork != null) {
          final String[] privateNetSubnetIds=privateNetwork.getSubnets();
          if (privateNetSubnetIds != null && privateNetSubnetIds.length > 0) {
            final List<Port> ports=networkApi.getPortsByDeviceId(router.getId());
            if (ports != null) {
              for (              final Port port : ports) {
                for (                final RouteFixedIp fixedIp : port.getFixedIps()) {
                  for (                  final String id : privateNetSubnetIds) {
                    if (id.equals(fixedIp.getSubnetId())) {
                      networkApi.deleteRouterInterface(router.getId(),fixedIp.getSubnetId());
                    }
                  }
                }
              }
            }
          }
        }
      }
 catch (      final Exception e) {
        logger.log(Level.WARNING,"Could not remove an interface from external router",e);
      }
      if (this.networkHelper.isCreateExternalRouter()) {
        networkApi.deleteRouter(router.getId());
      }
    }
  }
  final List<Network> appNetworks=networkApi.getNetworkByPrefix(this.openstackPrefixes.getPrefix());
  if (appNetworks != null) {
    for (    final Network network : appNetworks) {
      if (router != null) {
        final String[] privateNetSubnetIds=network.getSubnets();
        if (privateNetSubnetIds != null && privateNetSubnetIds.length > 0) {
          final List<Port> ports=networkApi.getPortsByDeviceId(router.getId());
          if (ports != null) {
            for (            final Port port : ports) {
              for (              final RouteFixedIp fixedIp : port.getFixedIps()) {
                for (                final String id : privateNetSubnetIds) {
                  if (id.equals(fixedIp.getSubnetId())) {
                    networkApi.deleteRouterInterface(router.getId(),fixedIp.getSubnetId());
                  }
                }
              }
            }
          }
        }
      }
      networkApi.deleteNetwork(network.getId());
    }
  }
}
