{
  validationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,getFormattedMessage("validating_total_cores_quota"));
  int existingVcpus=0;
  int existingRam=0;
  final List<Flavor> flavors=computeApi.getFlavors();
  for (  final NovaServer novaServer : servers) {
    final NovaServer serverDetails=this.computeApi.getServerDetails(novaServer.getId());
    for (    final Flavor flavor : flavors) {
      if (flavor.getId().equals(serverDetails.getFlavor().getId())) {
        existingVcpus+=flavor.getVcpus();
        existingRam+=flavor.getRam();
        break;
      }
    }
  }
  final String managementHardwareId=managementComputeTemplate.getHardwareId().split("/")[1];
  Flavor managementFlavor=null;
  for (  final Flavor flavor : flavors) {
    if (flavor.getId().equals(managementHardwareId)) {
      managementFlavor=computeApi.getFlavor(managementHardwareId);
      break;
    }
  }
  if (managementFlavor == null) {
    throw new OpenstackException("Management flavor with ID: " + managementHardwareId + " could not be found.");
  }
  final int requiredVcpus=managementFlavor.getVcpus() * numOfManagementMachines;
  if (coreLimit != UNLIMITED_RESOURCE_QUOTA) {
    if (existingVcpus + requiredVcpus > coreLimit) {
      throw new CloudProvisioningException(getFormattedMessage("resource_validation_failure","virual cpus",coreLimit,existingVcpus,requiredVcpus));
    }
  }
  validationContext.validationEventEnd(ValidationResultType.OK);
  validationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,getFormattedMessage("validating_total_ram_quota"));
  final int requiredRam=managementFlavor.getRam() * numOfManagementMachines;
  if (coreLimit != UNLIMITED_RESOURCE_QUOTA) {
    if (existingRam + requiredRam > ramLimit) {
      throw new CloudProvisioningException(getFormattedMessage("resource_validation_failure","RAM",ramLimit,existingRam,requiredRam));
    }
  }
  validationContext.validationEventEnd(ValidationResultType.OK);
}
