{
  logger.fine(this.getClass().getName() + ": startMachine, management mode: " + management);
  final long end=System.currentTimeMillis() + unit.toMillis(duration);
  if (System.currentTimeMillis() > end) {
    throw new TimeoutException("Starting a new machine timed out");
  }
  try {
    this.createSecurityGroup(this.openstackPrefixes.getApplicationName());
    this.createSecurityGroup(this.openstackPrefixes.getServiceName());
    this.createSecurityGroupsRules();
    if (networkHelper.useApplicationNetworkTemplate()) {
      final Network network=this.getOrCreateNetwork(this.networkHelper.getApplicationNetworkPrefixedName());
      if (network != null) {
        final NetworkConfiguration networkTemplate=this.networkHelper.getApplicationNetworkTemplate();
        final List<org.cloudifysource.domain.cloud.network.Subnet> subnets=networkTemplate.getSubnets();
        for (        final org.cloudifysource.domain.cloud.network.Subnet subnetConfig : subnets) {
          this.getOrCreateSubnet(subnetConfig,network);
        }
      }
    }
    final String groupName=serverNamePrefix + this.configuration.getServiceName() + "-"+ counter.incrementAndGet();
    final String validGroupName=groupName.replace('.','-');
    logger.fine("Starting a new cloud server with group: " + validGroupName);
    final ComputeTemplate computeTemplate=this.cloud.getCloudCompute().getTemplates().get(this.cloudTemplateName);
    final MachineDetails md=this.createServer(groupName,end,computeTemplate,context.getLocationId());
    return md;
  }
 catch (  final OpenstackException e) {
    throw new CloudProvisioningException("Failed to start cloud machine",e);
  }
}
