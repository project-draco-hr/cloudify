{
  validationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,getFormattedMessage("validating_total_cores_quota"));
  logger.finest("virtual-cores quota limit is: " + coreLimit);
  int existingVcpus=0;
  int existingRam=0;
  List<Flavor> flavors;
  try {
    flavors=computeApi.getFlavors();
  }
 catch (  final OpenstackException e) {
    throw new CloudProvisioningException("Error requesting flavors.",e);
  }
  for (  final NovaServer novaServer : servers) {
    NovaServer serverDetails=null;
    try {
      serverDetails=this.computeApi.getServerDetails(novaServer.getId());
    }
 catch (    final OpenstackException e) {
      throw new CloudProvisioningException("Error requesting server details",e);
    }
    if (serverDetails == null) {
      throw new CloudProvisioningException("Error requesting server details for server with ID: " + novaServer.getId());
    }
    logger.finest("Getting flavor details for server instance with ID: " + novaServer.getId());
    final Flavor flavor=getFlavorById(flavors,serverDetails.getFlavor().getId());
    existingVcpus+=flavor.getVcpus();
    existingRam+=flavor.getRam();
  }
  final String managementHardwareId=managementComputeTemplate.getHardwareId().split("/")[1];
  final Flavor managementFlavor=getFlavorById(flavors,managementHardwareId);
  final int numOfManagementMachines=cloud.getProvider().getNumberOfManagementMachines();
  if (coreLimit == 0) {
    logger.warning("Failed to retrieve vCPUs quota, skipping vCPUs quota validation");
    validationContext.validationEventEnd(ValidationResultType.WARNING);
  }
 else {
    validateCpusQuota(validationContext,coreLimit,existingVcpus,managementFlavor.getVcpus(),numOfManagementMachines);
  }
  if (ramLimit == 0) {
    logger.warning("Failed to retrieve RAM quota, skipping RAM quota validation");
    validationContext.validationEventEnd(ValidationResultType.WARNING);
  }
 else {
    validateRamQuota(validationContext,ramLimit,existingRam,managementFlavor.getRam(),numOfManagementMachines);
  }
}
