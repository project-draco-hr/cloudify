{
  validationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,getFormattedMessage("validating_total_cores_quota"));
  logger.finest("virtual-cores quota limit is: " + coreLimit);
  int existingVcpus=0;
  int existingRam=0;
  List<Flavor> flavors;
  try {
    flavors=computeApi.getFlavors();
  }
 catch (  final OpenstackException e) {
    throw new CloudProvisioningException("Error requesting flavors.",e);
  }
  for (  final NovaServer novaServer : servers) {
    NovaServer serverDetails=null;
    try {
      serverDetails=this.computeApi.getServerDetails(novaServer.getId());
    }
 catch (    final OpenstackException e) {
      throw new CloudProvisioningException("Error requesting server details",e);
    }
    if (serverDetails == null) {
      throw new CloudProvisioningException("Error requesting server details for server with ID: " + novaServer.getId());
    }
    logger.finest("Getting flavor details for server instance with ID: " + novaServer.getId());
    final Flavor flavor=getFlavorById(flavors,serverDetails.getFlavor().getId());
    existingVcpus+=flavor.getVcpus();
    existingRam+=flavor.getRam();
  }
  final String managementHardwareId=managementComputeTemplate.getHardwareId().split("/")[1];
  final Flavor managementFlavor=getFlavorById(flavors,managementHardwareId);
  final int numOfManagementMachines=cloud.getProvider().getNumberOfManagementMachines();
  final int requiredVcpus=managementFlavor.getVcpus() * numOfManagementMachines;
  logger.finest("used cores amount to: " + existingVcpus + ". Required: "+ requiredVcpus);
  if (coreLimit != UNLIMITED_RESOURCE_QUOTA) {
    if (existingVcpus + requiredVcpus > coreLimit) {
      throw new CloudProvisioningException(getFormattedMessage("resource_validation_failure","virtual cpus",coreLimit,existingVcpus,requiredVcpus));
    }
  }
  validationContext.validationEventEnd(ValidationResultType.OK);
  validationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,getFormattedMessage("validating_total_ram_quota"));
  logger.finest("RAM quota limit is: " + ramLimit);
  final int requiredRam=managementFlavor.getRam() * numOfManagementMachines;
  logger.finest("used RAM amounts to: " + existingRam + ". Required: "+ requiredRam);
  if (ramLimit != UNLIMITED_RESOURCE_QUOTA) {
    if (existingRam + requiredRam > ramLimit) {
      throw new CloudProvisioningException(getFormattedMessage("resource_validation_failure","RAM",ramLimit,existingRam,requiredRam));
    }
  }
  validationContext.validationEventEnd(ValidationResultType.OK);
}
