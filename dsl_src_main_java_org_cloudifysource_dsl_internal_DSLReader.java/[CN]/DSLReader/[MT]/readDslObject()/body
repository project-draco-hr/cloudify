{
  try {
    init();
  }
 catch (  final IOException e) {
    throw new DSLException("Failed to initialize DSL Reader: " + e.getMessage(),e);
  }
  LinkedHashMap<Object,Object> properties=null;
  try {
    properties=createDSLProperties();
    createDSLOverrides(overridesFile,overridesScript,overrideProperties);
    overrideProperties(properties);
    addApplicationProperties(properties);
  }
 catch (  final Exception e) {
    String msg=null;
    if (propertiesFile != null) {
      msg=e.getMessage();
    }
 else {
      msg="Failed to load properties file: " + e.getMessage();
    }
    throw new IllegalArgumentException(msg,e);
  }
  if (this.variables != null) {
    properties.putAll(this.variables);
  }
  if (this.createServiceContext) {
    String canonicalPath=null;
    try {
      canonicalPath=workDir.getCanonicalPath();
    }
 catch (    final IOException e) {
      throw new DSLException("Failed to get canonical path of work directory: " + workDir + ". Error was: "+ e.getMessage(),e);
    }
    if (this.context == null) {
      this.context=new BaseServiceContext(canonicalPath);
    }
  }
  final GroovyShell gs=createGroovyShell(properties);
  final Object result=evaluateGroovyScript(gs);
  if (result == null) {
    throw new DSLException("The DSL evaluated to a null - check your syntax and try again");
  }
  if (this.createServiceContext) {
    if (!(result instanceof Service)) {
      throw new IllegalArgumentException("The DSL reader cannot create a service context to a DSL that does not evaluate to a Service. " + "Set the 'createServiceContext' option to false if you do not need a service conext");
    }
    ((BaseServiceContext)this.context).init((Service)result);
  }
  this.dslClassLoader=gs.getClassLoader();
  org.codehaus.groovy.reflection.ClassInfo.clearModifiedExpandos();
  return result;
}
