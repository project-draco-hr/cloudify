{
  final File srcFolder=recipeFile.getParentFile();
  final File destPuFolder=File.createTempFile("gs_usm_","");
  FileUtils.forceDelete(destPuFolder);
  FileUtils.forceMkdir(destPuFolder);
  logger.finer("created temp directory " + destPuFolder.getAbsolutePath());
  final File extFolder=new File(destPuFolder,"/ext");
  FileUtils.forceMkdir(extFolder);
  final File libFolder=new File(destPuFolder.getAbsolutePath(),"/lib");
  FileUtils.forceMkdir(libFolder);
  final File springFolder=new File(destPuFolder.getAbsolutePath(),"/META-INF/spring");
  FileUtils.forceMkdir(springFolder);
  logger.finer("created pu structure under " + destPuFolder);
  FileUtils.copyDirectory(srcFolder,extFolder);
  if (additionalServiceFiles != null) {
    for (    final File file : additionalServiceFiles) {
      FileUtils.copyFileToDirectory(file,extFolder);
    }
  }
  logger.finer("copied files from " + srcFolder.getAbsolutePath() + " to "+ extFolder.getAbsolutePath());
  final File srcUsmLibDir=new File(srcFolder,"usmlib");
  if (srcUsmLibDir.exists()) {
    FileUtils.copyDirectory(srcUsmLibDir,libFolder,SVNFileFilter.getFilter());
  }
  final InputStream puXmlStream=Packager.class.getClassLoader().getResourceAsStream("META-INF/spring/default_usm_pu.xml");
  if (puXmlStream == null) {
    throw new PackagingException("can not find locate default pu.xml");
  }
  final File destPuXml=new File(springFolder,"pu.xml");
  FileUtils.copyInputStreamToFile(puXmlStream,destPuXml);
  logger.finer("copied pu.xml");
  try {
    puXmlStream.close();
  }
 catch (  final IOException e) {
    logger.log(Level.SEVERE,"failed to close default_usm_pu.xml stream",e);
  }
  copyExtendedServiceFiles(service,recipeFile,extFolder);
  createManifestFile(destPuFolder);
  logger.finer("created pu folder " + destPuFolder.getAbsolutePath());
  return destPuFolder;
}
