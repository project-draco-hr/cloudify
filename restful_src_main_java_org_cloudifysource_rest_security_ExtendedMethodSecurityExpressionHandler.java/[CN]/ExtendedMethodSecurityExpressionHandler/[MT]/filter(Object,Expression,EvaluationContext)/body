{
  CustomMethodSecurityExpressionRoot rootObject=(CustomMethodSecurityExpressionRoot)ctx.getRootObject().getValue();
  if (logger.isDebugEnabled()) {
    logger.debug("Filtering with expression: " + filterExpression.getExpressionString());
  }
  if (filterTarget instanceof Collection || filterTarget.getClass().isArray()) {
    return super.filter(filterTarget,filterExpression,ctx);
  }
  if (filterTarget instanceof Map<?,?>) {
    Map<String,Object> restReturnObj=(Map<String,Object>)filterTarget;
    Map<Object,String> retainMap=new HashMap<Object,String>();
    if (restReturnObj.get(RestUtils.STATUS_KEY).equals(RestUtils.SUCCESS)) {
      Object appsMapObject=restReturnObj.get(RestUtils.RESPONSE_KEY);
      if (appsMapObject != null && appsMapObject instanceof Map) {
        Map<String,String> appsMap=(Map<String,String>)appsMapObject;
        if (logger.isDebugEnabled()) {
          logger.debug("Filtering map with " + appsMap.size() + " elements");
        }
        for (        Map.Entry<String,String> appEntry : appsMap.entrySet()) {
          String filterObject=appEntry.getValue();
          rootObject.setFilterObject(filterObject);
          if (ExpressionUtils.evaluateAsBoolean(filterExpression,ctx)) {
            retainMap.put(appEntry.getKey(),appEntry.getValue());
          }
        }
      }
      return RestUtils.successStatus(retainMap);
    }
  }
  throw new IllegalArgumentException("Filter target must be a collection or array type, but was " + filterTarget);
}
