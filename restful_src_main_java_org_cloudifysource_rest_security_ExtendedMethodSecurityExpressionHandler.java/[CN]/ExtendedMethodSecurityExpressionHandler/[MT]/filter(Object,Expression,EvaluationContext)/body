{
  CustomMethodSecurityExpressionRoot rootObject=(CustomMethodSecurityExpressionRoot)ctx.getRootObject().getValue();
  if (logger.isDebugEnabled()) {
    logger.debug("Filtering with expression: " + filterExpression.getExpressionString());
  }
  if (filterTarget instanceof Collection || filterTarget.getClass().isArray()) {
    return super.filter(filterTarget,filterExpression,ctx);
  }
  if (filterTarget instanceof Map) {
    @SuppressWarnings("unchecked") Map<String,Object> returnValue=(Map<String,Object>)filterTarget;
    if (RestUtils.SUCCESS.equals(returnValue.get(RestUtils.STATUS_KEY))) {
      Object responseObject=returnValue.get(RestUtils.RESPONSE_KEY);
      if (responseObject instanceof Map) {
        @SuppressWarnings("unchecked") Map<String,String> objectsMap=(Map<String,String>)responseObject;
        Map<Object,String> retainMap=new HashMap<Object,String>();
        for (        Map.Entry<String,String> entry : objectsMap.entrySet()) {
          String filterObject=entry.getValue();
          rootObject.setFilterObject(filterObject);
          if (ExpressionUtils.evaluateAsBoolean(filterExpression,ctx)) {
            retainMap.put(entry.getKey(),entry.getValue());
          }
        }
        returnValue=RestUtils.successStatus(retainMap);
      }
 else       if (responseObject instanceof List) {
        @SuppressWarnings("unchecked") List<Object> objectsList=(List<Object>)responseObject;
        List<Object> retainList=new ArrayList<Object>();
        for (        Object object : objectsList) {
          if (object instanceof ApplicationDescription) {
            rootObject.setFilterObject(((ApplicationDescription)object).getAuthGroups());
            if (ExpressionUtils.evaluateAsBoolean(filterExpression,ctx)) {
              retainList.add(object);
            }
          }
        }
        returnValue=RestUtils.successStatus(retainList);
      }
    }
    return returnValue;
  }
  throw new IllegalArgumentException("Filter target must be a collection or array type, but was " + filterTarget);
}
