{
  while (true) {
    final long waitForPUIPeriod=endTime - System.currentTimeMillis();
    if (waitForPUIPeriod <= 0) {
      throw new IllegalStateException("Could not find dependency " + dependencyService + " required for this service");
    }
    logger.info("Waiting for PUI of service: " + dependencyService + " for "+ waitForPUIPeriod+ " Milliseconds");
    final boolean found=timedAdmin.waitForPUI(pu,1,1,TimeUnit.SECONDS);
    logger.info("Timeout ended. processing unit " + dependencyService + " found result is "+ found);
    if (found) {
      final ProcessingUnitInstance[] puis=pu.getInstances();
      logger.info("Found " + puis.length + " instances");
      for (      final ProcessingUnitInstance pui : puis) {
        final ServiceMonitors sm=pui.getStatistics().getMonitors().get(CloudifyConstants.USM_MONITORS_SERVICE_ID);
        if (sm != null) {
          final Object stateObject=sm.getMonitors().get(CloudifyConstants.USM_MONITORS_STATE_ID);
          logger.info("USM state is: " + stateObject);
          if (stateObject == null) {
            logger.warning("Could not find the instance state in the PUI monitors");
          }
 else {
            final int stateIndex=(Integer)stateObject;
            final USMState usmState=USMState.values()[stateIndex];
            logger.info("PUI is in state: " + usmState);
            if (usmState == USMState.RUNNING) {
              logger.info("Found a running instance of dependency service: " + dependencyService);
              return;
            }
          }
        }
      }
    }
 else {
      logger.info("Could not find a running instance of service: " + dependencyService + ". Sleeping before trying again");
    }
    try {
      Thread.sleep(WAIT_FOR_DEPENDENCIES_INTERVAL_MILLIS);
    }
 catch (    final InterruptedException e) {
    }
  }
}
