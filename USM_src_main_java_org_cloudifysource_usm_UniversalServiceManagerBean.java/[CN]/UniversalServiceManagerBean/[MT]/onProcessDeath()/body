{
  logger.info("Detected death of underlying process");
synchronized (this.stateMutex) {
    if (this.state != USMState.RUNNING) {
      return;
    }
    try {
      getUsmLifecycleBean().firePostStop(StopReason.PROCESS_FAILURE);
    }
 catch (    final Exception e) {
      logger.log(Level.SEVERE,"The Post Stop event failed to execute after an anexpected failure of the process: " + e.getMessage(),e);
    }
    this.executors.shutdownNow();
    this.state=USMState.LAUNCHING;
    this.executors=Executors.newScheduledThreadPool(THREAD_POOL_SIZE);
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(postDeathWaitPeriodMillis);
        }
 catch (        final InterruptedException e) {
        }
        try {
          logger.info("Relaunching process");
          launch();
          logger.info("Finished Relaunching process after unexpected process death");
        }
 catch (        final USMException e) {
          logger.log(Level.SEVERE,"Failed to re-launch the external process after a previous failure: " + e.getMessage(),e);
          logger.severe("Marking this USM as failed so it will be recycled by GSM");
          markUSMAsFailed(e);
        }
catch (        final TimeoutException e) {
          e.printStackTrace();
        }
      }
    }
).start();
  }
}
