{
synchronized (this.stateMutex) {
    this.state=USMState.LAUNCHING;
    getUsmLifecycleBean().firePreStart(StartReason.DEPLOY);
    final Set<Long> childrenBefore=getChildProcesses(this.myPid);
    getUsmLifecycleBean().logProcessStartEvent();
    getUsmLifecycleBean().externalProcessStarted();
    try {
      this.process=getUsmLifecycleBean().getLauncher().launchProcessAsync(getUsmLifecycleBean().getConfiguration().getStartCommand(),this.puExtDir,getOutputFile(),getErrorFile());
    }
 catch (    final USMException e) {
      getUsmLifecycleBean().logProcessStartFailureEvent(e.getMessage());
      throw e;
    }
    startFileMonitoringTask();
    try {
      Thread.sleep(this.postLaunchWaitPeriodMillis);
    }
 catch (    final InterruptedException e) {
    }
    if (!isProcessAlive(this.process)) {
      logger.severe("Attempt to launch underlying process has failed!");
      getUsmLifecycleBean().logProcessStartFailureEvent("Attempt to launch underlying process has failed.");
      if (tailer != null) {
        this.tailer.run();
      }
      throw new USMException("Process has shut down or failed to start. Check logs for errors");
    }
    try {
      logger.info("Executing process liveness test");
      if (!getUsmLifecycleBean().isProcessLivenessTestPassed()) {
        UniversalServiceManagerConfiguration configuration=getUsmLifecycleBean().getConfiguration();
        long startDetectionTimeoutMilliSecs=configuration.getStartDetectionTimeoutMSecs();
        long startDetectionTimeoutSecs=TimeUnit.SECONDS.convert(startDetectionTimeoutMilliSecs,TimeUnit.MILLISECONDS);
        throw new USMException("The Start Detection test failed in the defined time period: " + startDetectionTimeoutSecs + " seconds."+ " Shutting down this instance.");
      }
      logger.info("Process liveness test passed");
      getUsmLifecycleBean().firePostStart(StartReason.DEPLOY);
    }
  finally {
      findProcessIDs(childrenBefore,null);
    }
    startAsyncTasks();
    this.state=USMState.RUNNING;
    this.stateMutex.notifyAll();
  }
}
