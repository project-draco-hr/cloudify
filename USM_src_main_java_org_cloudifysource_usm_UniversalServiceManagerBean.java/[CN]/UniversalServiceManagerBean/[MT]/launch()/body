{
synchronized (this.stateMutex) {
    this.state=USMState.LAUNCHING;
    getUsmLifecycleBean().firePreStart(StartReason.DEPLOY);
    getUsmLifecycleBean().logProcessStartEvent();
    try {
      this.process=null;
      this.serviceProcessPIDs=new ArrayList<Long>(0);
      final ExecutableDSLEntry startCommand=getUsmLifecycleBean().getConfiguration().getService().getLifecycle().getStart();
      if (startCommand == null) {
        logger.info("No start command specified in recipe. No processes will be launched or monitored");
        this.serviceProcessPIDs=new ArrayList<Long>(0);
      }
 else {
        try {
          this.process=getUsmLifecycleBean().getLauncher().launchProcessAsync(startCommand,this.puExtDir,getOutputFile(),getErrorFile());
        }
 catch (        final USMException e) {
          getUsmLifecycleBean().logProcessStartFailureEvent(e.getMessage());
          throw e;
        }
      }
      startFileMonitoringTask();
      logger.info("Executing process liveness test");
      if (!getUsmLifecycleBean().isProcessLivenessTestPassed(this.process)) {
        final long startDetectionTimeoutSecs=getUsmLifecycleBean().getConfiguration().getService().getLifecycle().getStartDetectionTimeoutSecs();
        throw new USMException("The Start Detection test failed in the defined time period: " + startDetectionTimeoutSecs + " seconds."+ " Shutting down this instance.");
      }
      logger.info("Process liveness test passed");
      final Integer exitCode=USMUtils.getProcessExitCode(this.process);
      initServiceProcessMode(this.process,exitCode);
    }
  finally {
      logger.info("Executing Process Locators!");
      this.serviceProcessPIDs=getUsmLifecycleBean().getServiceProcesses();
      logger.info("Monitored processes: " + this.serviceProcessPIDs);
      writePidsToFile();
    }
    getUsmLifecycleBean().firePostStart(StartReason.DEPLOY);
    startAsyncTasks();
    this.state=USMState.RUNNING;
    this.stateMutex.notifyAll();
  }
}
