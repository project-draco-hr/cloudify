{
  if (commandName == null) {
    logger.severe("Command Name parameter in invoke is missing");
    throw new IllegalArgumentException("Command Name parameter in invoke is missing");
  }
  result.put(CloudifyConstants.INVOCATION_RESPONSE_COMMAND_NAME,commandName);
  final Service service=getUsmLifecycleBean().getConfiguration().getService();
  final ExecutableDSLEntry customCommand;
  if (commandName.startsWith(CloudifyConstants.BUILT_IN_COMMAND_PREFIX)) {
    customCommand=getBuiltInCommand(commandName.substring(CloudifyConstants.BUILT_IN_COMMAND_PREFIX.length()));
  }
 else {
    customCommand=service.getCustomCommands().get(commandName);
  }
  if (customCommand == null) {
    logger.warning("Custom Command: " + commandName + " does not exist in service: "+ this.clusterName);
    result.put(CloudifyConstants.INVOCATION_RESPONSE_STATUS,false);
    result.put(CloudifyConstants.INVOCATION_RESPONSE_EXCEPTION,"No such Custom Command: " + commandName);
    result.put(CloudifyConstants.INVOCATION_RESPONSE_RESULT,"No such Custom Command: " + commandName);
    return;
  }
  try {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine("Executing custom command: " + commandName + ". Custom command is: "+ customCommand);
    }
    final EventResult executionResult=new DSLEntryExecutor(customCommand,this.getUsmLifecycleBean().getLauncher(),this.getPuExtDir(),namedArgs,LifecycleEvents.CUSTOM_COMMAND).run();
    result.put(CloudifyConstants.INVOCATION_RESPONSE_STATUS,executionResult.isSuccess());
    result.put(CloudifyConstants.INVOCATION_RESPONSE_EXCEPTION,executionResult.getException());
    result.put(CloudifyConstants.INVOCATION_RESPONSE_RESULT,executionResult.getResult());
  }
 catch (  final Exception e) {
    logger.log(Level.SEVERE,"Failed to execute the executeOnAllInstances section of custom command " + commandName + " on instance "+ instanceId,e);
    result.put(CloudifyConstants.INVOCATION_RESPONSE_STATUS,false);
    result.put(CloudifyConstants.INVOCATION_RESPONSE_EXCEPTION,e);
  }
}
