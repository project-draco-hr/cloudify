{
  final Service service=getUsmLifecycleBean().getConfiguration().getService();
  final String storageTemplateName=service.getStorage().getTemplate();
  if (StringUtils.isNotBlank(storageTemplateName)) {
    try {
      logger.info("Allocating static storage for service " + getUsmLifecycleBean().getConfiguration().getServiceContext());
      final StorageFacade storage=getUsmLifecycleBean().getConfiguration().getServiceContext().getStorage();
      final StorageTemplate storageTemplate=storage.getTemplate(storageTemplateName);
      String deviceName=storageTemplate.getDeviceName();
      getUsmLifecycleBean().log("Allocating storage with size " + storageTemplate.getSize() + "GB");
      final ServiceVolume serviceVolume=getServiceVolumeFromSpace(getUsmLifecycleBean().getConfiguration().getServiceContext());
      if (serviceVolume == null) {
        logger.fine("service volume is null. this means it hasn't been created yet.");
        getUsmLifecycleBean().log("Creating volume");
        final String volumeId=storage.createVolume(storageTemplateName);
        getUsmLifecycleBean().log("Volume created with id " + volumeId);
        final ServiceVolume newServiceVolume=managementSpace.readById(ServiceVolume.class,volumeId);
        logger.fine("Flagging service volume with id " + volumeId + " to be static storage.");
        managementSpace.change(newServiceVolume,new ChangeSet().set("dynamic",false));
        getUsmLifecycleBean().log("Attaching volume to device " + deviceName);
        storage.attachVolume(volumeId,deviceName);
        if (storageTemplate.isPartitioningRequired()) {
          getUsmLifecycleBean().log("Partitioning volume at " + deviceName);
          storage.partition(volumeId,deviceName);
        }
        getUsmLifecycleBean().log("Formatting volume to filesystem " + storageTemplate.getFileSystemType());
        storage.format(volumeId,deviceName,storageTemplate.getFileSystemType());
        getUsmLifecycleBean().log("Mounting volume to " + storageTemplate.getPath());
        storage.mount(volumeId,deviceName,storageTemplate.getPath());
      }
 else {
        String voluemId=serviceVolume.getId();
        logger.fine("Detected an existing volume for this service upon allocation. volume Id: " + voluemId + ", found in state : "+ serviceVolume.getState());
switch (serviceVolume.getState()) {
case CREATED:
          getUsmLifecycleBean().log("Attaching volume with id " + voluemId + " to device "+ deviceName);
        storage.attachVolume(voluemId,deviceName);
case ATTACHED:
      if (storageTemplate.isPartitioningRequired()) {
        getUsmLifecycleBean().log("Partitioning volume with id " + voluemId + " at "+ deviceName);
        storage.partition(voluemId,deviceName);
      }
case PARTITIONED:
    getUsmLifecycleBean().log("Formatting volume with id " + voluemId + " to filesystem "+ storageTemplate.getFileSystemType());
  storage.format(voluemId,deviceName,storageTemplate.getFileSystemType());
case FORMATTED:
getUsmLifecycleBean().log("Mounting volume with id " + voluemId + " to "+ storageTemplate.getPath());
storage.mount(voluemId,deviceName,storageTemplate.getPath());
case MOUNTED:
break;
default :
throw new IllegalStateException("Unexpected state of service volume : " + serviceVolume.getState());
}
}
}
 catch (final Exception e) {
getUsmLifecycleBean().log("Storage allocation failed : " + e.getMessage());
if (e instanceof TimeoutException) {
throw (TimeoutException)e;
}
throw new USMException(e);
}
}
}
