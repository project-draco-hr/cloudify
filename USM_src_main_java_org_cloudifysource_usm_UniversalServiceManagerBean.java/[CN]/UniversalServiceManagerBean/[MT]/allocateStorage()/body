{
  Service service=getUsmLifecycleBean().getConfiguration().getService();
  final String storageTemplateName=service.getStorage().getTemplate();
  if (StringUtils.isNotBlank(storageTemplateName)) {
    try {
      logger.info("Allocating static storage for service " + getUsmLifecycleBean().getConfiguration().getServiceContext());
      final StorageFacade storage=getUsmLifecycleBean().getConfiguration().getServiceContext().getStorage();
      final StorageTemplate storageTemplate=storage.getTemplate(storageTemplateName);
      getUsmLifecycleBean().log("Allocating storage with size " + storageTemplate.getSize() + "GB");
      final ServiceVolume serviceVolume=getServiceVolumeFromSpace(getUsmLifecycleBean().getConfiguration().getServiceContext());
      if (serviceVolume == null) {
        logger.fine("service volume is null. this means it hasn't been created yet.");
        getUsmLifecycleBean().log("Creating volume");
        final String id=storage.createVolume(storageTemplateName);
        getUsmLifecycleBean().log("Volume created with id " + id);
        ServiceVolume newServiceVolume=managementSpace.readById(ServiceVolume.class,id);
        logger.fine("Flagging service volume with id " + id + " to be static storage.");
        managementSpace.change(newServiceVolume,new ChangeSet().set("dynamic",false));
        getUsmLifecycleBean().log("Attaching volume to device " + storageTemplate.getDeviceName());
        storage.attachVolume(id,storageTemplate.getDeviceName());
        getUsmLifecycleBean().log("Formatting volume to filesystem " + storageTemplate.getFileSystemType());
        storage.format(storageTemplate.getDeviceName(),storageTemplate.getFileSystemType());
        getUsmLifecycleBean().log("Mounting volume to " + storageTemplate.getPath());
        storage.mount(storageTemplate.getDeviceName(),storageTemplate.getPath());
      }
 else {
        logger.fine("Detected an existing volume for this service upon allocation. found in state : " + serviceVolume.getState());
switch (serviceVolume.getState()) {
case CREATED:
{
            getUsmLifecycleBean().log("Attaching volume to device " + storageTemplate.getDeviceName());
            storage.attachVolume(serviceVolume.getId(),storageTemplate.getDeviceName());
            getUsmLifecycleBean().log("Formatting volume to filesystem " + storageTemplate.getFileSystemType());
            storage.format(storageTemplate.getDeviceName(),storageTemplate.getFileSystemType());
            getUsmLifecycleBean().log("Mounting volume to " + storageTemplate.getPath());
            storage.mount(storageTemplate.getDeviceName(),storageTemplate.getPath());
            break;
          }
case ATTACHED:
{
          getUsmLifecycleBean().log("Attaching volume to device " + storageTemplate.getDeviceName());
          storage.format(storageTemplate.getDeviceName(),storageTemplate.getFileSystemType());
          getUsmLifecycleBean().log("Formatting volume to filesystem " + storageTemplate.getFileSystemType());
          storage.mount(storageTemplate.getDeviceName(),storageTemplate.getPath());
          break;
        }
case FORMATTED:
{
        getUsmLifecycleBean().log("Formatting volume to filesystem " + storageTemplate.getFileSystemType());
        storage.mount(storageTemplate.getDeviceName(),storageTemplate.getPath());
      }
case MOUNTED:
{
      break;
    }
}
}
}
 catch (final Exception e) {
getUsmLifecycleBean().log("Storage allocation failed : " + e.getMessage());
if (e instanceof TimeoutException) {
throw (TimeoutException)e;
}
throw new USMException(e);
}
}
}
