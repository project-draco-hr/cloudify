{
  Service service=getUsmLifecycleBean().getConfiguration().getService();
  final String storageTemplateName=service.getStorage().getTemplate();
  final StorageFacade storage=getUsmLifecycleBean().getConfiguration().getServiceContext().getStorage();
  if (StringUtils.isNotBlank(storageTemplateName)) {
    try {
      logger.info("De-Allocating static storage for service " + getUsmLifecycleBean().getConfiguration().getServiceContext());
      final ServiceVolume serviceVolume=getServiceVolumeFromSpace(getUsmLifecycleBean().getConfiguration().getServiceContext());
      if (serviceVolume == null) {
        logger.fine("Could not find a volume for this service in the management space. this probably means there was a problem during volume creation");
      }
 else {
        logger.fine("Detected an existing volume for this service upon de-allocation. found in state : " + serviceVolume.getState());
        final boolean deleteStorage=storage.getTemplate(storageTemplateName).isDeleteOnExit();
switch (serviceVolume.getState()) {
case MOUNTED:
{
            storage.unmount(serviceVolume.getDevice());
            storage.detachVolume(serviceVolume.getId());
            if (deleteStorage) {
              storage.deleteVolume(serviceVolume.getId());
            }
            break;
          }
case ATTACHED:
{
          storage.detachVolume(serviceVolume.getId());
          if (deleteStorage) {
            storage.deleteVolume(serviceVolume.getId());
          }
          break;
        }
case FORMATTED:
{
        storage.detachVolume(serviceVolume.getId());
        if (deleteStorage) {
          storage.deleteVolume(serviceVolume.getId());
        }
        break;
      }
case CREATED:
{
      if (deleteStorage) {
        storage.deleteVolume(serviceVolume.getId());
      }
      break;
    }
}
}
}
 catch (final Exception e) {
if (e instanceof TimeoutException) {
throw (TimeoutException)e;
}
throw new USMException(e);
}
}
}
