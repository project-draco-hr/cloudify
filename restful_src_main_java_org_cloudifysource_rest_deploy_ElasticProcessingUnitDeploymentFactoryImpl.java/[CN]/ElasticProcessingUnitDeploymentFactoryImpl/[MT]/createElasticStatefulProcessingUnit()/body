{
  StatefulProcessingUnit puConfig=deploymentConfig.getService().getStatefulProcessingUnit();
  final Sla statefulSla=puConfig.getSla();
  prepareSla(statefulSla);
  final ElasticStatefulProcessingUnitDeployment deployment=new ElasticStatefulProcessingUnitDeployment(deploymentConfig.getPackedFile());
  addSharedDeploymentParameters(deployment);
  addProcessingUnitContextProperties(deployment,puConfig.getContextProperties());
  final int containerMemoryInMB=statefulSla.getMemoryCapacityPerContainer();
  final int maxMemoryCapacityInMB=statefulSla.getMaxMemoryCapacity();
  deployment.memoryCapacityPerContainer(containerMemoryInMB,MemoryUnit.MEGABYTES).maxMemoryCapacity(maxMemoryCapacityInMB + "m").highlyAvailable(statefulSla.getHighlyAvailable()).singleMachineDeployment();
  setSpringProfilesActive(deployment,puConfig.getSpringProfilesActive());
  ManualCapacityScaleConfig scaleConfig;
  final int memoryCapacity=statefulSla.getMemoryCapacity();
  if (isLocalcloud()) {
    scaleConfig=new ManualCapacityScaleConfigurer().memoryCapacity(containerMemoryInMB * deploymentConfig.getService().getNumInstances(),MemoryUnit.MEGABYTES).create();
  }
 else {
    scaleConfig=ElasticScaleConfigFactory.createManualCapacityScaleConfig(memoryCapacity,0,deploymentConfig.getService().isLocationAware(),true);
  }
  deployment.scale(scaleConfig);
  return deployment;
}
