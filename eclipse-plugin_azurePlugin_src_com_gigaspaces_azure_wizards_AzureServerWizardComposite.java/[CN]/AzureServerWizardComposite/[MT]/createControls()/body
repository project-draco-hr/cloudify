{
  final Composite parent=this;
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  this.setLayout(layout);
  this.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridData gridData=new GridData(SWT.FILL,SWT.BEGINNING,true,false);
  gridData.horizontalSpan=1;
  GridData fillData=new GridData(SWT.FILL,SWT.FILL,true,true);
  fillData.heightHint=100;
  final Composite topComposite=new Composite(parent,SWT.NONE);
  topComposite.setLayout(new GridLayout(3,false));
  topComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Group azureProjectsGroup=new Group(parent,SWT.NONE);
  azureProjectsGroup.setLayout(new GridLayout(1,false));
  azureProjectsGroup.setLayoutData(gridData);
  azureProjectsGroup.setText("Azure Roles");
  final Tree rolesTree=new Tree(azureProjectsGroup,SWT.BORDER);
  rolesTree.setLayoutData(fillData);
  List<AzureProject> projects=AzureProjectTools.getProjects();
  for (  AzureProject azureProject : projects) {
    List<AzureRole> roles=azureProject.getRoles();
    if (roles == null || roles.isEmpty())     continue;
    final TreeItem projectItem=new TreeItem(rolesTree,SWT.NONE);
    projectItem.setText(azureProject.getProject().getName());
    projectItem.setImage(Activator.getImages().get(Activator.PROJECT_FOLDER_IMAGE));
    for (    AzureRole azureRole : roles) {
      TreeItem roleItem=new TreeItem(projectItem,SWT.NONE);
      roleItem.setText(azureRole.getRole());
      roleItem.setData(azureRole);
      roleItem.setImage(Activator.getImages().get(Activator.ROLE_FOLDER_IMAGE));
    }
  }
  rolesTree.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      Widget item=event.item;
      if (item instanceof TreeItem) {
        TreeItem treeItem=(TreeItem)item;
        if (treeItem.getData() != null) {
          System.out.println(treeItem.getText());
          AzureServerWizardProperties.setRole((AzureRole)treeItem.getData());
        }
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent event){
      System.out.println("default " + event.text);
    }
  }
);
  createExistingComposite(parent);
  Button existingServerBut=new Button(parent,SWT.RADIO);
  existingServerBut.setText("Select an existing server");
  existingServerBut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      createExistingComposite(parent);
    }
  }
);
  Button newServerBut=new Button(parent,SWT.RADIO);
  newServerBut.setText("Define a new server");
  newServerBut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      createManualComposite(parent);
    }
  }
);
  final Text jreLocationText=SWTUtil.createLabeledPath("JDK:","<default>",topComposite);
  jreLocationText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      jreLocation=jreLocationText.getText();
    }
  }
);
}
